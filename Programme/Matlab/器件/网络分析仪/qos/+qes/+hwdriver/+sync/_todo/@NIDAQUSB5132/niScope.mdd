<?xml version="1.0" encoding="utf-8"?>
<MATLABInstrumentDriver>
   <FileVersion>2.42</FileVersion>
   <DriverName>niScope</DriverName>
   <DriverType>MATLAB IVI-C</DriverType>
   <InstrumentType>IVIInstrument</InstrumentType>
   <InstrumentManufacturer>National Instruments Corp.</InstrumentManufacturer>
   <InstrumentModel>NI Digitizers</InstrumentModel>
   <InstrumentVersion>1.0</InstrumentVersion>
   <Identify/>
   <Reset/>
   <Selftest/>
   <Error/>
   <CreateInitCode>
      <Code>function init(obj)
% This function is called after the object is created.
% OBJ is the device object.
% End of function definition - DO NOT EDIT
</Code>
   </CreateInitCode>
   <ConnectInitCode>
      <Type>MCode</Type>
      <Code>function init(obj)
% This function is called after the object is connected.
% OBJ is the device object.
% End of function definition - DO NOT EDIT
</Code>
   </ConnectInitCode>
   <CleanupCode>
      <Type>MCode</Type>
      <Code>function cleanup(obj)
% This function is called before the object is disconnected.
% OBJ is the device object.
% End of function definition - DO NOT EDIT
</Code>
   </CleanupCode>
   <GroupInfo>
      <Group>
         <Name>parent</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="parent1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>initwithoptions</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [InstrumentHandle] = initwithoptions(obj, ResourceName, IDQuery, ResetDevice, OptionString)

libname = get(obj, 'DriverName');
session = get(obj, 'Interface');
ResourceName = [double(ResourceName) 0];
OptionString = [double(OptionString) 0];
InstrumentHandle = libpointer('uint32Ptr', 0);

status = calllib(libname, 'niScope_InitWithOptions', ResourceName, IDQuery, ResetDevice, OptionString, InstrumentHandle);

InstrumentHandle = double(InstrumentHandle.Value);

if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt;niScope_InitWithOptions&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_InitWithOptions &lt;/h1&gt;&#xD;
&lt;H2&gt;C Function Prototype&lt;/H2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus niScope_InitWithOptions (ViRsrc &#xD;
resourceName, ViBoolean IDQuery, ViBoolean resetDevice, ViString optionString, &#xD;
ViSession* newVi);&lt;/p&gt;&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&lt;P class = "Body"&gt;Performs the following initialization actions:&lt;/P&gt;&#xD;
&lt;UL&gt;&#xD;
  &lt;LI&gt;Creates a new IVI instrument driver and optionally sets the initial state &#xD;
  of the following session properties: Range Check, Cache, Simulate, Record &#xD;
  Value Coercions &lt;/li&gt;&#xD;
  &lt;LI&gt;Opens a session to the specified device using the interface and address &#xD;
  you specify for the &lt;strong&gt;resourceName&lt;/strong&gt;  &lt;/li&gt;&#xD;
  &lt;LI&gt;Resets the digitizer to a known state if  &lt;strong&gt;resetDevice&lt;/strong&gt;  is set &#xD;
  to &lt;span class="Monospace"&gt;VI_TRUE&lt;/span&gt; &lt;/li&gt;&#xD;
  &lt;LI&gt;Queries the instrument ID and verifies that it is valid for this &#xD;
  instrument driver if the &lt;strong&gt;IDQuery&lt;/strong&gt; is set to &lt;span class="Monospace"&gt;VI_TRUE&lt;/span&gt;&lt;/li&gt;&#xD;
  &lt;LI&gt;Returns an instrument handle that you use to identify the instrument in &#xD;
  all subsequent instrument driver function calls &lt;/LI&gt;&lt;/UL&gt;&#xD;
&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>Acquisition</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Acquisition1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Acquisition_Type</Name>
               <Location>Acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1250101);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1250101 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1001.0</Value>
                     <Value>1002.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies how the digitizer acquires data and fills the waveform record.
    "</Description>
            </Property>
            <Property>
               <Name>Binary_Sample_Width</Name>
               <Location>Acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150005);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150005 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Indicates the bit width of the binary data in the acquired waveform. Useful for determining which Binary Fetch function to use. Compare to NISCOPE_ATTR_RESOLUTION.
To configure the device to store samples with a lower resolution that the native, set this attribute to the desired binary width.
This can be useful for streaming at faster speeds at the cost of resolution. The least significant bits will be lost with this configuration.

Valid Values: 8, 16, 32
    "</Description>
            </Property>
            <Property>
               <Name>Data_Transfer_Block_Size</Name>
               <Location>Acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150316);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150316 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the maximum number of samples to transfer at one time from the device to host memory.Increasing this number should result in better fetching performance because the driver does not need to restart the transfers as often.However, increasing this number may also increase the amount of page-locked memory required from the system.
    "</Description>
            </Property>
            <Property>
               <Name>Enable_RIS_in_Auto_Setup</Name>
               <Location>Acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1150106);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1150106, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Indicates whether the digitizer should use RIS sample rates when searching for a frequency in autosetup.

Valid Values:
VI_TRUE  (1) - Use RIS sample rates in autosetup
VI_FALSE (0) - Do not use RIS sample rates in autosetup
    "</Description>
            </Property>
            <Property>
               <Name>Fetch_Backlog</Name>
               <Location>Acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150084);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"Returns the number of samples (NISCOPE_ATTR_POINTS_DONE) that have been acquired but not fetched for the record specified by NISCOPE_ATTR_FETCH_RECORD_NUMBER.
    "</Description>
            </Property>
            <Property>
               <Name>Fetch_Meas_Number_of_Samples</Name>
               <Location>Acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150081);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150081 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Number of samples to fetch when performing a measurement. Use -1 to fetch the actual record length.
Default Value: -1
    "</Description>
            </Property>
            <Property>
               <Name>Fetch_Number_of_Records</Name>
               <Location>Acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150080);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150080 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Number of records to fetch. Use -1 to fetch all configured records.
Default Value: -1
    "</Description>
            </Property>
            <Property>
               <Name>Fetch_Offset</Name>
               <Location>Acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150078);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150078 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Offset in samples to start fetching data within each record. The offset is applied relative to NISCOPE_ATTR_FETCH_RELATIVE_TO.The offset can be positive or negative.

Default Value: 0
    "</Description>
            </Property>
            <Property>
               <Name>Fetch_Record_Number</Name>
               <Location>Acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150079);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150079 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Zero-based index of the first record to fetch. Use NISCOPE_FETCH_NUM_RECORDS to set the number of records to fetch.

Default Value: 0.
    "</Description>
            </Property>
            <Property>
               <Name>Fetch_Relative_To</Name>
               <Location>Acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150077);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150077 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>388.0</Value>
                     <Value>481.0</Value>
                     <Value>477.0</Value>
                     <Value>482.0</Value>
                     <Value>483.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Position to start fetching within one record.
Default Value: NISCOPE_VAL_PRETRIGGER
    "</Description>
            </Property>
            <Property>
               <Name>Points_Done</Name>
               <Location>Acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150082);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"Actual number of samples acquired in the record specified by NISCOPE_ATTR_FETCH_RECORD_NUMBER from the NISCOPE_ATTR_FETCH_RELATIVE_TO and NISCOPE_ATTR_FETCH_OFFSET attributes.
    "</Description>
            </Property>
            <Property>
               <Name>Records_Done</Name>
               <Location>Acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150083);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"Specifies the number of records that have been completely acquired.
    "</Description>
            </Property>
            <Property>
               <Name>Resolution</Name>
               <Location>Acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150102);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"Indicates the bit width of valid data (as opposed to padding bits) in the acquired waveform. Compare to NISCOPE_ATTR_BINARY_SAMPLE_WIDTH.
    "</Description>
            </Property>
            <Property>
               <Name>Sample_Mode</Name>
               <Location>Acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1250106);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"Indicates the sample mode the digitizer is currently using.
    "</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>abort</Name>
               <Location>Acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function abort(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'niScope_Abort', session);


if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt;niScope_Abort&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_Abort&lt;/h1&gt;&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus niScope_Abort (ViSession vi);&lt;/p&gt;&#xD;
&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&#xD;
&lt;p class="Body"&gt;Aborts an acquisition and returns the digitizer to the Idle state. Call this function  if the digitizer times out waiting for a trigger. &#xD;
&lt;/p&gt;&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
            <Method>
               <Name>acquisitionstatus</Name>
               <Location>Acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [AcquisitionStatus] = acquisitionstatus(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
AcquisitionStatus = libpointer('int32Ptr', 0);

status = calllib(libname, 'niScope_AcquisitionStatus', session, AcquisitionStatus);

AcquisitionStatus = double(AcquisitionStatus.Value);

if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt;niScope_AcquisitionStatus&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_AcquisitionStatus&#xD;
&lt;/h1&gt;&#xD;
&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus niScope_AcquisitionStatus (ViSession vi, ViInt32* status);&lt;/p&gt;&#xD;
&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&#xD;
&lt;p class="Body"&gt;Returns status information about the acquisition to the &lt;strong&gt;status&lt;/strong&gt; output parameter.&#xD;
&lt;/p&gt;&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
            <Method>
               <Name>commit</Name>
               <Location>Acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function commit(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'niScope_Commit', session);


if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt;niScope_Commit&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_Commit&lt;/h1&gt;&#xD;
&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus niScope_Commit (ViSession vi); &lt;/p&gt;&#xD;
&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&#xD;
&lt;p class="Body"&gt;Commits to hardware all the parameter settings associated with the task.&#xD;
Use this function if you want a parameter change to be immediately reflected in &#xD;
the hardware. This function is  not supported for Traditional NI-DAQ (Legacy) devices.&lt;/p&gt;&#xD;
&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
            <Method>
               <Name>fetch</Name>
               <Location>Acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Wfm, WfmInfo] = fetch(obj, ChannelList, Timeout, NumSamples, Wfm, WfmInfo)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelList = [double(ChannelList) 0];
Wfm = libpointer('doublePtr', Wfm);
WfmInfo = libstruct('niScope_wfmInfo', WfmInfo);

status = calllib(libname, 'niScope_Fetch', session, ChannelList, Timeout, NumSamples, Wfm, WfmInfo);

Wfm = double(Wfm.Value);
WfmInfo = WfmInfo;

if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt;niScope_Fetch&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_Fetch&lt;/h1&gt;&#xD;
&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus niScope_Fetch (ViSession vi, ViConstString channelList, ViReal64 timeout, ViInt32 numSamples, ViReal64*  wfm, struct niScope_wfmInfo* wfmInfo);&lt;/p&gt;&#xD;
&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&#xD;
&lt;p class="Body"&gt;Returns the waveform from a previously initiated acquisition that the digitizer acquires for the specified channel.   This function returns scaled voltage waveforms.&#xD;
&lt;/p&gt;&#xD;
&lt;p class="Body"&gt;This function may return multiple waveforms depending on the number of channels, the acquisition type, and the number of records you specify. &lt;/p&gt;&#xD;
&#xD;
&#xD;
&lt;table class="Borderless"&gt;&lt;tr&gt;&lt;td class="Icon"&gt;&lt;img src="note.gif"&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;Notes&lt;/strong&gt;&amp;nbsp;&amp;nbsp;You can use &lt;a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_Read.html')"&gt;niScope_Read&lt;/a&gt; instead of this function. niScope_Read starts an acquisition on all enabled channels, &#xD;
waits for the acquisition to complete, and returns the waveform for the specified channel.&#xD;
&lt;p class="Body"&gt;&#xD;
Some functionality, such as time stamping, is not supported in all digitizers. Refer to &lt;a href="javascript:LaunchHelp('Digitizers.chm::/Features_Supported_Main.html')"&gt;Features Supported by Device&lt;/a&gt;  for more information.&lt;/p&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xD;
&#xD;
&#xD;
&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
            <Method>
               <Name>fetchbinary16</Name>
               <Location>Acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Wfm, WfmInfo] = fetchbinary16(obj, ChannelList, Timeout, NumSamples, Wfm, WfmInfo)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelList = [double(ChannelList) 0];
Wfm = libpointer('int16Ptr', Wfm);
WfmInfo = libstruct('niScope_wfmInfo', WfmInfo);

status = calllib(libname, 'niScope_FetchBinary16', session, ChannelList, Timeout, NumSamples, Wfm, WfmInfo);

Wfm = double(Wfm.Value);
WfmInfo = WfmInfo;

if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt; niScope_FetchBinary16&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_FetchBinary16&lt;/h1&gt;&#xD;
&#xD;
&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus niScope_FetchBinary16 (ViSession vi, ViConstString channelList, ViReal64 timeout, ViInt32 numSamples, ViInt16* wfm, struct niScope_wfmInfo* wfmInfo);&lt;/p&gt;&#xD;
&#xD;
&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&#xD;
&#xD;
&lt;p class="Body"&gt;Retrieves data from a previously initiated acquisition and returns binary 16-bit waveforms. &#xD;
This function may return multiple waveforms depending on the number of channels, the acquisition type, &#xD;
and the number of records you specify. &#xD;
&lt;/p&gt;&#xD;
&#xD;
&#xD;
&#xD;
&#xD;
&lt;p class="Body"&gt;Refer to &lt;a href="javascript:LaunchHelp('Digitizers.chm::/Using_Fetch_Functions.html')"&gt;Using Fetch Functions&lt;/a&gt; for more information on using this function. &#xD;
&lt;/p&gt;&#xD;
&lt;table class="Borderless"&gt;&lt;tr&gt;&lt;td class="Icon"&gt;&lt;img src="note.gif"&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;Note&lt;/strong&gt;&amp;nbsp;&amp;nbsp;Some functionality, such as time stamping, is not supported in all digitizers. Refer to &lt;a href="javascript:LaunchHelp('Digitizers.chm::/Features_Supported_Main.html')"&gt;Features Supported by Device&lt;/a&gt;  for more information. &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xD;
&#xD;
&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
            <Method>
               <Name>fetchbinary32</Name>
               <Location>Acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Wfm, WfmInfo] = fetchbinary32(obj, ChannelList, Timeout, NumSamples, Wfm, WfmInfo)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelList = [double(ChannelList) 0];
Wfm = libpointer('int32Ptr', Wfm);
WfmInfo = libstruct('niScope_wfmInfo', WfmInfo);

status = calllib(libname, 'niScope_FetchBinary32', session, ChannelList, Timeout, NumSamples, Wfm, WfmInfo);

Wfm = double(Wfm.Value);
WfmInfo = WfmInfo;

if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt; niScope_FetchBinary32&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_FetchBinary32&#xD;
&lt;/h1&gt;&#xD;
&#xD;
&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus niScope_FetchBinary32 (ViSession vi, ViConstString channelList, ViReal64 timeout, ViInt32 numSamples, ViInt32* wfm, struct niScope_wfmInfo* wfmInfo);&lt;/p&gt;&#xD;
&#xD;
&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&#xD;
&#xD;
&lt;p class="Body"&gt;Retrieves data from a previously initiated acquisition and returns binary 32-bit waveforms. This function may return multiple waveforms depending on the number of channels, the acquisition type, and the number of records you specify. &#xD;
&lt;/p&gt;&#xD;
&#xD;
&#xD;
&#xD;
&#xD;
&lt;p class="Body"&gt;Refer to &lt;a href="javascript:LaunchHelp('Digitizers.chm::/Using_Fetch_Functions.html')"&gt;Using Fetch Functions&lt;/a&gt; for more information on using this function. &#xD;
&lt;/p&gt;&#xD;
&lt;table class="Borderless"&gt;&lt;tr&gt;&lt;td class="Icon"&gt;&lt;img src="note.gif"&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;Note&lt;/strong&gt;&amp;nbsp;&amp;nbsp;Some functionality, such as time stamping, is not supported in all digitizers. Refer to &lt;a href="javascript:LaunchHelp('Digitizers.chm::/Features_Supported_Main.html')"&gt;&#xD;
Features Supported by Device&lt;/a&gt;  for more information. &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xD;
&#xD;
&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
            <Method>
               <Name>fetchbinary8</Name>
               <Location>Acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Wfm, WfmInfo] = fetchbinary8(obj, ChannelList, Timeout, NumSamples, Wfm, WfmInfo)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelList = [double(ChannelList) 0];
Wfm = libpointer('int8Ptr', Wfm);
WfmInfo = libstruct('niScope_wfmInfo', WfmInfo);

status = calllib(libname, 'niScope_FetchBinary8', session, ChannelList, Timeout, NumSamples, Wfm, WfmInfo);

Wfm = double(Wfm.Value);
WfmInfo = WfmInfo;

if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt; niScope_FetchBinary8&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_FetchBinary8&lt;/h1&gt;&#xD;
&#xD;
&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus niScope_FetchBinary8 (ViSession vi, ViConstString channelList, ViReal64 timeout,	ViInt32 numSamples, ViInt8* wfm, struct niScope_wfmInfo* wfmInfo);&lt;/p&gt;&#xD;
&#xD;
&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&#xD;
&#xD;
&lt;p class="Body"&gt;Retrieves data from a previously initiated acquisition and returns binary 8-bit waveforms. This function may return multiple waveforms depending on the number of channels, the acquisition type, and the number of records you specify. &#xD;
&lt;/p&gt;&#xD;
&#xD;
&#xD;
&lt;p class="Body"&gt;Refer to &lt;a href="javascript:LaunchHelp('Digitizers.chm::/Using_Fetch_Functions.html')"&gt;Using Fetch Functions&lt;/a&gt; for more information on using this function. &#xD;
&lt;/p&gt;&#xD;
&lt;table class="Borderless"&gt;&lt;tr&gt;&lt;td class="Icon"&gt;&lt;img src="note.gif"&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;Note&lt;/strong&gt;&amp;nbsp;&amp;nbsp;Some functionality, such as time stamping, is not supported in all digitizers. Refer to &lt;a href="javascript:LaunchHelp('Digitizers.chm::/Features_Supported_Main.html')"&gt;&#xD;
Features Supported by Device&lt;/a&gt;  for more information. &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xD;
&#xD;
&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
            <Method>
               <Name>fetchcomplex</Name>
               <Location>Acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Wfm, WfmInfo] = fetchcomplex(obj, ChannelList, Timeout, NumSamples, Wfm, WfmInfo)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelList = [double(ChannelList) 0];
Wfm = libstruct('NIComplexNumber', Wfm);
WfmInfo = libstruct('niScope_wfmInfo', WfmInfo);

status = calllib(libname, 'niScope_FetchComplex', session, ChannelList, Timeout, NumSamples, Wfm, WfmInfo);

Wfm = Wfm;
WfmInfo = WfmInfo;

if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt;niScope_FetchComplex&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_FetchComplex&lt;/h1&gt;&#xD;
&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;   niScope_FetchComplex (&#xD;
ViSession vi,&#xD;
ViConstString channelList,&#xD;
ViReal64 timeout,&#xD;
ViInt32 numSamples,&#xD;
NIComplexNumber* wfm,&#xD;
struct niScope_wfmInfo* wfmInfo);&lt;/p&gt;&#xD;
&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&#xD;
&lt;p class="Body"&gt;&#xD;
Retrieves data that the digitizer has acquired from a previously initiated acquisition and returns a one-dimensional array of complex, scaled waveforms.&#xD;
&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
            <Method>
               <Name>fetchcomplexbinary16</Name>
               <Location>Acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Wfm, WfmInfo] = fetchcomplexbinary16(obj, ChannelList, Timeout, NumSamples, Wfm, WfmInfo)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelList = [double(ChannelList) 0];
Wfm = libstruct('NIComplexI16', Wfm);
WfmInfo = libstruct('niScope_wfmInfo', WfmInfo);

status = calllib(libname, 'niScope_FetchComplexBinary16', session, ChannelList, Timeout, NumSamples, Wfm, WfmInfo);

Wfm = Wfm;
WfmInfo = WfmInfo;

if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt;niScope_FetchComplexBinary16&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_FetchComplexBinary16&lt;/h1&gt;&#xD;
&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;  niScope_FetchComplexBinary16 (&#xD;
ViSession vi,&#xD;
ViConstString channelList,&#xD;
ViReal64 timeout,&#xD;
ViInt32 numSamples,&#xD;
NIComplexI16* wfm,&#xD;
Struct niScope_wfmInfo* wfmInfo);&lt;/p&gt;&#xD;
&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&#xD;
&lt;p class="Body"&gt;&#xD;
Retrieves data from single channels and records. Returns a one-dimensional array of complex binary 16-bit waveforms.&#xD;
&#xD;
&#xD;
&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
            <Method>
               <Name>getnormalizationcoefficients</Name>
               <Location>Acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [numberOfCoefficientSets] = getnormalizationcoefficients(obj, channelList, arraySize, coefficientInfo)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
channelList = [double(channelList) 0];
numberOfCoefficientSets = libpointer('int32Ptr', 0);

status = calllib(libname, 'niScope_GetNormalizationCoefficients', session, channelList, arraySize, coefficientInfo, numberOfCoefficientSets);

numberOfCoefficientSets = double(numberOfCoefficientSets.Value);

if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt;niScope_GetNormalizationCoefficients&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_GetNormalizationCoefficients&lt;/h1&gt;



&lt;p class="syntax"&gt;ViStatus _VI_FUNC niScope_GetNormalizationCoefficients   (ViSession vi,
                                                         ViConstString channelList,
                                                         ViInt32 bufferSize,
                                                         struct niScope_coefficientInfo coefficientInfo[],
                                                         ViInt32* numberOfCoefficientSets);


                                               &lt;/p&gt;

&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;

&lt;p class="Body"&gt;  Returns coefficients that can be used to convert binary data to normalized and calibrated data.
 &lt;/p&gt; 


&lt;p class="Body"&gt; 
&#xD;Refer to 
&lt;a href="Digitizers.chm::/scaling_and_norm_binary_data.html"&gt;
Scaling and Normalization of Binary Data&lt;/a&gt; for more information about how to use this function.&lt;/p&gt;

&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
            <Method>
               <Name>getscalingcoefficients</Name>
               <Location>Acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [numberOfCoefficientSets] = getscalingcoefficients(obj, channelList, arraySize, coefficientInfo)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
channelList = [double(channelList) 0];
numberOfCoefficientSets = libpointer('int32Ptr', 0);

status = calllib(libname, 'niScope_GetScalingCoefficients', session, channelList, arraySize, coefficientInfo, numberOfCoefficientSets);

numberOfCoefficientSets = double(numberOfCoefficientSets.Value);

if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt;niScope_GetScalingCoefficients&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_GetScalingCoefficients&lt;/h1&gt;



&lt;p class="syntax"&gt;ViStatus _VI_FUNC niScope_GetScalingCoefficients (ViSession vi, 
                                                   ViConstString channelList,
                                                   ViInt32 bufferSize,
                                                   struct niScope_coefficientInfo coefficientInfo[],
                                                   ViInt32* numberOfCoefficientSets);&lt;/p&gt;

&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;

&lt;p class="Body"&gt; Returns coefficients that can be used to scale binary data to volts.&lt;/p&gt;


&lt;p class="Body"&gt; 
&#xD;Refer to 
&lt;a href="Digitizers.chm::/scaling_and_norm_binary_data.html"&gt;
Scaling and Normalization of Binary Data&lt;/a&gt; for more information about how to use this function.&lt;/p&gt;

&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
            <Method>
               <Name>initiateacquisition</Name>
               <Location>Acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function initiateacquisition(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'niScope_InitiateAcquisition', session);


if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt;niScope_InitiateAcquisition&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_InitiateAcquisition&lt;/h1&gt;&#xD;
&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus niScope_InitiateAcquisition (ViSession vi);&lt;/p&gt;&#xD;
&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&#xD;
&lt;p class="Body"&gt;Initiates a waveform acquisition. &#xD;
&lt;/p&gt;&#xD;
&lt;p class="Body"&gt;After calling this function, the digitizer leaves the Idle state and waits for a trigger. &#xD;
The digitizer acquires a waveform for each channel you enable with  &lt;a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ConfigureVertical.html')"&gt;&lt;span class="Monospace"&gt;niScope_ConfigureVertical&lt;/span&gt;&lt;/a&gt;.&#xD;
&lt;/p&gt;&#xD;
&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
            <Method>
               <Name>read</Name>
               <Location>Acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Wfm, WfmInfo] = read(obj, ChannelList, Timeout, NumSamples, Wfm, WfmInfo)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelList = [double(ChannelList) 0];
Wfm = libpointer('doublePtr', Wfm);
WfmInfo = libstruct('niScope_wfmInfo', WfmInfo);

status = calllib(libname, 'niScope_Read', session, ChannelList, Timeout, NumSamples, Wfm, WfmInfo);

Wfm = double(Wfm.Value);
WfmInfo = WfmInfo;

if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt; niScope_Read&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_Read&lt;/h1&gt;&#xD;
&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus niScope_Read (ViSession vi, ViConstString channelList, ViReal64 timeout, ViInt32 numSamples, ViReal64* wfm, struct niScope_wfmInfo* wfmInfo);&lt;/p&gt;&#xD;
&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&#xD;
&lt;p class="Body"&gt;Initiates an acquisition, waits for it to complete, and retrieves the data. The process  is similar to calling &lt;a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_InitiateAcquisition.html')"&gt;&lt;span class="Monospace"&gt;niScope_InitiateAcquisition&lt;/span&gt;&lt;/a&gt;, &#xD;
&lt;a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_AcquisitionStatus.html')"&gt;&lt;span class="Monospace"&gt;niScope_AcquisitionStatus&lt;/span&gt;&lt;/a&gt;, and &#xD;
&lt;a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_Fetch.html')"&gt;&lt;span class="Monospace"&gt;niScope_Fetch&lt;/span&gt;&lt;/a&gt;. The only difference is that with &lt;span class="Monospace"&gt;niScope_Read&lt;/span&gt;, you enable all channels specified with &lt;strong&gt;channelList&lt;/strong&gt; before the acquisition; in the other method, you enable the channels with &lt;a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ConfigureVertical.html')"&gt;&lt;span class="Monospace"&gt;niScope_ConfigureVertical&lt;/span&gt;&lt;/a&gt;.&#xD;
&lt;/p&gt;&#xD;
&lt;p class="Body"&gt;This function may return multiple waveforms depending on the number of channels, the acquisition type, and the number of records you specify. &#xD;
&lt;/p&gt;&#xD;
&lt;table class="Borderless"&gt;&lt;tr&gt;&lt;td class="Icon"&gt;&lt;img src="note.gif"&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;Note&lt;/strong&gt;&amp;nbsp;&amp;nbsp;Some functionality is not supported in all digitizers. Refer to &lt;a href="javascript:LaunchHelp('Digitizers.chm::/Features_Supported_Main.html')"&gt;&#xD;
Features Supported by Device&lt;/a&gt;  for more information. &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xD;
&#xD;
&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>AcquisitionAdvanced</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="AcquisitionAdvanced1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Maximum_Bandwidth</Name>
               <Location>AcquisitionAdvanced</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150321);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150321 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"This property specifies the maximum bandwidth that the device is allowed to consume.
    "</Description>
            </Property>
            <Property>
               <Name>Preferred_Packet_Size</Name>
               <Location>AcquisitionAdvanced</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150322);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150322 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"This property specifies the size of (read request|memory write) data payload. Due to alignment of the data buffers, the hardware may not always generate a packet of this size.
    "</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>Calibration</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Calibration1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>calselfcalibrate</Name>
               <Location>Calibration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function calselfcalibrate(obj, ChannelList, Option)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelList = [double(ChannelList) 0];

status = calllib(libname, 'niScope_CalSelfCalibrate', session, ChannelList, Option);


if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt;niScope_CalSelfCalibrate&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_CalSelfCalibrate&lt;/h1&gt;&#xD;
&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus niScope_CalSelfCalibrate (ViSession sessionHandle, ViConstString channelList, ViInt32 option);&lt;/p&gt;&#xD;
&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&#xD;
&lt;p class="Body"&gt;Self-calibrates most NI digitizers, including all SMC-based devices and most Traditional NI-DAQ (Legacy) devices.&#xD;
To verify that your digitizer supports self-calibration, &#xD;
refer to  &lt;a href="javascript:LaunchHelp('Digitizers.chm::/Features_Supported_Main.html')"&gt;Features Supported by Device&lt;/a&gt;. &#xD;
&lt;/p&gt;&#xD;
&#xD;
&lt;p class="Body"&gt;For SMC-based digitizers,  if the self-calibration is performed successfully in a regular session, the &#xD;
calibration constants are &#xD;
immediately stored in the self-calibration area of the EEPROM. If the self-calibration is performed in an external &#xD;
calibration session, the &#xD;
calibration constants take effect immediately for the duration of the session. However, they are not stored in &#xD;
the EEPROM until &lt;a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_CalEnd.html')"&gt;&lt;span class="Monospace"&gt;niScope_CalEnd&lt;/span&gt;&lt;/a&gt; is called with &lt;strong&gt;action&lt;/strong&gt; set to &#xD;
&lt;span class="Monospace"&gt;NISCOPE_VAL_ACTION_STORE&lt;/span&gt; and no errors occur.&lt;/p&gt;&#xD;
&#xD;
&#xD;
&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>Clocking</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Clocking1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Exported_Sample_Clock_Output_Terminal</Name>
               <Location>Clocking</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1150091, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevistring',RepCapIdentifier, 1150091 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="NISCOPE_VAL_NO_SOURCE" Value="VAL_NO_SOURCE"/>
                     <Enum Name="NISCOPE_VAL_RTSI_6" Value="VAL_RTSI_6"/>
                     <Enum Name="NISCOPE_VAL_PFI_1" Value="VAL_PFI_1"/>
                     <Enum Name="NISCOPE_VAL_RTSI_5" Value="VAL_RTSI_5"/>
                     <Enum Name="NISCOPE_VAL_PFI_0" Value="VAL_PFI_0"/>
                     <Enum Name="NISCOPE_VAL_RTSI_4" Value="VAL_RTSI_4"/>
                     <Enum Name="NISCOPE_VAL_RTSI_3" Value="VAL_RTSI_3"/>
                     <Enum Name="NISCOPE_VAL_RTSI_2" Value="VAL_RTSI_2"/>
                     <Enum Name="NISCOPE_VAL_RTSI_1" Value="VAL_RTSI_1"/>
                     <Enum Name="NISCOPE_VAL_RTSI_0" Value="VAL_RTSI_0"/>
                     <Enum Name="NISCOPE_VAL_CLK_OUT" Value="VAL_CLK_OUT"/>
                     <Enum Name="NISCOPE_VAL_PXI_STAR" Value="VAL_PXI_STAR"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Exports the sample clock to a specified terminal.      "</Description>
            </Property>
            <Property>
               <Name>Input_Clock_Source</Name>
               <Location>Clocking</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1150002, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevistring',RepCapIdentifier, 1150002 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="NISCOPE_VAL_PFI_2" Value="VAL_PFI_2"/>
                     <Enum Name="NISCOPE_VAL_PFI_1" Value="VAL_PFI_1"/>
                     <Enum Name="NISCOPE_VAL_EXTERNAL" Value="VAL_EXTERNAL"/>
                     <Enum Name="NISCOPE_VAL_PFI_0" Value="VAL_PFI_0"/>
                     <Enum Name="NISCOPE_VAL_NO_SOURCE" Value="VAL_NO_SOURCE"/>
                     <Enum Name="NISCOPE_VAL_RTSI_CLOCK" Value="VAL_RTSI_CLOCK"/>
                     <Enum Name="NISCOPE_VAL_CLK_IN" Value="VAL_CLK_IN"/>
                     <Enum Name="NISCOPE_VAL_PXI_CLOCK" Value="VAL_PXI_CLOCK"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the input source for the PLL reference clock (the 1 MHz to 20 MHz clock on the NI 5122, the 10 MHz clock for the NI 5112/5620/5621/5911) to which the digitizer will be phase-locked; for the NI 5102, this is the source of the board clock.
    "</Description>
            </Property>
            <Property>
               <Name>Output_Clock_Source</Name>
               <Location>Clocking</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1150003, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevistring',RepCapIdentifier, 1150003 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="NISCOPE_VAL_PFI_2" Value="VAL_PFI_2"/>
                     <Enum Name="NISCOPE_VAL_PFI_1" Value="VAL_PFI_1"/>
                     <Enum Name="NISCOPE_VAL_CLK_OUT" Value="VAL_CLK_OUT"/>
                     <Enum Name="NISCOPE_VAL_PFI_0" Value="VAL_PFI_0"/>
                     <Enum Name="NISCOPE_VAL_NO_SOURCE" Value="VAL_NO_SOURCE"/>
                     <Enum Name="NISCOPE_VAL_RTSI_CLOCK" Value="VAL_RTSI_CLOCK"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the output source for the 10 MHz clock to which another digitizer's sample clock can be phased-locked.
    "</Description>
            </Property>
            <Property>
               <Name>PLL_Locked</Name>
               <Location>Clocking</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1151303);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1151303, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"If TRUE, the PLL has remained locked to the external reference clock since it was last checked. If FALSE, the PLL has become unlocked from the external reference clock since it was last checked.
    "</Description>
            </Property>
            <Property>
               <Name>Reference_Clock_Rate</Name>
               <Location>Clocking</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150090);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150090 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"If NISCOPE_ATTR_INPUT_CLOCK_SOURCE is an external source, this attribute specifies the frequency of the input, or reference clock, to which the internal sample clock timebase is synchronized. The frequency is in hertz.
    "</Description>
            </Property>
            <Property>
               <Name>Sample_Clock_Timebase_Divisor</Name>
               <Location>Clocking</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150089);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150089 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"If NISCOPE_ATTR_SAMP_CLK_TIMEBASE_SRC is an external source, specifies the ratio between the sample clock timebase rate and the actual sample rate, which can be slower.
    "</Description>
            </Property>
            <Property>
               <Name>Sample_Clock_Timebase_Rate</Name>
               <Location>Clocking</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150088);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150088 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"If NISCOPE_ATTR_SAMP_CLK_TIMEBASE_SRC is an external source, specifies the frequency in hertz of the external clock used as the timebase source.
    "</Description>
            </Property>
            <Property>
               <Name>Sample_Clock_Timebase_Source</Name>
               <Location>Clocking</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1150087, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevistring',RepCapIdentifier, 1150087 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="NISCOPE_VAL_PXI_STAR" Value="VAL_PXI_STAR"/>
                     <Enum Name="NISCOPE_VAL_PFI_1" Value="VAL_PFI_1"/>
                     <Enum Name="NISCOPE_VAL_PFI_0" Value="VAL_PFI_0"/>
                     <Enum Name="NISCOPE_VAL_NO_SOURCE" Value="VAL_NO_SOURCE"/>
                     <Enum Name="NISCOPE_VAL_CLK_IN" Value="VAL_CLK_IN"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the source of the sample clock timebase, which is the timebase used to control waveform sampling. The actual sample rate may be the timebase itself or a divided version of the timebase, depending on the NISCOPE_ATTR_MIN_SAMPLE_RATE (for internal sources) or the NISCOPE_ATTR_SAMP_CLK_TIMEBASE_DIV (for external sources).
    "</Description>
            </Property>
            <Property>
               <Name>Sync_Pulse_Source</Name>
               <Location>Clocking</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1150007, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevistring',RepCapIdentifier, 1150007 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="NISCOPE_VAL_NO_SOURCE" Value="VAL_NO_SOURCE"/>
                     <Enum Name="NISCOPE_VAL_PFI_2" Value="VAL_PFI_2"/>
                     <Enum Name="NISCOPE_VAL_RTSI_6" Value="VAL_RTSI_6"/>
                     <Enum Name="NISCOPE_VAL_PFI_1" Value="VAL_PFI_1"/>
                     <Enum Name="NISCOPE_VAL_RTSI_5" Value="VAL_RTSI_5"/>
                     <Enum Name="NISCOPE_VAL_RTSI_4" Value="VAL_RTSI_4"/>
                     <Enum Name="NISCOPE_VAL_RTSI_3" Value="VAL_RTSI_3"/>
                     <Enum Name="NISCOPE_VAL_RTSI_2" Value="VAL_RTSI_2"/>
                     <Enum Name="NISCOPE_VAL_RTSI_1" Value="VAL_RTSI_1"/>
                     <Enum Name="NISCOPE_VAL_RTSI_0" Value="VAL_RTSI_0"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"For the NI 5102, specifies the line on which the sample clock is sent or received. For the NI 5112/5620/5621/5911, specifies the line on which the one-time sync pulse is sent or received. This line should be the same for all devices to be synchronized.
    "</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>ClockingAdvanced</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ClockingAdvanced1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Oscillator_Phase_DAC_Value</Name>
               <Location>ClockingAdvanced</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150105);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150105 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Gets or sets the binary phase DAC value that controls the delay added to the Phase Locked Loop (PLL) of the sample clock. Note-if this value is set, sample clock adjust and TClk will not be able to do any sub-sample adjustment of the timebase sample clock.
    "</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>Configuration</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Configuration1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>autosetup</Name>
               <Location>Configuration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function autosetup(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'niScope_AutoSetup', session);


if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt;niScope_AutoSetup&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_AutoSetup&lt;/h1&gt;&#xD;
&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus niScope_AutoSetup (ViSession vi);&lt;/p&gt;&#xD;
&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&#xD;
&lt;p class="Body"&gt;Automatically configures the instrument.&#xD;
 When you call this function, the digitizer senses the input signal and automatically &#xD;
configures many of the instrument settings. If a signal is detected on a channel, the driver chooses the smallest available vertical range that is larger than the signal range. For example, if the signal is  a 1.2&amp;nbsp;V&lt;sub&gt;pk-pk&lt;/sub&gt;&#xD;
sine wave, and the device supports 1&amp;nbsp;V and 2&amp;nbsp;V vertical ranges, the driver will choose the 2&amp;nbsp;V&#xD;
 vertical range for that channel.&lt;/p&gt;&#xD;
 &#xD;
 &lt;p class ="body"&gt;&#xD;
 If no signal is found on any analog input channel, a warning is returned, and all channels are enabled. A channel is considered to have a signal present if the signal is at least 10% of the smallest vertical range available for that channel.&#xD;
&lt;/p&gt;&#xD;
&lt;p class="Body"&gt;The following settings are changed:&#xD;
&lt;/p&gt;&#xD;
&lt;table class="Borderless"&gt;&#xD;
&lt;tr&gt;&lt;td colspan="2"&gt;&lt;strong&gt;General&lt;/strong&gt;&lt;/td&gt;&lt;/tr&gt;&#xD;
&lt;tr&gt;&lt;td&gt;Acquisition mode&lt;/td&gt;&lt;td&gt;Normal&lt;/td&gt;&lt;/tr&gt;&#xD;
&lt;tr&gt;&lt;td&gt;Reference clock&lt;/td&gt;&lt;td&gt;Internal&lt;/td&gt;&lt;/tr&gt;&#xD;
&lt;tr&gt;&lt;td colspan="2"&gt;&lt;strong&gt;Vertical&lt;/strong&gt;&#xD;
&lt;/td&gt;&lt;/tr&gt;&#xD;
&lt;tr&gt;&lt;td&gt;Vertical coupling&lt;/td&gt;&lt;td&gt;AC (DC for NI&amp;nbsp;5621)&lt;/td&gt;&lt;/tr&gt;&#xD;
&lt;tr&gt;&lt;td&gt;Vertical bandwidth&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/td&gt;&lt;td&gt;Full&lt;/td&gt;&lt;/tr&gt;&#xD;
&lt;tr&gt;&lt;td&gt;Vertical range&lt;/td&gt;&lt;td&gt;Changed by auto setup&lt;/td&gt;&lt;/tr&gt;&#xD;
&lt;tr&gt;&lt;td&gt;Vertical offset&lt;/td&gt;&lt;td&gt;0 V&lt;/td&gt;&lt;/tr&gt;&#xD;
&lt;tr&gt;&lt;td&gt;Probe attenuation&lt;/td&gt;&lt;td&gt;Unchanged by auto setup&lt;/td&gt;&lt;/tr&gt;&#xD;
&lt;tr&gt;&lt;td&gt;Input impedance&lt;/td&gt;&lt;td&gt;Unchanged by auto setup&lt;/td&gt;&lt;/tr&gt;&#xD;
&lt;tr&gt;&lt;td colspan="2"&gt;&lt;strong&gt;Horizontal&lt;/strong&gt;&#xD;
&lt;/td&gt;&lt;/tr&gt;&#xD;
&lt;tr&gt;&lt;td&gt;Sample rate&lt;/td&gt;&lt;td&gt;Changed by auto setup&lt;/td&gt;&lt;/tr&gt;&#xD;
&lt;tr&gt;&lt;td&gt;Min record length&lt;/td&gt;&lt;td&gt;Changed by auto setup&lt;/td&gt;&lt;/tr&gt;&#xD;
&lt;tr&gt;&lt;td&gt;Enforce realtime&lt;/td&gt;&lt;td&gt;True&lt;/td&gt;&lt;/tr&gt;&#xD;
&lt;tr&gt;&lt;td&gt;Number of Records&lt;/td&gt;&lt;td&gt;Changed to 1&lt;/td&gt;&lt;/tr&gt;&#xD;
&lt;tr&gt;&lt;td colspan="2"&gt;&lt;strong&gt;Triggering&lt;/strong&gt;&#xD;
&lt;/td&gt;&lt;/tr&gt;&#xD;
&lt;tr&gt;&lt;td&gt;Trigger type&lt;/td&gt;&lt;td&gt;Edge if signal present, otherwise immediate&lt;/td&gt;&lt;/tr&gt;&#xD;
&lt;tr&gt;&lt;td&gt;Trigger channel&lt;/td&gt;&lt;td&gt;Lowest numbered channel with a signal present&lt;/td&gt;&lt;/tr&gt;&#xD;
&lt;tr&gt;&lt;td&gt;Trigger slope&lt;/td&gt;&lt;td&gt;Positive&lt;/td&gt;&lt;/tr&gt;&#xD;
&lt;tr&gt;&lt;td&gt;Trigger coupling&lt;/td&gt;&lt;td&gt;DC&lt;/td&gt;&lt;/tr&gt;&#xD;
&lt;tr&gt;&lt;td&gt;Reference position&lt;/td&gt;&lt;td&gt;50%&lt;/td&gt;&lt;/tr&gt;&#xD;
&lt;tr&gt;&lt;td&gt;Trigger level&lt;/td&gt;&lt;td&gt;50% of signal on trigger channel&lt;/td&gt;&lt;/tr&gt;&#xD;
&lt;tr&gt;&lt;td&gt;Trigger delay&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;/tr&gt;&#xD;
&lt;tr&gt;&lt;td&gt;Trigger holdoff&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;/tr&gt;&#xD;
&lt;tr&gt;&lt;td&gt;Trigger output&lt;/td&gt;&lt;td&gt;None&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xD;
&#xD;
&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
            <Method>
               <Name>configureacquisition</Name>
               <Location>Configuration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configureacquisition(obj, AcquisitionType)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'niScope_ConfigureAcquisition', session, AcquisitionType);


if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt;niScope_ConfigureAcquisition&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_ConfigureAcquisition&#xD;
&lt;/h1&gt;&#xD;
&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus niScope_ConfigureAcquisition(ViSession vi, ViInt32 acquisitionType);&lt;/p&gt;&#xD;
&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&#xD;
&lt;p class="Body"&gt;Configures how the digitizer acquires data and fills the waveform record.&lt;/p&gt;&#xD;
&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>ConfigurationFunctionsActualValues</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ConfigurationFunctionsActualValues1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>actualmeaswfmsize</Name>
               <Location>ConfigurationFunctionsActualValues</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [MeasWaveformSize] = actualmeaswfmsize(obj, ArrayMeasFunction)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
MeasWaveformSize = libpointer('int32Ptr', 0);

status = calllib(libname, 'niScope_ActualMeasWfmSize', session, ArrayMeasFunction, MeasWaveformSize);

MeasWaveformSize = double(MeasWaveformSize.Value);

if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt; niScope_ActualMeasWfmSize&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_ActualMeasWfmSize&#xD;
&lt;/h1&gt;&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus niScope_ActualMeasWfmSize(ViSession vi, ViInt32 arrayMeasFunction, ViInt32* measWfmSize);&lt;/p&gt;&#xD;
&#xD;
&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&#xD;
&#xD;
&lt;p class="Body"&gt;Returns the total available size of an array measurement acquisition. &#xD;
&lt;/p&gt;&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
            <Method>
               <Name>actualnumwfms</Name>
               <Location>ConfigurationFunctionsActualValues</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [NumWfms] = actualnumwfms(obj, ChannelList)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelList = [double(ChannelList) 0];
NumWfms = libpointer('int32Ptr', 0);

status = calllib(libname, 'niScope_ActualNumWfms', session, ChannelList, NumWfms);

NumWfms = double(NumWfms.Value);

if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt; niScope_ActualNumWfms&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_ActualNumWfms&lt;/h1&gt;&#xD;
&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus niScope_ActualNumWfms (ViSession vi, ViConstString channelList, ViInt32* numWfms);&lt;/p&gt;&#xD;
&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&#xD;
&lt;p class="Body"&gt;Helps you to declare appropriately sized waveforms. NI-SCOPE handles the channel list parsing for you. &#xD;
&lt;/p&gt;&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
            <Method>
               <Name>actualrecordlength</Name>
               <Location>ConfigurationFunctionsActualValues</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [RecordLength] = actualrecordlength(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
RecordLength = libpointer('int32Ptr', 0);

status = calllib(libname, 'niScope_ActualRecordLength', session, RecordLength);

RecordLength = double(RecordLength.Value);

if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt;niScope_ActualRecordLength&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_ActualRecordLength&#xD;
&lt;/h1&gt;&#xD;
&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus niScope_ActualRecordLength (ViSession vi, ViInt32* recordLength);&lt;/p&gt;&#xD;
&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&#xD;
&lt;p class="Body"&gt;Returns the actual number of points the digitizer acquires for each channel. After configuring the digitizer for an acquisition, call this function to determine the size of the waveforms that the digitizer acquires. The value is equal to or greater than the minimum number of points specified in any of the Configure Horizontal functions.&lt;/p&gt;&#xD;
&#xD;
&#xD;
&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
            <Method>
               <Name>samplemode</Name>
               <Location>ConfigurationFunctionsActualValues</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [SampleMode] = samplemode(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
SampleMode = libpointer('int32Ptr', 0);

status = calllib(libname, 'niScope_SampleMode', session, SampleMode);

SampleMode = double(SampleMode.Value);

if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt;niScope_SampleMode&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_SampleMode&#xD;
&lt;/h1&gt;&#xD;
&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus niScope_SampleMode (ViSession vi, ViInt32* sampleMode);&lt;/p&gt;&#xD;
&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&#xD;
&lt;p class="Body"&gt;Returns the sample mode the digitizer is currently using. &#xD;
&lt;/p&gt;&#xD;
&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
            <Method>
               <Name>samplerate</Name>
               <Location>ConfigurationFunctionsActualValues</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [SampleRate] = samplerate(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
SampleRate = libpointer('doublePtr', 0);

status = calllib(libname, 'niScope_SampleRate', session, SampleRate);

SampleRate = double(SampleRate.Value);

if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt;niScope_SampleRate&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_SampleRate&lt;/h1&gt;&#xD;
&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus niScope_SampleRate (ViSession vi, ViReal64* actualSampleRate);&lt;/p&gt;&#xD;
&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&#xD;
&lt;p class="Body"&gt;Returns the effective sample rate, in samples per second, of the acquired waveform using the current configuration. &#xD;
Refer to &lt;a href="javascript:LaunchHelp('Digitizers.chm::/Horizontal_Parameters.html')"&gt;Coercions of Horizontal Parameters&lt;/a&gt; for more information about sample rate coercion.&lt;/p&gt;&#xD;
&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>ConfigurationFunctionsHorizontal</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ConfigurationFunctionsHorizontal1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>configurehorizontaltiming</Name>
               <Location>ConfigurationFunctionsHorizontal</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurehorizontaltiming(obj, MinSampleRate, MinNumPts, RefPosition, NumRecords, EnforceRealtime)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'niScope_ConfigureHorizontalTiming', session, MinSampleRate, MinNumPts, RefPosition, NumRecords, EnforceRealtime);


if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt; niScope_ConfigureHorizontalTiming&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_ConfigureHorizontalTiming&lt;/h1&gt;&#xD;
&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus niScope_ConfigureHorizontalTiming (ViSession vi, ViReal64 minSampleRate, ViInt32 minNumPts, ViReal64 refPosition, ViInt32 numRecords, ViBoolean enforceRealtime);&lt;/p&gt;&#xD;
&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&#xD;
&lt;p class="Body"&gt;Configures the common properties of the horizontal subsystem for a multirecord acquisition in terms of minimum sample rate.&#xD;
&lt;/p&gt;&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>ConfigurationFunctionsOnboardSignalProcessing</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ConfigurationFunctionsOnboardSignalProcessing1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>configureequalizationfiltercoefficients</Name>
               <Location>ConfigurationFunctionsOnboardSignalProcessing</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configureequalizationfiltercoefficients(obj, ChannelList, NumberOfCoefficients, Coefficients)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelList = [double(ChannelList) 0];

status = calllib(libname, 'niScope_ConfigureEqualizationFilterCoefficients', session, ChannelList, NumberOfCoefficients, Coefficients);


if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt;niScope_ConfigureEqualizationFilterCoefficients&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_ConfigureEqualizationFilterCoefficients&#xD;
&lt;/h1&gt;&#xD;
&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus _VI_FUNC niScope_ConfigureEqualizationFilterCoefficients (ViSession vi,&#xD;
                                                                   ViConstString channel,&#xD;
                                                                   ViInt32 numberOfCoefficients,&#xD;
                                                                   ViReal64*  coefficients);&#xD;
&lt;/p&gt;&#xD;
&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&#xD;
&lt;p class="Body"&gt;Configures the custom coefficients for the equalization FIR filter on the device. &#xD;
This filter is designed to compensate the input signal for artifacts introduced to the signal outside&#xD;
 of the digitizer. Because this filter is a generic FIR filter, any coefficients are valid. &#xD;
 Coefficient values should be between +1 and &amp;#8211;1.&lt;/p&gt;&#xD;
&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
            <Method>
               <Name>getfrequencyresponse</Name>
               <Location>ConfigurationFunctionsOnboardSignalProcessing</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [numberOfFrequencies] = getfrequencyresponse(obj, channel, bufferSize, frequencies, amplitudes, phases)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
channel = [double(channel) 0];
numberOfFrequencies = libpointer('int32Ptr', 0);

status = calllib(libname, 'niScope_GetFrequencyResponse', session, channel, bufferSize, frequencies, amplitudes, phases, numberOfFrequencies);

numberOfFrequencies = double(numberOfFrequencies.Value);

if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt;niScope_GetFrequencyResponse&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_GetFrequencyResponse&lt;/h1&gt;



&lt;p class="syntax"&gt;ViStatus _VI_FUNC niScope_GetFrequencyResponse (ViSession vi,
                                                ViConstString channelName,
                                                ViInt32 bufferSize,
                                                ViReal64 frequencies[],
                                                ViReal64 amplitudes[],
                                                ViReal64 phases[],
                                                ViInt32* numberOfFrequencies);&lt;/p&gt;

&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;

&lt;p class="Body"&gt;Gets the frequency response of the digitizer for the current configurations of the channel attributes. Not  all digitizers support this function.
 &lt;/p&gt; 
&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>ConfigurationFunctionsSetGetCheckAttributeCheckAttribute</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ConfigurationFunctionsSetGetCheckAttributeCheckAttribute1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>checkattributeviboolean</Name>
               <Location>ConfigurationFunctionsSetGetCheckAttributeCheckAttribute</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function checkattributeviboolean(obj, ChannelList, AttributeID, Value)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelList = [double(ChannelList) 0];

status = calllib(libname, 'niScope_CheckAttributeViBoolean', session, ChannelList, AttributeID, Value);


if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt;niScope_CheckAttributeViBoolean&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_CheckAttributeViBoolean&#xD;
&lt;/h1&gt;&#xD;
&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus niScope_CheckAttributeViBoolean (ViSession vi, ViConstString channelList, ViAttr attributeID, ViBoolean value);&lt;/p&gt;&#xD;
&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&#xD;
&lt;p class="Body"&gt;Verifies the validity of a value you specify for a ViBoolean attribute.&#xD;
&lt;/p&gt;&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
            <Method>
               <Name>checkattributeviint32</Name>
               <Location>ConfigurationFunctionsSetGetCheckAttributeCheckAttribute</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function checkattributeviint32(obj, ChannelList, AttributeID, Value)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelList = [double(ChannelList) 0];

status = calllib(libname, 'niScope_CheckAttributeViInt32', session, ChannelList, AttributeID, Value);


if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt;niScope_CheckAttributeViInt32&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_CheckAttributeViInt32&#xD;
&lt;/h1&gt;&#xD;
&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus niScope_CheckAttributeViInt32 (ViSession vi, ViConstString channelList, ViAttr attributeID, ViInt32 value);&lt;/p&gt;&#xD;
&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&#xD;
&lt;p class="Body"&gt;Verifies the validity of a value you specify for a ViInt32 attribute.&#xD;
&lt;/p&gt;&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
            <Method>
               <Name>checkattributeviint64</Name>
               <Location>ConfigurationFunctionsSetGetCheckAttributeCheckAttribute</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function checkattributeviint64(obj, ChannelList, AttributeID, Value)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelList = [double(ChannelList) 0];

status = calllib(libname, 'niScope_CheckAttributeViInt64', session, ChannelList, AttributeID, Value);


if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt;niScope_CheckAttributeViInt32&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_CheckAttributeViInt32&#xD;
&lt;/h1&gt;&#xD;
&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus niScope_CheckAttributeViInt32 (ViSession vi, ViConstString channelList, ViAttr attributeID, ViInt32 value);&lt;/p&gt;&#xD;
&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&#xD;
&lt;p class="Body"&gt;Verifies the validity of a value you specify for a ViInt32 attribute.&#xD;
&lt;/p&gt;&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
            <Method>
               <Name>checkattributevireal64</Name>
               <Location>ConfigurationFunctionsSetGetCheckAttributeCheckAttribute</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function checkattributevireal64(obj, ChannelList, AttributeID, Value)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelList = [double(ChannelList) 0];

status = calllib(libname, 'niScope_CheckAttributeViReal64', session, ChannelList, AttributeID, Value);


if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt;niScope_CheckAttributeViReal64&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_CheckAttributeViReal64&lt;/h1&gt;&#xD;
&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus niScope_CheckAttributeViReal64 (ViSession vi, ViConstString channelList, ViAttr attributeID, ViReal64 value);&lt;/p&gt;&#xD;
&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&#xD;
&lt;p class="Body"&gt;Verifies the validity of a value you specify for a ViReal64 attribute.&#xD;
&lt;/p&gt;&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
            <Method>
               <Name>checkattributevisession</Name>
               <Location>ConfigurationFunctionsSetGetCheckAttributeCheckAttribute</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function checkattributevisession(obj, ChannelList, AttributeID, Value)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelList = [double(ChannelList) 0];

status = calllib(libname, 'niScope_CheckAttributeViSession', session, ChannelList, AttributeID, Value);


if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt; niScope_CheckAttributeViSession&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_CheckAttributeViSession&lt;/h1&gt;&#xD;
&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus niScope_CheckAttributeViSession (ViSession vi, ViConstString channelList, ViAttr attributeID, ViSession value);&lt;/p&gt;&#xD;
&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&#xD;
&lt;p class="Body"&gt;Verifies the validity of a value you specify for a  ViSession  attribute.&lt;/p&gt;&#xD;
&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
            <Method>
               <Name>checkattributevistring</Name>
               <Location>ConfigurationFunctionsSetGetCheckAttributeCheckAttribute</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function checkattributevistring(obj, ChannelList, AttributeID, Value)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelList = [double(ChannelList) 0];
Value = [double(Value) 0];

status = calllib(libname, 'niScope_CheckAttributeViString', session, ChannelList, AttributeID, Value);


if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt;niScope_CheckAttributeViString&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_CheckAttributeViString&#xD;
&lt;/h1&gt;&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus niScope_CheckAttributeViString (ViSession vi, ViConstString channelList, ViAttr attributeID, ViConstString value);&lt;/p&gt;&#xD;
&#xD;
&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&#xD;
&#xD;
&lt;p class="Body"&gt;Verifies the validity of a value you specify for a ViString attribute.&#xD;
&lt;/p&gt;&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>ConfigurationFunctionsSetGetCheckAttributeGetAttribute</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ConfigurationFunctionsSetGetCheckAttributeGetAttribute1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>getattributeviboolean</Name>
               <Location>ConfigurationFunctionsSetGetCheckAttributeGetAttribute</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Value] = getattributeviboolean(obj, ChannelList, AttributeID)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelList = [double(ChannelList) 0];
Value = libpointer('uint16Ptr', 0);

status = calllib(libname, 'niScope_GetAttributeViBoolean', session, ChannelList, AttributeID, Value);

Value = double(Value.Value);

if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt;niScope_GetAttributeViBoolean&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_GetAttributeViBoolean&#xD;
&lt;/h1&gt;&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;&#xD;
ViStatus niScope_GetAttributeViBoolean (ViSession vi, ViConstString channelList, ViAttr attributeID, ViBoolean* value);&lt;/p&gt;&#xD;
&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&lt;p class="Body"&gt;Queries the value of a ViBoolean attribute. You can use this function to get the values of instrument-specific attributes and inherent IVI  attributes. If the attribute represents an instrument state, this function performs instrument I/O in the following cases:&#xD;
&lt;/p&gt;&#xD;
&lt;ul&gt;&#xD;
&#xD;
&lt;li&gt;State caching is disabled for the entire session or for the particular attribute. &#xD;
&lt;/li&gt;&#xD;
&lt;li&gt;State caching is enabled and the currently cached value is invalid. &#xD;
&lt;/li&gt;&#xD;
&lt;/ul&gt;&#xD;
&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
            <Method>
               <Name>getattributeviint32</Name>
               <Location>ConfigurationFunctionsSetGetCheckAttributeGetAttribute</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Value] = getattributeviint32(obj, ChannelList, AttributeID)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelList = [double(ChannelList) 0];
Value = libpointer('int32Ptr', 0);

status = calllib(libname, 'niScope_GetAttributeViInt32', session, ChannelList, AttributeID, Value);

Value = double(Value.Value);

if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt;niScope_GetAttributeViInt32&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_GetAttributeViInt32&lt;/h1&gt;&#xD;
&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus niScope_GetAttributeViInt32 (ViSession vi, ViConstString channelList, ViAttr attributeID, ViInt32* value);&lt;/p&gt;&#xD;
&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&#xD;
&lt;p class="Body"&gt;Queries the value of a ViInt32 attribute. You can use this function to&#xD;
 get the values of instrument-specific attributes and inherent IVI  attributes. If the attribute represents an &#xD;
 instrument state, this function performs instrument I/O in the following cases: &#xD;
&lt;/p&gt;&#xD;
&lt;ul&gt;&#xD;
&#xD;
&lt;li&gt;State caching is disabled for the entire session or for the particular attribute.&#xD;
&lt;/li&gt;&#xD;
&lt;li&gt;State caching is enabled and the currently cached value is invalid. &#xD;
&lt;/li&gt;&#xD;
&lt;/ul&gt;&#xD;
&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
            <Method>
               <Name>getattributeviint64</Name>
               <Location>ConfigurationFunctionsSetGetCheckAttributeGetAttribute</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Value] = getattributeviint64(obj, ChannelList, AttributeID)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelList = [double(ChannelList) 0];
Value = libpointer('int64Ptr', 0);

status = calllib(libname, 'niScope_GetAttributeViInt64', session, ChannelList, AttributeID, Value);

Value = double(Value.Value);

if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt;niScope_GetAttributeViInt32&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_GetAttributeViInt32&lt;/h1&gt;&#xD;
&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus niScope_GetAttributeViInt32 (ViSession vi, ViConstString channelList, ViAttr attributeID, ViInt32* value);&lt;/p&gt;&#xD;
&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&#xD;
&lt;p class="Body"&gt;Queries the value of a ViInt32 attribute. You can use this function to&#xD;
 get the values of instrument-specific attributes and inherent IVI  attributes. If the attribute represents an &#xD;
 instrument state, this function performs instrument I/O in the following cases: &#xD;
&lt;/p&gt;&#xD;
&lt;ul&gt;&#xD;
&#xD;
&lt;li&gt;State caching is disabled for the entire session or for the particular attribute.&#xD;
&lt;/li&gt;&#xD;
&lt;li&gt;State caching is enabled and the currently cached value is invalid. &#xD;
&lt;/li&gt;&#xD;
&lt;/ul&gt;&#xD;
&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
            <Method>
               <Name>getattributevireal64</Name>
               <Location>ConfigurationFunctionsSetGetCheckAttributeGetAttribute</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Value] = getattributevireal64(obj, ChannelList, AttributeID)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelList = [double(ChannelList) 0];
Value = libpointer('doublePtr', 0);

status = calllib(libname, 'niScope_GetAttributeViReal64', session, ChannelList, AttributeID, Value);

Value = double(Value.Value);

if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt;niScope_GetAttributeViReal64&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_GetAttributeViReal64&#xD;
&lt;/h1&gt;&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus niScope_GetAttributeViReal64 (ViSession vi, ViConstString channelList, ViAttr attributeID, ViReal64* value);&lt;/p&gt;&#xD;
&#xD;
&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&#xD;
&#xD;
&lt;p class="Body"&gt;Queries the value of a  ViReal64 attribute. You can use this function to get&#xD;
 the values of instrument-specific attributes and inherent IVI  attributes. If the attribute represents an instrument state, &#xD;
 this function performs instrument I/O in the following cases: &#xD;
&lt;/p&gt;&#xD;
&lt;ul&gt;&#xD;
&#xD;
&lt;li&gt;State caching is disabled for the entire session or for the particular attribute. &#xD;
&lt;/li&gt;&#xD;
&lt;li&gt;State caching is enabled and the currently cached value is invalid. &#xD;
&lt;/li&gt;&#xD;
&lt;/ul&gt;&#xD;
&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
            <Method>
               <Name>getattributevisession</Name>
               <Location>ConfigurationFunctionsSetGetCheckAttributeGetAttribute</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Value] = getattributevisession(obj, ChannelList, AttributeID)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelList = [double(ChannelList) 0];
Value = libpointer('uint32Ptr', 0);

status = calllib(libname, 'niScope_GetAttributeViSession', session, ChannelList, AttributeID, Value);

Value = double(Value.Value);

if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt; niScope_GetAttributeViSession&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_GetAttributeViSession&lt;/h1&gt;&#xD;
&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus niScope_GetAttributeViSession (ViSession vi, ViConstString channelList, ViAttr attributeID, ViSession* value);&lt;/p&gt;&#xD;
&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&#xD;
&lt;p class="Body"&gt;Queries the value of a  ViSession  attribute. You can use this function to get the values of instrument-specific attributes and inherent IVI  attributes. If the attribute represents an instrument state, this function performs instrument I/O in the following cases: &#xD;
&lt;/p&gt;&#xD;
&lt;ul&gt;&#xD;
&#xD;
&lt;li&gt;State caching is disabled for the entire session or for the particular attribute. &#xD;
&lt;/li&gt;&#xD;
&lt;li&gt;State caching is enabled and the currently cached value is invalid. &#xD;
&lt;/li&gt;&#xD;
&lt;/ul&gt;&#xD;
&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
            <Method>
               <Name>getattributevistring</Name>
               <Location>ConfigurationFunctionsSetGetCheckAttributeGetAttribute</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Value] = getattributevistring(obj, ChannelList, AttributeID, BufSize)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelList = [double(ChannelList) 0];
Value = libpointer('int8Ptr', repmat(10, 1, 512));

status = calllib(libname, 'niScope_GetAttributeViString', session, ChannelList, AttributeID, BufSize, Value);

Value = strtrim(char(Value.Value));

if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt;niScope_GetAttributeViString&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_GetAttributeViString&lt;/h1&gt;&#xD;
&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus niScope_GetAttributeViString (ViSession vi, ViConstString channelList, ViAttr attributeID, ViInt32 bufSize, ViChar value[]);&lt;/p&gt;&#xD;
&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&#xD;
&lt;p class="Body"&gt;Queries the value of a ViString attribute. You can use this function to get the &#xD;
values of instrument-specific attributes and inherent IVI  attributes. If the attribute represents an instrument state, this &#xD;
function performs instrument I/O in the following cases: &#xD;
&lt;/p&gt;&#xD;
&lt;ul&gt;&#xD;
&#xD;
&lt;li&gt;State caching is disabled for the entire session or for the particular attribute. &#xD;
&lt;/li&gt;&#xD;
&lt;li&gt;State caching is enabled and the currently cached value is invalid. &#xD;
&lt;/li&gt;&#xD;
&lt;/ul&gt;&#xD;
&#xD;
&lt;p class="Body"&gt;You must provide a ViChar array to serve as a buffer for the value. You pass the &#xD;
number of bytes in the buffer as the &lt;strong&gt;bufSize&lt;/strong&gt;. If the current value of the attribute, &#xD;
including the terminating NUL byte, is larger than the size you indicate in the &lt;strong&gt;bufSize&lt;/strong&gt;, &#xD;
the function copies  (&lt;strong&gt;bufSize&lt;/strong&gt; &amp;#8211; 1) bytes into the buffer, places an ASCII NUL byte at the end of &#xD;
the buffer, and returns the &lt;strong&gt;bufSize&lt;/strong&gt; you must pass to get the entire value. For example, if the value &#xD;
is 123456 and the &lt;strong&gt;bufSize&lt;/strong&gt; is 4, the &#xD;
function places 123 into the buffer and returns 7. If you want to &#xD;
call this function just to get the required buffer size, you can pass 0 for the &#xD;
&lt;strong&gt;bufSize&lt;/strong&gt; and &lt;span class="Monospace"&gt;VI_NULL&lt;/span&gt; for the &lt;strong&gt;value&lt;/strong&gt;. &#xD;
 &#xD;
&lt;/p&gt;&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>ConfigurationFunctionsSetGetCheckAttributeSetAttribute</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ConfigurationFunctionsSetGetCheckAttributeSetAttribute1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>setattributeviboolean</Name>
               <Location>ConfigurationFunctionsSetGetCheckAttributeSetAttribute</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setattributeviboolean(obj, ChannelList, AttributeID, Value)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelList = [double(ChannelList) 0];

status = calllib(libname, 'niScope_SetAttributeViBoolean', session, ChannelList, AttributeID, Value);


if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt;niScope_SetAttributeViBoolean&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_SetAttributeViBoolean&#xD;
&lt;/h1&gt;&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus niScope_SetAttributeViBoolean (ViSession vi, ViConstString channelList, ViAttr attributeID, ViBoolean value);&lt;/p&gt;&#xD;
&#xD;
&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&#xD;
&#xD;
&lt;p class="Body"&gt;Sets the value of a ViBoolean attribute. This is a low-level function that you can use to set the values of instrument-specific attributes and inherent IVI  attributes. If the attribute represents an instrument state, this function performs instrument I/O in the following cases:&#xD;
&lt;/p&gt;&#xD;
&lt;ul&gt;&#xD;
&#xD;
&lt;li&gt;State caching is disabled for the entire session or for the particular attribute. &#xD;
&lt;/li&gt;&#xD;
&lt;li&gt;State caching is enabled and the currently cached value is invalid or is different than the value you specify. &#xD;
&lt;/li&gt;&#xD;
&lt;/ul&gt;&#xD;
&#xD;
&lt;table class="Borderless"&gt;&lt;tr&gt;&lt;td class="Icon"&gt;&lt;img src="note.gif"&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;Note&lt;/strong&gt;&amp;nbsp;&amp;nbsp;NI-SCOPE contains high-level functions that set most of the instrument attributes. Use the high-level driver functions as much as possible because they handle order dependencies and multithread locking for you. In addition, the high-level functions perform status checking only after setting all of the attributes. In contrast, when you set multiple attributes using the SetAttribute functions, the functions check the instrument status after each call. Also, when state caching is enabled, the high-level functions that configure multiple attributes perform instrument I/O only for the attributes whose value you change. Thus, you can safely call the high-level functions without the penalty of redundant instrument I/O. &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xD;
&#xD;
&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
            <Method>
               <Name>setattributeviint32</Name>
               <Location>ConfigurationFunctionsSetGetCheckAttributeSetAttribute</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setattributeviint32(obj, ChannelList, AttributeID, Value)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelList = [double(ChannelList) 0];

status = calllib(libname, 'niScope_SetAttributeViInt32', session, ChannelList, AttributeID, Value);


if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt;niScope_SetAttributeViInt32&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_SetAttributeViInt32&#xD;
&lt;/h1&gt;&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus niScope_SetAttributeViInt32 (ViSession vi, ViConstString channelList, ViAttr attributeID, ViInt32 value);&lt;/p&gt;&#xD;
&#xD;
&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&#xD;
&#xD;
&lt;p class="Body"&gt;Sets the value of a ViInt32 attribute. This is a low-level function that you can use to set the values of instrument-specific attributes and inherent IVI  attributes. If the attribute represents an instrument state, this function performs instrument I/O in the following cases: &#xD;
&lt;/p&gt;&#xD;
&lt;ul&gt;&#xD;
&#xD;
&lt;li&gt;State caching is disabled for the entire session or for the particular attribute. &#xD;
&lt;/li&gt;&#xD;
&lt;li&gt;State caching is enabled and the currently cached value is invalid or is different than the value you specify. &#xD;
&lt;/li&gt;&#xD;
&lt;/ul&gt;&#xD;
&#xD;
&lt;table class="Borderless"&gt;&lt;tr&gt;&lt;td class="Icon"&gt;&lt;img src="note.gif"&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;Note&lt;/strong&gt;&amp;nbsp;&amp;nbsp;NI-SCOPE contains high-level functions that set most of the instrument attributes. Use the high-level functions as much as possible because they handle order dependencies and multithread locking for you. In addition, high-level functions perform status checking only after setting all of the attributes. In contrast, when you set multiple attributes using the Set Attribute functions, the functions check the instrument status after each call. Also, when state caching is enabled, the high-level functions that configure multiple attributes perform instrument I/O only for the attributes whose value you change. Thus, you can safely call the high-level functions without the penalty of redundant instrument I/O. &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xD;
&#xD;
&#xD;
&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
            <Method>
               <Name>setattributeviint64</Name>
               <Location>ConfigurationFunctionsSetGetCheckAttributeSetAttribute</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setattributeviint64(obj, ChannelList, AttributeID, Value)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelList = [double(ChannelList) 0];

status = calllib(libname, 'niScope_SetAttributeViInt64', session, ChannelList, AttributeID, Value);


if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt;niScope_SetAttributeViInt32&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_SetAttributeViInt32&#xD;
&lt;/h1&gt;&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus niScope_SetAttributeViInt32 (ViSession vi, ViConstString channelList, ViAttr attributeID, ViInt32 value);&lt;/p&gt;&#xD;
&#xD;
&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&#xD;
&#xD;
&lt;p class="Body"&gt;Sets the value of a ViInt32 attribute. This is a low-level function that you can use to set the values of instrument-specific attributes and inherent IVI  attributes. If the attribute represents an instrument state, this function performs instrument I/O in the following cases: &#xD;
&lt;/p&gt;&#xD;
&lt;ul&gt;&#xD;
&#xD;
&lt;li&gt;State caching is disabled for the entire session or for the particular attribute. &#xD;
&lt;/li&gt;&#xD;
&lt;li&gt;State caching is enabled and the currently cached value is invalid or is different than the value you specify. &#xD;
&lt;/li&gt;&#xD;
&lt;/ul&gt;&#xD;
&#xD;
&lt;table class="Borderless"&gt;&lt;tr&gt;&lt;td class="Icon"&gt;&lt;img src="note.gif"&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;Note&lt;/strong&gt;&amp;nbsp;&amp;nbsp;NI-SCOPE contains high-level functions that set most of the instrument attributes. Use the high-level functions as much as possible because they handle order dependencies and multithread locking for you. In addition, high-level functions perform status checking only after setting all of the attributes. In contrast, when you set multiple attributes using the Set Attribute functions, the functions check the instrument status after each call. Also, when state caching is enabled, the high-level functions that configure multiple attributes perform instrument I/O only for the attributes whose value you change. Thus, you can safely call the high-level functions without the penalty of redundant instrument I/O. &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xD;
&#xD;
&#xD;
&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
            <Method>
               <Name>setattributevireal64</Name>
               <Location>ConfigurationFunctionsSetGetCheckAttributeSetAttribute</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setattributevireal64(obj, ChannelList, AttributeID, Value)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelList = [double(ChannelList) 0];

status = calllib(libname, 'niScope_SetAttributeViReal64', session, ChannelList, AttributeID, Value);


if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt;niScope_SetAttributeViReal64&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_SetAttributeViReal64&#xD;
&lt;/h1&gt;&#xD;
&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus niScope_SetAttributeViReal64 (ViSession vi, ViConstString channelList, ViAttr attributeID, ViReal64 value);&lt;/p&gt;&#xD;
&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&#xD;
&lt;p class="Body"&gt;Sets the value of a  ViReal64 attribute. This is a low-level function that you can use to set the values of instrument-specific attributes and inherent IVI  attributes. If the attribute represents an instrument state, this function performs instrument I/O in the following cases: &#xD;
&lt;/p&gt;&#xD;
&lt;ul&gt;&#xD;
&#xD;
&lt;li&gt;State caching is disabled for the entire session or for the particular attribute. &#xD;
&lt;/li&gt;&#xD;
&lt;li&gt;State caching is enabled and the currently cached value is invalid or is different than the value you specify. &#xD;
&lt;/li&gt;&#xD;
&lt;/ul&gt;&#xD;
&#xD;
&lt;table class="Borderless"&gt;&lt;tr&gt;&lt;td class="Icon"&gt;&lt;img src="note.gif"&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;Note&lt;/strong&gt;&amp;nbsp;&amp;nbsp;NI-SCOPE contains high-level functions that set most of the instrument attributes. Use the high-level driver functions as much as possible because they handle order dependencies and multithread locking for you. In addition, the high-level functions perform status checking only after setting all of the attributes. In contrast, when you set multiple attributes using the Set Attribute functions, the functions check the instrument status after each call. Also, when state caching is enabled, the high-level functions that configure multiple attributes perform instrument I/O only for the attributes whose value you change. Thus, you can safely call the high-level functions without the penalty of redundant instrument I/O. &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xD;
&#xD;
&#xD;
&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
            <Method>
               <Name>setattributevisession</Name>
               <Location>ConfigurationFunctionsSetGetCheckAttributeSetAttribute</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setattributevisession(obj, ChannelList, AttributeID, Value)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelList = [double(ChannelList) 0];

status = calllib(libname, 'niScope_SetAttributeViSession', session, ChannelList, AttributeID, Value);


if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt; niScope_SetAttributeViSession&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_SetAttributeViSession&lt;/h1&gt;&#xD;
&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus niScope_SetAttributeViSession (ViSession vi, ViConstString channelList, ViAttr attributeID, ViSession value);&lt;/p&gt;&#xD;
&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&#xD;
&lt;p class="Body"&gt;Sets the value of a  ViSession  attribute. This is a low-level function that you can use to set the values of instrument-specific attributes and inherent IVI  attributes. If the attribute represents an instrument state, this function performs instrument I/O in the following cases: &#xD;
&lt;/p&gt;&#xD;
&lt;ul&gt;&#xD;
&#xD;
&lt;li&gt;State caching is disabled for the entire session or for the particular attribute. &#xD;
&lt;/li&gt;&#xD;
&lt;li&gt;State caching is enabled and the currently cached value is invalid or is different than the value you specify. &#xD;
&lt;/li&gt;&#xD;
&lt;/ul&gt;&#xD;
&#xD;
&lt;table class="Borderless"&gt;&lt;tr&gt;&lt;td class="Icon"&gt;&lt;img src="note.gif"&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;Note&lt;/strong&gt;&amp;nbsp;&amp;nbsp;NI-SCOPE contains high-level functions that set most of the instrument attributes. Use the high-level driver functions as much as possible because they handle order dependencies and multithread locking for you. In addition, the high-level functions perform status checking only after setting all of the attributes. In contrast, when you set multiple attributes using the Set Attribute functions, the functions check the instrument status after each call. Also, when state caching is enabled, the high-level functions that configure multiple attributes perform instrument I/O only for the attributes whose value you change. Thus, you can safely call the high-level functions without the penalty of redundant instrument I/O. &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xD;
&#xD;
&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
            <Method>
               <Name>setattributevistring</Name>
               <Location>ConfigurationFunctionsSetGetCheckAttributeSetAttribute</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setattributevistring(obj, ChannelList, AttributeID, Value)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelList = [double(ChannelList) 0];
Value = [double(Value) 0];

status = calllib(libname, 'niScope_SetAttributeViString', session, ChannelList, AttributeID, Value);


if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt;niScope_SetAttributeViString&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_SetAttributeViString&#xD;
&lt;/h1&gt;&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus niScope_SetAttributeViString (ViSession vi, ViConstString channelList, ViAttr attributeID, ViConstString value);&lt;/p&gt;&#xD;
&#xD;
&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&#xD;
&#xD;
&lt;p class="Body"&gt;Sets the value of a ViString attribute.&#xD;
&lt;/p&gt;&#xD;
&lt;p class="Body"&gt;This is a low-level function that you can use to set the values of &#xD;
instrument-specific attributes and inherent IVI  attributes. &#xD;
If the attribute represents an instrument state, this function performs instrument I/O in &#xD;
the following cases:&#xD;
&lt;/p&gt;&#xD;
&lt;ul&gt;&#xD;
&#xD;
&lt;li&gt;State caching is disabled for the entire session or for the particular attribute.&#xD;
&lt;/li&gt;&#xD;
&lt;li&gt;State caching is enabled and the currently cached value is invalid or is different than the value you specify. &#xD;
&lt;/li&gt;&#xD;
&lt;/ul&gt;&#xD;
&#xD;
&lt;table class="Borderless"&gt;&lt;tr&gt;&lt;td class="Icon"&gt;&lt;img src="note.gif"&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;Note&#xD;
&lt;/strong&gt;&amp;nbsp;&amp;nbsp;NI-SCOPE contains high-level functions that set most of the instrument &#xD;
attributes. Use the high-level driver functions as much as possible because they handle &#xD;
order dependencies and multithread locking for you. In addition, the high-level functions &#xD;
perform status checking only after setting all of the attributes. In contrast, when you set &#xD;
multiple attributes using the SetAttribute functions, the functions check the instrument &#xD;
status after each call. Also, when state caching is enabled, the high-level functions that &#xD;
configure multiple attributes perform instrument I/O only for the attributes whose value you &#xD;
change. Thus, you can safely call the high-level functions without the penalty of redundant &#xD;
instrument I/O. &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xD;
&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>ConfigurationFunctionsSynchronization</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ConfigurationFunctionsSynchronization1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>adjustsampleclockrelativedelay</Name>
               <Location>ConfigurationFunctionsSynchronization</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function adjustsampleclockrelativedelay(obj, Delay)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'niScope_AdjustSampleClockRelativeDelay', session, Delay);


if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt;niScope_AdjustSampleClockRelativeDelay&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_AdjustSampleClockRelativeDelay&lt;/h1&gt;&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus niScope_AdjustSampleClockRelativeDelay(ViSession &#xD;
vi, ViReal64 delay);&lt;/p&gt;                                               &#xD;
&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&lt;p class="Body"&gt;Configures the relative sample clock delay (in seconds) when using the internal clock.  Each time this function is called, the sample clock is delayed from the reference clock  by the specified amount of time.&lt;/p&gt;&#xD;
&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
            <Method>
               <Name>configureclock</Name>
               <Location>ConfigurationFunctionsSynchronization</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configureclock(obj, InputClockSource, OutputClockSource, ClockSyncPulseSource, MasterEnabled)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
InputClockSource = [double(InputClockSource) 0];
OutputClockSource = [double(OutputClockSource) 0];
ClockSyncPulseSource = [double(ClockSyncPulseSource) 0];

status = calllib(libname, 'niScope_ConfigureClock', session, InputClockSource, OutputClockSource, ClockSyncPulseSource, MasterEnabled);


if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt;niScope_ConfigureClock&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_ConfigureClock&lt;/h1&gt;&#xD;
&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus niScope_ConfigureClock (ViSession vi, ViConstString inputClockSource, ViConstString outputClockSource, ViConstString clockSyncPulseSource, ViBoolean masterEnabled);&lt;/p&gt;&#xD;
&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&#xD;
&lt;p class="Body"&gt;Configures the attributes for synchronizing the digitizer to a reference or sending the digitizer's reference clock output to be used as a synchronizing clock for other digitizers.&lt;/p&gt;&#xD;
&lt;table class="Borderless-Wide"&gt;&#xD;
&lt;tr&gt;&#xD;
&lt;td class="Icon"&gt;&lt;img src="note.gif"&gt;&lt;/td&gt;&#xD;
&lt;td&gt;&#xD;
&lt;strong&gt;Note&lt;/strong&gt;&amp;nbsp;&amp;nbsp;Some features are not supported by all digitizers. Refer to &lt;a href="javascript:LaunchHelp('Digitizers.chm::/Features_Supported_Main.html')"&gt;Features Supported by Device&lt;/a&gt; for more information.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xD;
&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
            <Method>
               <Name>configuretriggeroutput</Name>
               <Location>ConfigurationFunctionsSynchronization</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuretriggeroutput(obj, TriggerEvent, TriggerOutput)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
TriggerOutput = [double(TriggerOutput) 0];

status = calllib(libname, 'niScope_ConfigureTriggerOutput', session, TriggerEvent, TriggerOutput);


if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt;niScope_ConfigureTriggerOutput&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_ConfigureTriggerOutput&#xD;
&lt;/h1&gt;&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus niScope_ConfigureTriggerOutput (ViSession vi, ViInt32 triggerEvent, ViConstString triggerOutput);&lt;/p&gt;&#xD;
&#xD;
&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&lt;table class="Borderless-Wide"&gt;&#xD;
&lt;tr&gt;&#xD;
&lt;td class="Icon"&gt;&lt;img src="note.gif"&gt;&lt;/td&gt;&#xD;
&lt;td&gt;&#xD;
&lt;strong&gt;Note&lt;/strong&gt;&amp;nbsp;&amp;nbsp;This function is obsolete. Consider using &lt;a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ExportSignal.html')"&gt;&lt;span class="Monospace"&gt;niScope_ExportSignal&lt;/span&gt;&lt;/a&gt; instead.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xD;
&#xD;
&lt;p class="Body"&gt;Configures the digitizer to generate a signal pulse that other digitizers can detect when configured for digital triggering. &lt;/p&gt;&#xD;
&#xD;
&#xD;
&lt;p class="Body"&gt;&#xD;
For Traditional NI-DAQ devices, exported signals are still present in the route after the session is closed. &#xD;
You must clear the route before closing the session,  or call &lt;a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_reset.html')"&gt;&lt;span class="Monospace"&gt;niScope_reset&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;&#xD;
&#xD;
&lt;p class = "body"&gt;&#xD;
 To clear the route,  call this function  again and route NISCOPE_VAL_NONE&#xD;
  to the line that you had exported. &#xD;
&#xD;
For example, if you originally called this function  with the trigger event   NISCOPE_VAL_STOP_TRIGGER_EVENT&#xD;
 routed to the trigger output  NISCOPE_VAL_RTSI_0, &#xD;
you would call this function again with   NISCOPE_VAL_NONE routed to &#xD;
NISCOPE_VAL_RTSI_0 to clear the route.&lt;/P&gt;&#xD;
&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
            <Method>
               <Name>exportsignal</Name>
               <Location>ConfigurationFunctionsSynchronization</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function exportsignal(obj, Signal, SignalIdentifier, OutputTerminal)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
SignalIdentifier = [double(SignalIdentifier) 0];
OutputTerminal = [double(OutputTerminal) 0];

status = calllib(libname, 'niScope_ExportSignal', session, Signal, SignalIdentifier, OutputTerminal);


if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt;niScope_ExportSignal&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_ExportSignal&lt;/h1&gt;&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus niScope_ExportSignal (ViSession vi,&#xD;
                                        ViInt32 signal,&#xD;
                                        ViConstString signalIdentifier,&#xD;
                                        ViConstString outputTerminal);&lt;/p&gt;&#xD;
&#xD;
&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&#xD;
&lt;table class="Borderless-Wide"&gt;&#xD;
&lt;tr&gt;&#xD;
&lt;td class="Icon"&gt;&lt;img src="note.gif"&gt;&lt;/td&gt;&#xD;
&lt;td&gt;&#xD;
&lt;strong&gt;Note&lt;/strong&gt;&amp;nbsp;&amp;nbsp;This function replaces &lt;a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ConfigureTriggerOutput.html')"&gt;&lt;span class="Monospace"&gt;niScope_ConfigureTriggerOutput&lt;/span&gt;&lt;/a&gt;.&#xD;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xD;
&lt;p class="Body"&gt;Configures the digitizer to generate a signal that other devices can detect &#xD;
when configured for digital triggering or sharing clocks.  The &lt;strong&gt;signal&lt;/strong&gt; parameter &#xD;
specifies what condition causes the digitizer to generate the signal.  &#xD;
The &lt;strong&gt;outputTerminal&lt;/strong&gt; parameter specifies where to send the signal  on the hardware &#xD;
(such as a PFI connector or RTSI line).&lt;/p&gt;&#xD;
 &#xD;
 &lt;p class ="Body"&gt;In cases where multiple instances of a particular signal exist, use the &lt;strong&gt;signalIdentifier&lt;/strong&gt; input to specify &#xD;
 which instance to control.  For normal signals, only one instance exists and you should leave &#xD;
 this parameter set to the empty string. You can call this function multiple times  and set each available line &#xD;
 to a different signal.&lt;/p&gt;&#xD;
&lt;p class ="Body"&gt; To unprogram a specific line on device, call this function with &#xD;
the signal you no longer want to export and  &#xD;
set &lt;strong&gt;outputTerminal&lt;/strong&gt; to  &lt;span class="Monospace"&gt;NISCOPE_VAL_NONE&lt;/span&gt;.&lt;/p&gt;&#xD;
&#xD;
&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>ConfigurationFunctionsTrigger</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ConfigurationFunctionsTrigger1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>configuretriggerdigital</Name>
               <Location>ConfigurationFunctionsTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuretriggerdigital(obj, TriggerSource, Slope, Holdoff, Delay)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
TriggerSource = [double(TriggerSource) 0];

status = calllib(libname, 'niScope_ConfigureTriggerDigital', session, TriggerSource, Slope, Holdoff, Delay);


if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt; niScope_ConfigureTriggerDigital&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_ConfigureTriggerDigital&lt;/h1&gt;&#xD;
&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus niScope_ConfigureTriggerDigital (ViSession vi, ViConstString triggerSource, ViInt32 slope, ViReal64 holdoff, ViReal64 delay);&lt;/p&gt;&#xD;
&#xD;
&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&#xD;
&#xD;
&lt;p class="Body"&gt;Configures the common properties of a digital trigger. &#xD;
&lt;/p&gt;&#xD;
&#xD;
&#xD;
&lt;p class="Body"&gt;&#xD;
&#xD;
When you initiate an acquisition, the digitizer waits for the start trigger, which is configured through the &lt;a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_ACQ_ARM_SOURCE.html')"&gt;&lt;span class="Monospace"&gt;NISCOPE_ATTR_ACQ_ARM_SOURCE&lt;/span&gt;&lt;/a&gt; (Start Trigger Source) attribute. The default is immediate. Upon receiving the start trigger the digitizer begins sampling pretrigger points. After the digitizer finishes sampling pretrigger points, the digitizer waits for a reference (stop) trigger that you specify with a function such as this one. Upon receiving the reference trigger the digitizer finishes the acquisition after completing posttrigger sampling. With each Configure Trigger function, you specify configuration parameters such as the trigger source and the amount of trigger delay.&#xD;
&lt;/p&gt;&#xD;
&#xD;
&lt;table class="Borderless-Wide"&gt;&#xD;
&lt;tr&gt;&#xD;
&lt;td class="Icon"&gt;&lt;img src="note.gif"&gt;&lt;/td&gt;&#xD;
&lt;td&gt;&#xD;
&lt;strong&gt;Notes&lt;/strong&gt;&amp;nbsp;&amp;nbsp;For multirecord acquisitions, all records after the first record are started by using the Advance Trigger Source. The default is immediate. &#xD;
&#xD;
&lt;p class="Body"&gt;You can adjust the amount of pre-trigger and post-trigger &#xD;
samples using the reference position parameter on the &lt;a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ConfigureHorizontalTiming.html')"&gt;&lt;span class="Monospace"&gt;niScope_ConfigureHorizontalTiming&lt;/span&gt;&lt;/a&gt; function. &#xD;
The default is half of the record length.&lt;/p&gt;&#xD;
&#xD;
&#xD;
&lt;p class="Body"&gt;Some features are not supported by all digitizers. Refer to &lt;a href="javascript:LaunchHelp('Digitizers.chm::/Features_Supported_Main.html')"&gt;Features &#xD;
Supported by Device&lt;/a&gt;  for more information.&lt;/p&gt;&#xD;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xD;
&#xD;
&#xD;
&#xD;
&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
            <Method>
               <Name>configuretriggeredge</Name>
               <Location>ConfigurationFunctionsTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuretriggeredge(obj, TriggerSource, Level, Slope, TriggerCoupling, Holdoff, Delay)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
TriggerSource = [double(TriggerSource) 0];

status = calllib(libname, 'niScope_ConfigureTriggerEdge', session, TriggerSource, Level, Slope, TriggerCoupling, Holdoff, Delay);


if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt; niScope_ConfigureTriggerEdge&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_ConfigureTriggerEdge&#xD;
&lt;/h1&gt;&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus niScope_ConfigureTriggerEdge (ViSession vi, ViConstString triggerSource, ViReal64 level, ViInt32 slope, ViInt32 triggerCoupling, ViReal64 holdoff, ViReal64 delay);&lt;/p&gt;&#xD;
&#xD;
&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&#xD;
&#xD;
&lt;p class="Body"&gt;Configures common properties for analog edge triggering. &#xD;
&lt;/p&gt;&#xD;
&#xD;
&#xD;
&#xD;
&lt;p class="Body"&gt;&#xD;
&#xD;
When you initiate an acquisition, the digitizer waits for the start trigger, which is configured through the &lt;a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_ACQ_ARM_SOURCE.html')"&gt;&lt;span class="Monospace"&gt;NISCOPE_ATTR_ACQ_ARM_SOURCE&lt;/span&gt;&lt;/a&gt; (Start Trigger Source) attribute. The default is immediate. Upon receiving the start trigger the digitizer begins sampling pretrigger points. After the digitizer finishes sampling pretrigger points, the digitizer waits for a reference (stop) trigger that you specify with a function  such as this one. Upon receiving the reference trigger the digitizer finishes the acquisition after completing posttrigger sampling. With each Configure Trigger function, you specify configuration parameters such as the trigger source and the amount of trigger delay.&#xD;
&lt;/p&gt;&#xD;
&lt;table class="Borderless"&gt;&lt;tr&gt;&lt;td class="Icon"&gt;&lt;img src="note.gif"&gt;&lt;/td&gt;&lt;td&gt;&#xD;
&lt;strong&gt;Note&lt;/strong&gt;&amp;nbsp;&amp;nbsp;Some features are not supported by all digitizers. Refer to &lt;a href="javascript:LaunchHelp('Digitizers.chm::/Features_Supported_Main.html')"&gt;Features Supported by Device&lt;/a&gt; for more information. &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xD;
&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
            <Method>
               <Name>configuretriggerhysteresis</Name>
               <Location>ConfigurationFunctionsTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuretriggerhysteresis(obj, TriggerSource, Level, Hysteresis, Slope, TriggerCoupling, Holdoff, Delay)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
TriggerSource = [double(TriggerSource) 0];

status = calllib(libname, 'niScope_ConfigureTriggerHysteresis', session, TriggerSource, Level, Hysteresis, Slope, TriggerCoupling, Holdoff, Delay);


if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt; niScope_ConfigureTriggerHysteresis&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_ConfigureTriggerHysteresis&lt;/h1&gt;&#xD;
&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus niScope_ConfigureTriggerHysteresis (ViSession vi, ViConstString triggerSource, ViReal64 level, ViReal64 hysteresis, ViInt32 slope, ViInt32 triggerCoupling, ViReal64 holdoff, ViReal64 delay);&lt;/p&gt;&#xD;
&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&#xD;
&lt;p class="Body"&gt;Configures common properties for analog hysteresis triggering. This kind of trigger specifies an additional value, specified in the &lt;strong&gt;hysteresis&lt;/strong&gt; parameter, that a signal must pass through before a trigger can occur. This additional value acts as a kind of buffer zone that keeps noise from triggering an acquisition. &#xD;
&lt;/p&gt;&#xD;
&#xD;
&#xD;
&lt;p class="Body"&gt;&#xD;
&#xD;
When you initiate an acquisition, the digitizer waits for the start trigger, which is configured through the &lt;a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_ACQ_ARM_SOURCE.html')"&gt;&lt;span class="Monospace"&gt;NISCOPE_ATTR_ACQ_ARM_SOURCE&lt;/span&gt; (Start Trigger Source)&lt;/a&gt;. The default is immediate. Upon receiving the start trigger the digitizer begins sampling pretrigger points. After the digitizer finishes sampling pretrigger points, the digitizer waits for a reference (stop) trigger that you specify with a function such as this one. Upon receiving the reference trigger the digitizer finishes the acquisition after completing posttrigger sampling. With each Configure Trigger function, you specify configuration parameters such as the trigger source and the amount of trigger delay.&#xD;
&lt;/p&gt;&#xD;
&lt;table class="Borderless"&gt;&lt;tr&gt;&lt;td class="Icon"&gt;&lt;img src="note.gif"&gt;&lt;/td&gt;&lt;td&gt;&#xD;
&lt;strong&gt;Note&lt;/strong&gt;&amp;nbsp;&amp;nbsp;Some features are not supported by all digitizers. Refer to &lt;a href="javascript:LaunchHelp('Digitizers.chm::/Features_Supported_Main.html')"&gt;Features Supported by Device&lt;/a&gt; for more information. &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xD;
&#xD;
&#xD;
&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
            <Method>
               <Name>configuretriggerimmediate</Name>
               <Location>ConfigurationFunctionsTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuretriggerimmediate(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'niScope_ConfigureTriggerImmediate', session);


if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt; niScope_ConfigureTriggerImmediate&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_ConfigureTriggerImmediate&#xD;
&lt;/h1&gt;&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus niScope_ConfigureTriggerImmediate (ViSession vi);&lt;/p&gt;&#xD;
&#xD;
&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&#xD;
&#xD;
&lt;p class="Body"&gt;Configures common properties for immediate triggering. Immediate triggering means the digitizer triggers itself. &#xD;
&lt;/p&gt;&#xD;
&#xD;
&#xD;
&lt;p class="Body"&gt;When you initiate an acquisition, the digitizer waits for a trigger. You specify the type of trigger that the digitizer waits for with a Configure Trigger function, such as &lt;span class="Monospace"&gt;niScope_ConfigureTriggerImmediate&lt;/span&gt;. &#xD;
&lt;/p&gt;&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
            <Method>
               <Name>configuretriggersoftware</Name>
               <Location>ConfigurationFunctionsTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuretriggersoftware(obj, Holdoff, Delay)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'niScope_ConfigureTriggerSoftware', session, Holdoff, Delay);


if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt; niScope_ConfigureTriggerSoftware&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_ConfigureTriggerSoftware&#xD;
&lt;/h1&gt;&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus niScope_ConfigureTriggerSoftware (ViSession vi, ViReal64 holdoff, ViReal64 delay);&lt;/p&gt;&#xD;
&#xD;
&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&#xD;
&#xD;
&lt;p class="Body"&gt;Configures common properties for software triggering. &#xD;
&lt;/p&gt;&#xD;
&#xD;
&#xD;
&#xD;
&#xD;
&lt;p class="Body"&gt;&#xD;
&#xD;
When you initiate an acquisition, the digitizer waits for the start trigger, which is configured through the &#xD;
&lt;a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_ACQ_ARM_SOURCE.html')"&gt;&lt;span class="Monospace"&gt;NISCOPE_ATTR_ACQ_ARM_SOURCE&lt;/span&gt;&lt;/a&gt; &#xD;
(Start Trigger Source) attribute. The default is immediate. Upon receiving the start trigger &#xD;
the digitizer begins sampling pretrigger points. After the digitizer finishes sampling &#xD;
pretrigger points, the digitizer waits for a reference (stop) trigger that you specify with a &#xD;
function  such as this one. Upon receiving the reference trigger the digitizer finishes the &#xD;
acquisition after completing posttrigger sampling. With each Configure Trigger function, you &#xD;
specify configuration parameters such as the trigger source and the amount of trigger delay. &lt;/P&gt;&#xD;
&lt;p class="Body"&gt;&#xD;
To trigger the acquisition, use &lt;a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_SendSoftwareTriggerEdge.html')"&gt;&lt;span class="Monospace"&gt;niScope_SendSoftwareTriggerEdge&lt;/span&gt;&lt;/a&gt;. &#xD;
&lt;/p&gt;&#xD;
&lt;table class="Borderless"&gt;&lt;tr&gt;&lt;td class="Icon"&gt;&lt;img src="note.gif"&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;Note&lt;/strong&gt;&amp;nbsp;&amp;nbsp;&#xD;
Some features are not supported by all digitizers. Refer to &lt;a href="javascript:LaunchHelp('Digitizers.chm::/Features_Supported_Main.html')"&gt;Features Supported by Device&lt;/a&gt;  for more information. &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xD;
&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
            <Method>
               <Name>configuretriggervideo</Name>
               <Location>ConfigurationFunctionsTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuretriggervideo(obj, TriggerSource, EnableDCRestore, SignalFormat, Event, LineNumber, Polarity, TriggerCoupling, Holdoff, Delay)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
TriggerSource = [double(TriggerSource) 0];

status = calllib(libname, 'niScope_ConfigureTriggerVideo', session, TriggerSource, EnableDCRestore, SignalFormat, Event, LineNumber, Polarity, TriggerCoupling, Holdoff, Delay);


if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt; niScope_ConfigureTriggerVideo&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_ConfigureTriggerVideo&lt;/h1&gt;&#xD;
&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus niScope_ConfigureTriggerVideo (ViSession vi,                                            ViConstString triggerSource,&#xD;
                                                 ViBoolean enableDCRestore,&#xD;
                                                 ViInt32 signalFormat,&#xD;
                                                 ViInt32 event,&#xD;
                                                 ViInt32 lineNumber, &#xD;
                                                 ViInt32 polarity,&#xD;
                                                 ViInt32 triggerCoupling,&#xD;
                                                 ViReal64 holdoff,&#xD;
                                                 ViReal64 delay);&#xD;
&lt;/p&gt;&#xD;
&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&#xD;
&#xD;
&lt;p class="Body"&gt;Configures the common properties for video triggering, including the signal format, TV event, line number, polarity, and enable DC restore. A video trigger occurs when the digitizer finds a valid video signal sync. &#xD;
&lt;/p&gt;&#xD;
&#xD;
&#xD;
&#xD;
&#xD;
&lt;p class="Body"&gt;&#xD;
&#xD;
When you initiate an acquisition, the digitizer waits for the start trigger, which is configured through the &lt;a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_ACQ_ARM_SOURCE.html')"&gt;&lt;span class="Monospace"&gt;NISCOPE_ATTR_ACQ_ARM_SOURCE&lt;/span&gt;&lt;/a&gt; (Start Trigger Source) attribute. The default is immediate. Upon receiving the start trigger the digitizer begins sampling pretrigger points. After the digitizer finishes sampling pretrigger points, the digitizer waits for a reference (stop) trigger that you specify with a function  such as this one. Upon receiving the reference trigger the digitizer finishes the acquisition after completing posttrigger sampling. With each Configure Trigger function, you specify configuration parameters such as the trigger source and the amount of trigger delay. &#xD;
&lt;/p&gt;&#xD;
&lt;table class="Borderless"&gt;&lt;tr&gt;&lt;td class="Icon"&gt;&lt;img src="note.gif"&gt;&lt;/td&gt;&lt;td&gt;&#xD;
&lt;strong&gt;Note&lt;/strong&gt;&amp;nbsp;&amp;nbsp;Some features are not supported by all digitizers. Refer to &lt;a href="javascript:LaunchHelp('Digitizers.chm::/Features_Supported_Main.html')"&gt;Features Supported by Device&lt;/a&gt; for more information. &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xD;
&#xD;
&#xD;
&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
            <Method>
               <Name>configuretriggerwindow</Name>
               <Location>ConfigurationFunctionsTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuretriggerwindow(obj, TriggerSource, LowLevel, HighLevel, WindowMode, TriggerCoupling, Holdoff, Delay)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
TriggerSource = [double(TriggerSource) 0];

status = calllib(libname, 'niScope_ConfigureTriggerWindow', session, TriggerSource, LowLevel, HighLevel, WindowMode, TriggerCoupling, Holdoff, Delay);


if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt; niScope_ConfigureTriggerWindow&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_ConfigureTriggerWindow&lt;/h1&gt;&#xD;
&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus niScope_ConfigureTriggerWindow (ViSession vi, ViConstString triggerSource, ViReal64 lowLevel, ViReal64 highLevel, ViInt32 windowMode, ViInt32 triggerCoupling, ViReal64 holdoff, ViReal64 delay);&lt;/p&gt;&#xD;
&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&#xD;
&lt;p class="Body"&gt;Configures common properties for analog window triggering. A window trigger occurs when a signal enters or leaves a window you specify with the &lt;strong&gt;high level&lt;/strong&gt; or &lt;strong&gt;low level&lt;/strong&gt; parameters. &#xD;
&lt;/p&gt;&#xD;
&#xD;
&#xD;
&lt;p class="Body"&gt;&#xD;
&#xD;
When you initiate an acquisition, the digitizer waits for the start trigger, which is configured through the &#xD;
&lt;a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_ACQ_ARM_SOURCE.html')"&gt;&lt;span class="Monospace"&gt;NISCOPE_ATTR_ACQ_ARM_SOURCE&lt;/span&gt;&lt;/a&gt; &#xD;
(Start Trigger Source) attribute. The default is immediate. Upon receiving the start trigger &#xD;
the digitizer begins sampling pretrigger points. After the digitizer finishes sampling &#xD;
pretrigger points, the digitizer waits for a reference (stop) trigger that you specify with a &#xD;
function  such as this one. Upon receiving the reference trigger the digitizer finishes the &#xD;
acquisition after completing posttrigger sampling. With each Configure Trigger function, you &#xD;
specify configuration parameters such as the trigger source and the amount of trigger delay. &lt;/P&gt;&#xD;
&lt;p class="Body"&gt;&#xD;
To trigger the acquisition, use &lt;a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_SendSoftwareTriggerEdge.html')"&gt;&lt;span class="Monospace"&gt;niScope_SendSoftwareTriggerEdge&lt;/span&gt;&lt;/a&gt;. &#xD;
&lt;/p&gt;&#xD;
&#xD;
&lt;table class="Borderless"&gt;&lt;tr&gt;&lt;td class="Icon"&gt;&lt;img src="note.gif"&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;Note&lt;/strong&gt;&amp;nbsp;&amp;nbsp;&#xD;
Some features are not supported by all digitizers. Refer to &lt;a href="javascript:LaunchHelp('Digitizers.chm::/Features_Supported_Main.html')"&gt;Features &#xD;
Supported by Device&lt;/a&gt;  for more information. &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xD;
&#xD;
&#xD;
&#xD;
&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
            <Method>
               <Name>sendsoftwaretriggeredge</Name>
               <Location>ConfigurationFunctionsTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function sendsoftwaretriggeredge(obj, WhichTrigger)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'niScope_SendSoftwareTriggerEdge', session, WhichTrigger);


if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt;niScope_SendSoftwareTriggerEdge&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_SendSoftwareTriggerEdge&lt;/h1&gt;&#xD;
&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus niScope_SendSoftwareTriggerEdge (ViSession vi,&#xD;
                                                   ViInt32 whichTrigger);&lt;/p&gt;&#xD;
&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&#xD;
&lt;p class="Body"&gt;Sends the selected trigger to the digitizer. Call this function if you &#xD;
called &lt;a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ConfigureTriggerSoftware.html')"&gt;&lt;span class="Monospace"&gt;niScope_ConfigureTriggerSoftware&lt;/span&gt;&lt;/a&gt;&#xD;
 when you want the Reference trigger to occur.  You can also call this function to override a misused edge, digital,&#xD;
 or hysteresis trigger. If you have configured  &#xD;
&lt;a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_ACQ_ARM_SOURCE.html')"&gt;&lt;span class="Monospace"&gt;NISCOPE_ATTR_ACQ_ARM_SOURCE&lt;/span&gt;&lt;/a&gt;,   &lt;a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_ARM_REF_TRIG_SRC.html')"&gt;&#xD;
&lt;span class="Monospace"&gt;NISCOPE_ATTR_ARM_REF_TRIG_SRC&lt;/span&gt;&lt;/a&gt;, or   &lt;a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_ADV_TRIG_SRC.html')"&gt;&lt;span class="Monospace"&gt;NISCOPE_ATTR_ADV_TRIG_SRC&lt;/span&gt;&lt;/a&gt;, call &#xD;
 this function when you want to send the corresponding trigger to the digitizer.&#xD;
&lt;/p&gt;&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>ConfigurationFunctionsVertical</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ConfigurationFunctionsVertical1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>configurechancharacteristics</Name>
               <Location>ConfigurationFunctionsVertical</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurechancharacteristics(obj, ChannelList, InputImpedance, MaxInputFrequency)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelList = [double(ChannelList) 0];

status = calllib(libname, 'niScope_ConfigureChanCharacteristics', session, ChannelList, InputImpedance, MaxInputFrequency);


if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt;niScope_ConfigureChanCharacteristics&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_ConfigureChanCharacteristics&#xD;
&lt;/h1&gt;&#xD;
&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus niScope_ConfigureChanCharacteristics (ViSession vi, ViConstString channelList, ViReal64 inputImpedance, ViReal64 maxInputFrequency);&lt;/p&gt;&#xD;
&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&#xD;
&lt;p class="Body"&gt;Configures the attributes that control the electrical characteristics of the channel&amp;#8212;the input impedance and the bandwidth.&lt;/p&gt;&#xD;
&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
            <Method>
               <Name>configurevertical</Name>
               <Location>ConfigurationFunctionsVertical</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurevertical(obj, ChannelList, Range, Offset, Coupling, ProbeAttenuation, Enabled)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelList = [double(ChannelList) 0];

status = calllib(libname, 'niScope_ConfigureVertical', session, ChannelList, Range, Offset, Coupling, ProbeAttenuation, Enabled);


if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt;niScope_ConfigureVertical&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_ConfigureVertical&lt;/h1&gt;&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus niScope_ConfigureVertical (ViSession vi, ViConstString channelList, ViReal64 range, ViReal64 offset, ViInt32 coupling, ViReal64 probeAttenuation, ViBoolean enabled);&lt;/p&gt;&#xD;
&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&#xD;
&lt;p class="Body"&gt;Configures the most commonly configured attributes of the digitizer vertical subsystem, such as the range, offset, coupling, probe attenuation, and the channel.&lt;/p&gt;&#xD;
&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>Device</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Device1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Serial_Number</Name>
               <Location>Device</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1150104, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"Returns the serial number of the device.
    "</Description>
            </Property>
            <Property>
               <Name>Temperature</Name>
               <Location>Device</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150086);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"Returns the temperature of the device in degrees Celsius from the onboard sensor.
    "</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>DeviceSpecificIFDigitizer5620and5621</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="DeviceSpecificIFDigitizer5620and56211" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Delay_Before_Initiate</Name>
               <Location>DeviceSpecificIFDigitizer5620and5621</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1151304);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1151304 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the delay in seconds that is used by niScope_InitiateAcquisition to allow additional delay between programming of the vertical range, trigger level, DDC, and the start of the acquisition. This attribute is only supported for the NI 5112 and the NI 5620/5621.
    "</Description>
            </Property>
            <Property>
               <Name>Enable_Dither</Name>
               <Location>DeviceSpecificIFDigitizer5620and5621</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1151300);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1151300, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Set to VI_TRUE to enable the analog dither on the NI 5620/5621.
Default Value: VI_FALSE
    "</Description>
            </Property>
            <Property>
               <Name>Fetch_Interleaved_Data</Name>
               <Location>DeviceSpecificIFDigitizer5620and5621</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1150072);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1150072, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Set to VI_TRUE to retrieve one array with alternating values on the NI 5620/5621. For example, this attribute can be used to retrieve a single array with I and Q interleaved instead of two separate arrays. If set to VI_TRUE, the resulting array will be twice the size of the actual record length.
    "</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>DeviceSpecificIFDigitizer5620and5621AdvancedDDCAttributes</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="DeviceSpecificIFDigitizer5620and5621AdvancedDDCAttributes1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>AGC_Average_Control</Name>
               <Location>DeviceSpecificIFDigitizer5620and5621AdvancedDDCAttributes</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1151047);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1151047 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Averages the AGC values.

Valid Values:
0 - Mean
1 - Median
Default Value: 0
    "</Description>
            </Property>
            <Property>
               <Name>AGC_Loop_Gain_0_Exponent</Name>
               <Location>DeviceSpecificIFDigitizer5620and5621AdvancedDDCAttributes</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1151042);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1151042 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Along with NISCOPE_ATTR_DDC_AGC_LOOP_GAIN_0_MANTISSA, sets the loop gain for the AGC.
Default Value: 0
    "</Description>
            </Property>
            <Property>
               <Name>AGC_Loop_Gain_0_Mantissa</Name>
               <Location>DeviceSpecificIFDigitizer5620and5621AdvancedDDCAttributes</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1151043);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1151043 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Along with NISCOPE_ATTR_DDC_AGC_LOOP_GAIN_0_EXPONENT, sets the loop gain for the AGC.
Default Value: 0
    "</Description>
            </Property>
            <Property>
               <Name>AGC_Loop_Gain_1_Exponent</Name>
               <Location>DeviceSpecificIFDigitizer5620and5621AdvancedDDCAttributes</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1151044);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1151044 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Along with NISCOPE_ATTR_DDC_AGC_LOOP_GAIN_1_MANTISSA, sets the loop gain for the AGC.
Default Value: 0
    "</Description>
            </Property>
            <Property>
               <Name>AGC_Loop_Gain_1_Mantissa</Name>
               <Location>DeviceSpecificIFDigitizer5620and5621AdvancedDDCAttributes</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1151045);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1151045 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Along with NISCOPE_ATTR_DDC_AGC_LOOP_GAIN_1_EXPONENT, sets the loop gain for the AGC.
Default Value: 0
    "</Description>
            </Property>
            <Property>
               <Name>AGC_Lower_Gain_Limit</Name>
               <Location>DeviceSpecificIFDigitizer5620and5621AdvancedDDCAttributes</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1151041);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1151041 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Sets the minimum gain and maximum signal levels in the AGC.
Default Value: 6.020600
    "</Description>
            </Property>
            <Property>
               <Name>AGC_Threshold</Name>
               <Location>DeviceSpecificIFDigitizer5620and5621AdvancedDDCAttributes</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1151046);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1151046 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Sets the gain error in the AGC.
Default Value: 0x034D
"</Description>
            </Property>
            <Property>
               <Name>AGC_Upper_Gain_Limit</Name>
               <Location>DeviceSpecificIFDigitizer5620and5621AdvancedDDCAttributes</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1151040);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1151040 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Sets the maximum gain and minimum signal levels in the AGC.
Default Value: 6.020600
    "</Description>
            </Property>
            <Property>
               <Name>AOUT_Parallel_Output_Source</Name>
               <Location>DeviceSpecificIFDigitizer5620and5621AdvancedDDCAttributes</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1151070);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1151070 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the source for the AOUT parallel output from the DDC.

Valid Values:
NISCOPE_VAL_I_DATA (0)
NISCOPE_VAL_MAGNITUDE_DATA (1)
NISCOPE_VAL_FREQ_DATA (2)
Default Value: I Data
    "</Description>
            </Property>
            <Property>
               <Name>BOUT_Parallel_Output_Source</Name>
               <Location>DeviceSpecificIFDigitizer5620and5621AdvancedDDCAttributes</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1151071);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1151071 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the source for the BOUT parallel output from the DDC.

Valid Values:
NISCOPE_VAL_MAGNITUDE_DATA (1)
NISCOPE_VAL_Q_DATA (3)
NISCOPE_VAL_PHASE_DATA (4)
Default Value: Q Data
    "</Description>
            </Property>
            <Property>
               <Name>Carrier_NCO_Center_Frequency</Name>
               <Location>DeviceSpecificIFDigitizer5620and5621AdvancedDDCAttributes</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1151000);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1151000 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the Carrier NCO Center Frequency. The coerced value can be read back..
Default Value: 15.0e6
    "</Description>
            </Property>
            <Property>
               <Name>Carrier_Phase_Offset</Name>
               <Location>DeviceSpecificIFDigitizer5620and5621AdvancedDDCAttributes</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1151001);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1151001 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the Carrier Phase Offset. The coerced value can be read back.
Default Value: 0.0
    "</Description>
            </Property>
            <Property>
               <Name>CIC_Decimation</Name>
               <Location>DeviceSpecificIFDigitizer5620and5621AdvancedDDCAttributes</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1151010);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1151010 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Controls the decimation in the CIC filter. The CIC filter reduces the sample rate of a wideband signal to a rate that other filters in the DDC can process.
Default Value: 4
    "</Description>
            </Property>
            <Property>
               <Name>CIC_Shift_Gain</Name>
               <Location>DeviceSpecificIFDigitizer5620and5621AdvancedDDCAttributes</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1151011);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1151011 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Controls the shift gain at the input to the CIC filter. The CIC filter reduces the sample rate of a wideband signal to a rate that other filters in the DDC can process.
Default Value: 0
    "</Description>
            </Property>
            <Property>
               <Name>Combined_Decimation</Name>
               <Location>DeviceSpecificIFDigitizer5620and5621AdvancedDDCAttributes</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1151301);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"Returns the combined DDC decimation.
    "</Description>
            </Property>
            <Property>
               <Name>Coordinate_Converter_Input</Name>
               <Location>DeviceSpecificIFDigitizer5620and5621AdvancedDDCAttributes</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1151073);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1151073 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Selects the source for the input to the coordinate converter, either the HB filter or the programmable FIR.

Valid Values:
0 - Resampler HB1 - Programmable FIRDefault Value: 1    "</Description>
            </Property>
            <Property>
               <Name>Discr_Enable</Name>
               <Location>DeviceSpecificIFDigitizer5620and5621AdvancedDDCAttributes</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1151020);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1151020, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Set this to VI_TRUE to enable the frequency discriminator.
Default Value: VI_FALSE
    "</Description>
            </Property>
            <Property>
               <Name>Discriminator_Delay</Name>
               <Location>DeviceSpecificIFDigitizer5620and5621AdvancedDDCAttributes</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1151025);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1151025 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Sets the number of delays in the discriminator, from 1 to 8.
Default Value: 1
    "</Description>
            </Property>
            <Property>
               <Name>Discriminator_FIR_Decimation</Name>
               <Location>DeviceSpecificIFDigitizer5620and5621AdvancedDDCAttributes</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1151021);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1151021 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Sets the amount of decimation, from 1 to 8.
Default Value: 1
    "</Description>
            </Property>
            <Property>
               <Name>Discriminator_FIR_Input_Source</Name>
               <Location>DeviceSpecificIFDigitizer5620and5621AdvancedDDCAttributes</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1151026);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1151026 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                     <Value>2.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Sets the discriminator FIR input source to phase, magnitude, or resampler.
Default Value: Phase    "</Description>
            </Property>
            <Property>
               <Name>Discriminator_FIR_Symmetry</Name>
               <Location>DeviceSpecificIFDigitizer5620and5621AdvancedDDCAttributes</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1151022);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1151022 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Sets the discriminator FIR symmetry to symmetric or asymmetric.
Default Value: Symmetric
    "</Description>
            </Property>
            <Property>
               <Name>Discriminator_FIR_Symmetry_Type</Name>
               <Location>DeviceSpecificIFDigitizer5620and5621AdvancedDDCAttributes</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1151023);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1151023 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>0.0</Value>
                     <Value>1.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Sets the discriminator FIR symmetry type to even or odd.
Default Value: Even
    "</Description>
            </Property>
            <Property>
               <Name>Discriminator_FIR_Taps</Name>
               <Location>DeviceSpecificIFDigitizer5620and5621AdvancedDDCAttributes</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1151024);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1151024 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Sets the discriminator FIR number of taps.

Valid Values:
1 to 63.
Default Value: 1
    "</Description>
            </Property>
            <Property>
               <Name>Discriminator_Phase_Multiplier</Name>
               <Location>DeviceSpecificIFDigitizer5620and5621AdvancedDDCAttributes</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1151027);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1151027 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Programs the coordinate converter to multiply the phase output by 1, 2, 4, or 8. Multiplying the phase output removes phase modulation before the frequency is measured.
Default Value: 0    "</Description>
            </Property>
            <Property>
               <Name>Enable_DDC</Name>
               <Location>DeviceSpecificIFDigitizer5620and5621AdvancedDDCAttributes</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1151003);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1151003, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Set this to VI_FALSE to disable programming of the DDC.
Default Value: VI_TRUE
    "</Description>
            </Property>
            <Property>
               <Name>Halfband_Filter_1_Enable</Name>
               <Location>DeviceSpecificIFDigitizer5620and5621AdvancedDDCAttributes</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1151051);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1151051, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Enables halfband filter 1.
Default Value: VI_TRUE
    "</Description>
            </Property>
            <Property>
               <Name>Halfband_Filter_2_Enable</Name>
               <Location>DeviceSpecificIFDigitizer5620and5621AdvancedDDCAttributes</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1151052);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1151052, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Enables halfband filter 2.
Default Value: VI_FALSE
    "</Description>
            </Property>
            <Property>
               <Name>Halfband_Filter_3_Enable</Name>
               <Location>DeviceSpecificIFDigitizer5620and5621AdvancedDDCAttributes</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1151053);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1151053, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Enables halfband filter 3.
Default Value: VI_FALSE
    "</Description>
            </Property>
            <Property>
               <Name>Halfband_Filter_4_Enable</Name>
               <Location>DeviceSpecificIFDigitizer5620and5621AdvancedDDCAttributes</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1151054);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1151054, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Enables halfband filter 4.
Default Value: VI_FALSE
    "</Description>
            </Property>
            <Property>
               <Name>Halfband_Filter_5_Enable</Name>
               <Location>DeviceSpecificIFDigitizer5620and5621AdvancedDDCAttributes</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1151055);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1151055, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Enables halfband filter 5.
Default Value: VI_FALSE
    "</Description>
            </Property>
            <Property>
               <Name>Halfband_Filter_Bypass</Name>
               <Location>DeviceSpecificIFDigitizer5620and5621AdvancedDDCAttributes</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1151050);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1151050, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Enables or bypasses the halfband filters. If set to VI_TRUE, halfband filters are bypassed.
Default Value: VI_TRUE
    "</Description>
            </Property>
            <Property>
               <Name>Prog_FIR_Filter_Decimation</Name>
               <Location>DeviceSpecificIFDigitizer5620and5621AdvancedDDCAttributes</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1151030);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1151030 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the programmable FIR filter decimation.
Default Value: 1
     "</Description>
            </Property>
            <Property>
               <Name>Prog_FIR_Filter_Real_Complex</Name>
               <Location>DeviceSpecificIFDigitizer5620and5621AdvancedDDCAttributes</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1151034);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1151034 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Sets either a complex filter or a dual real filter.

Valid Values:
NISCOPE_VAL_REAL (0)
NISCOPE_VAL_COMPLEX (1)
Default Value: Real
    "</Description>
            </Property>
            <Property>
               <Name>Prog_FIR_Filter_Symmetry</Name>
               <Location>DeviceSpecificIFDigitizer5620and5621AdvancedDDCAttributes</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1151031);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1151031 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Sets either a symmetric or asymmetric filter.

Valid Values:
NISCOPE_VAL_SYMMETRIC (0)
NISCOPE_VAL_ASYMMETRIC (1)
Default Value: Symmetric
    "</Description>
            </Property>
            <Property>
               <Name>Prog_FIR_Filter_Symmetry_Type</Name>
               <Location>DeviceSpecificIFDigitizer5620and5621AdvancedDDCAttributes</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1151032);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1151032 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>0.0</Value>
                     <Value>1.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Sets either even or odd symmetry.

Valid Values:
NISCOPE_VAL_EVEN (0)
NISCOPE_VAL_ODD (1)
Default Value: Even
    "</Description>
            </Property>
            <Property>
               <Name>Prog_FIR_Filter_Taps</Name>
               <Location>DeviceSpecificIFDigitizer5620and5621AdvancedDDCAttributes</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1151033);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1151033 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Number of taps in the FIR filter, from 1 to 255.
Default Value: 1
    "</Description>
            </Property>
            <Property>
               <Name>Q_Input_to_Coord_Converter</Name>
               <Location>DeviceSpecificIFDigitizer5620and5621AdvancedDDCAttributes</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1151074);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1151074 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Either enables or zeros out the Q input to coordinate converter.
Default Value: I and Q
    "</Description>
            </Property>
            <Property>
               <Name>Resampler_Bypass</Name>
               <Location>DeviceSpecificIFDigitizer5620and5621AdvancedDDCAttributes</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1151127);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1151127, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Either enables or bypasses the resampler filter in the DDC. Set to VI_TRUE to bypass the resampling filter section.
Default Value: VI_TRUE
    "</Description>
            </Property>
            <Property>
               <Name>Resampler_Filter_Mode</Name>
               <Location>DeviceSpecificIFDigitizer5620and5621AdvancedDDCAttributes</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1151126);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1151126 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Selects the resampling filter mode.

Valid Values:
1 - Resampler Enabled2 - HB 1 Enabled3 - Resampler and HB 16 - Both HB Filters7 - Resampler and Both HB FiltersDefault Value: 1
    "</Description>
            </Property>
            <Property>
               <Name>Resampler_NCO_Divide</Name>
               <Location>DeviceSpecificIFDigitizer5620and5621AdvancedDDCAttributes</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1151129);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1151129 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Divides down the Resampler NCO output by the value loaded into the register plus one.
Default Value: 2
    "</Description>
            </Property>
            <Property>
               <Name>Resampler_Output_Pulse_Delay</Name>
               <Location>DeviceSpecificIFDigitizer5620and5621AdvancedDDCAttributes</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1151128);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1151128 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Programs the delay between output samples when interpolating. These outputs can be delayed from 2 to 255 clocks.
Default Value: 16
    "</Description>
            </Property>
            <Property>
               <Name>Resampler_Reference_Divide</Name>
               <Location>DeviceSpecificIFDigitizer5620and5621AdvancedDDCAttributes</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1151130);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1151130 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Divides down the reference clock by the value loaded into the register plus one. Load with a value that is one less than the desired period.
Default Value: 2
    "</Description>
            </Property>
            <Property>
               <Name>Serial_Dac_Cal_Voltage</Name>
               <Location>DeviceSpecificIFDigitizer5620and5621AdvancedDDCAttributes</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1151302);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1151302 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Voltage of the DAC that controls the oscillator, used for external calibration.
    "</Description>
            </Property>
            <Property>
               <Name>Syncout_CLK_Select</Name>
               <Location>DeviceSpecificIFDigitizer5620and5621AdvancedDDCAttributes</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1151080);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1151080 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Source for Syncout CLK.

Valid Values:
0 - CLKIN
1 - PROCCLK
Default Value: CLKIN
    "</Description>
            </Property>
            <Property>
               <Name>Test_Mode_Sin_Cos</Name>
               <Location>DeviceSpecificIFDigitizer5620and5621AdvancedDDCAttributes</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1151072);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1151072, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Enables the special test mode where the carrier NCO outputs are set to 0x7FFF.
Default Value: VI_FALSE
    "</Description>
            </Property>
            <Property>
               <Name>Timing_NCO_Center_Freq</Name>
               <Location>DeviceSpecificIFDigitizer5620and5621AdvancedDDCAttributes</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1151124);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1151124 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Controls the frequency of the timing NCO. Specifies the timing NCO center frequency in binary format:
N = (Fout / Fresampler) X 2^32
where Fout is the output frequency and Fresampler is the resampled frequency.
The value is transfered to the Active Register during the next initiate acquisition operation.
Default Value: 0x80000000
    "</Description>
            </Property>
            <Property>
               <Name>Timing_NCO_Clear_Phase_Accum</Name>
               <Location>DeviceSpecificIFDigitizer5620and5621AdvancedDDCAttributes</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1151121);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1151121, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"If set to FALSE, enables the accumulator in the timing NCO. If set to TRUE, zeros out feedback in the accumulator.
Default Value: VI_FALSE
    "</Description>
            </Property>
            <Property>
               <Name>Timing_NCO_Enable_Offset_Freq</Name>
               <Location>DeviceSpecificIFDigitizer5620and5621AdvancedDDCAttributes</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1151122);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1151122, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"If set to TRUE, enables offset frequency in the timing NCO. If set to FALSE, applies no offset frequency.
Default Value: VI_FALSE
    "</Description>
            </Property>
            <Property>
               <Name>Timing_NCO_Freq_Offset_Bits</Name>
               <Location>DeviceSpecificIFDigitizer5620and5621AdvancedDDCAttributes</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1151123);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1151123 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the number of offset bits in the timing NCO.

Valid Values:
0 - 8 bits
1 - 16 bits
2 - 24 bits
3 - 32 bits
Default Value: 8 bits    "</Description>
            </Property>
            <Property>
               <Name>Timing_NCO_Phase_Accum_Load_on_Update</Name>
               <Location>DeviceSpecificIFDigitizer5620and5621AdvancedDDCAttributes</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1151120);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1151120, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"When TRUE, updates the timing NCO frequency to zero the feedback of the phase accumulator as well as update the phase and frequency.
Default Value: VI_TRUE
    "</Description>
            </Property>
            <Property>
               <Name>Timing_NCO_Phase_Offset</Name>
               <Location>DeviceSpecificIFDigitizer5620and5621AdvancedDDCAttributes</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1151125);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1151125 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Offsets the phase of the timing NCO in binary format. The value is transfered to the Active Register during the next initiate acquisition operation.
Default Value: 0
    "</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>Horizontal</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Horizontal1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Acquisition_Start_Time</Name>
               <Location>Horizontal</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1250109);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1250109 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the length of time from the trigger event to the first point in the waveform record in seconds.  If the value is positive, the first point in the waveform record occurs after the trigger event (same as specifying NISCOPE_ATTR_TRIGGER_DELAY_TIME).  If the value is negative, the first point in the waveform record occurs before the trigger event (same as specifying NISCOPE_ATTR_HORZ_RECORD_REF_POSITION).
    "</Description>
            </Property>
            <Property>
               <Name>Actual_Record_Length</Name>
               <Location>Horizontal</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1250008);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"Returns the actual number of points the digitizer acquires for each channel. The value is equal to or greater than the minimum number of points you specify with NISCOPE_ATTR_HORZ_MIN_NUM_PTS.
Allocate a ViReal64 array of this size or greater to pass as the WaveformArray parameter of the Read and Fetch functions. This attribute is only valid after a call to the one of the Configure Horizontal functions.
    The value is equal to or greater than the minimum number of points you specify in one of the niScope_ConfigureHorizontal functions.
    "</Description>
            </Property>
            <Property>
               <Name>Actual_Sample_Rate</Name>
               <Location>Horizontal</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1250010);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"Returns the effective sample rate using the current configuration. The units are samples per second. This attribute is only valid after a call to the one of the Configure Horizontal functions.

Units: Hertz (Samples / Second)
    "</Description>
            </Property>
            <Property>
               <Name>Adjust_Samples</Name>
               <Location>Horizontal</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1150085);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1150085, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"When set to true and the digitizer is set to master, the number of pretrigger samples and total samples are adjusted to be able to synchronize a master and slave 5102.
    "</Description>
            </Property>
            <Property>
               <Name>Enable_Records_Memory</Name>
               <Location>Horizontal</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1150068);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1150068, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Indicates whether more records can be configured with niScope_ConfigureHorizontalTiming than fit in the onboard memory. If this attribute is set to VI_TRUE, it is necessary to fetch records while the acquisition is in progress.  Eventually, some of the records will be overwritten.  An error is returned from the fetch function if you attempt to fetch a record that has been overwritten.
    "</Description>
            </Property>
            <Property>
               <Name>Enable_TDC</Name>
               <Location>Horizontal</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1150096);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1150096, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"This attribute controls whether the TDC is used to compute an accurate trigger.
    "</Description>
            </Property>
            <Property>
               <Name>Enable_Time_Interleaved_Sampling</Name>
               <Location>Horizontal</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1150128);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1150128, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies whether the digitizer acquires the waveform using multiple ADCs for the channel enabling a higher maximum real-time sampling rate.

Valid Values:
VI_TRUE  (1) - Use multiple interleaved ADCs on this channel
VI_FALSE (0) - Use only this channel's ADC to acquire data for this channel
    "</Description>
            </Property>
            <Property>
               <Name>Enforce_Realtime</Name>
               <Location>Horizontal</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1150004);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1150004, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Indicates whether the digitizer enforces real-time measurements or allows equivalent-time measurements.
    "</Description>
            </Property>
            <Property>
               <Name>Min_Number_of_Points</Name>
               <Location>Horizontal</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1250009);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1250009 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the minimum number of points you require in the waveform record for each channel. NI-SCOPE uses the value you specify to configure the record length that the digitizer uses for waveform acquisition. NISCOPE_ATTR_HORZ_RECORD_LENGTH returns the actual record length.

Valid Values: 1 - available onboard memory
    "</Description>
            </Property>
            <Property>
               <Name>Min_Sample_Rate</Name>
               <Location>Horizontal</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150009);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150009 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specify the sampling rate for the acquisition in Samples per second.

Valid Values:
The combination of sampling rate and min record length must allow the digitizer to sample at a valid sampling rate for the acquisition type specified in niScope_ConfigureAcquisition and not require more memory than the onboard memory module allows.
    "</Description>
            </Property>
            <Property>
               <Name>Number_of_Records</Name>
               <Location>Horizontal</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150001);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150001 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the number of records to acquire. Can be used for multi-record acquisition and single-record acquisitions. Setting this to 1 indicates a single-record acquisition.
    "</Description>
            </Property>
            <Property>
               <Name>Poll_Interval</Name>
               <Location>Horizontal</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150100);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150100 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the poll interval in milliseconds to use during RIS acquisitions to check whether the acquisition is complete.
    "</Description>
            </Property>
            <Property>
               <Name>Reference_Position</Name>
               <Location>Horizontal</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1250011);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1250011 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the position of the Reference Event in the waveform record. When the digitizer detects a trigger, it waits the length of time the NISCOPE_ATTR_TRIGGER_DELAY_TIME attribute specifies. The event that occurs when the delay time elapses is the Reference Event. The Reference Event is relative to the start of the record and is a percentage of the record length. For example, the value 50.0 corresponds to the center of the waveform record and 0.0 corresponds to the first element in the waveform record.

Valid Values: 0.0 - 100.0
    "</Description>
            </Property>
            <Property>
               <Name>RIS_Method</Name>
               <Location>Horizontal</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150071);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150071 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>5.0</Value>
                     <Value>3.0</Value>
                     <Value>1.0</Value>
                     <Value>2.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the algorithm for random-interleaved sampling, which is used if the sample rate exceeds the value of NISCOPE_ATTR_MAX_REAL_TIME_SAMPLING_RATE.
    "</Description>
            </Property>
            <Property>
               <Name>RIS_Num_Avg</Name>
               <Location>Horizontal</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150070);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150070 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"The number of averages for each bin in an RIS acquisition.  The number of averages times the oversampling factor is the minimum number of real-time acquisitions necessary to reconstruct the RIS waveform.  Averaging is useful in RIS because the trigger times are not evenly spaced, so adjacent points in the reconstructed waveform not be accurately spaced.  By averaging, the errors in both time and voltage are smoothed.
    "</Description>
            </Property>
            <Property>
               <Name>Time_Per_Record</Name>
               <Location>Horizontal</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1250007);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1250007 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the length of time that corresponds to the record length.

Units: Seconds
    "</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>InherentIVIAttributesAdvancedSessionInformation</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InherentIVIAttributesAdvancedSessionInformation1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Driver_Setup</Name>
               <Location>InherentIVIAttributesAdvancedSessionInformation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1050007, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"This attribute indicates the Driver Setup string that the user specified when initializing the driver.

Some cases exist where the end-user must specify instrument driver options at initialization.  An example of this is specifying a particular instrument model from among a family of instruments that the driver supports.  This is useful when using simulation.  The end-user can specify driver-specific options through the DriverSetup keyword in the optionsString parameter in niScope_InitWithOptions, or through the IVI Configuration Utility.

If the user does not specify a Driver Setup string, this attribute returns an empty string.
    "</Description>
            </Property>
            <Property>
               <Name>Logical_Name</Name>
               <Location>InherentIVIAttributesAdvancedSessionInformation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1050305, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"A string containing the logical name you specified when opening the current IVI session. You can pass a logical name to niScope_Init or niScope_InitWithOptions. The IVI Configuration utility must contain an entry for the logical name. The logical name entry refers to a virtual instrument section in the IVI Configuration file. The virtual instrument section specifies a physical device and initial user options.
    "</Description>
            </Property>
            <Property>
               <Name>Resource_Descriptor</Name>
               <Location>InherentIVIAttributesAdvancedSessionInformation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1050304, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"Indicates the resource descriptor the driver uses to identify the physical device. If you initialize the driver with a logical name, this attribute contains the resource descriptor that corresponds to the entry in the IVI Configuration utility.
If you initialize the instrument driver with the resource descriptor, this attribute contains that value.You can pass a logical name to niScope_Init or niScope_InitWithOptions. The IVI Configuration utility must contain an entry for the logical name. The logical name entry refers to a virtual instrument section in the IVI Configuration file. The virtual instrument section specifies a physical device and initial user options.
    "</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>InherentIVIAttributesDriverCapabilities</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InherentIVIAttributesDriverCapabilities1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Group_Capabilities</Name>
               <Location>InherentIVIAttributesDriverCapabilities</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1050401, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"A string that contains a comma-separated list of class extension groups that this driver implements.
    "</Description>
            </Property>
            <Property>
               <Name>Number_of_Channels</Name>
               <Location>InherentIVIAttributesDriverCapabilities</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1050203);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"Indicates the number of channels that the specific instrument driver supports.
    For channel-based properties, the IVI engine maintains a separate cache value for each channel.
    "</Description>
            </Property>
            <Property>
               <Name>Supported_Models</Name>
               <Location>InherentIVIAttributesDriverCapabilities</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1050327, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"A string that contains a comma-separated list of the instrument model numbers supported by this driver.
    "</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>InherentIVIAttributesDriverIdentificationandVersion</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InherentIVIAttributesDriverIdentificationandVersion1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Class_Specification_Major_Version</Name>
               <Location>InherentIVIAttributesDriverIdentificationandVersion</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1050515);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"The major version number of the class specification with which this driver is compliant.
    "</Description>
            </Property>
            <Property>
               <Name>Class_Specification_Minor_Version</Name>
               <Location>InherentIVIAttributesDriverIdentificationandVersion</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1050516);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"The minor version number of the class specification with which this driver is compliant.
    "</Description>
            </Property>
            <Property>
               <Name>Specific_Driver_Description</Name>
               <Location>InherentIVIAttributesDriverIdentificationandVersion</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1050514, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"A string that contains a brief description of the specific driver
    "</Description>
            </Property>
            <Property>
               <Name>Specific_Driver_Prefix</Name>
               <Location>InherentIVIAttributesDriverIdentificationandVersion</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1050302, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"A string that contains the prefix for the instrument driver. The name of each user-callable function in this driver starts with this prefix.
    "</Description>
            </Property>
            <Property>
               <Name>Specific_Driver_Revision</Name>
               <Location>InherentIVIAttributesDriverIdentificationandVersion</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1050551, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"A string that contains additional version information about this instrument driver.
    "</Description>
            </Property>
            <Property>
               <Name>Specific_Driver_Vendor</Name>
               <Location>InherentIVIAttributesDriverIdentificationandVersion</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1050513, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"A string that contains the name of the vendor that supplies this driver.
    "</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>InherentIVIAttributesInstrumentIdentification</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InherentIVIAttributesInstrumentIdentification1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Firmware_Revision</Name>
               <Location>InherentIVIAttributesInstrumentIdentification</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1050510, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"A string that contains the firmware revision information for the instrument you are currently using.
    "</Description>
            </Property>
            <Property>
               <Name>Manufacturer</Name>
               <Location>InherentIVIAttributesInstrumentIdentification</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1050511, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"A string that contains the name of the instrument manufacturer.
    "</Description>
            </Property>
            <Property>
               <Name>Model</Name>
               <Location>InherentIVIAttributesInstrumentIdentification</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1050512, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"A string that contains the model number of the current instrument.
    "</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>InherentIVIAttributesUserOptions</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InherentIVIAttributesUserOptions1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Cache</Name>
               <Location>InherentIVIAttributesUserOptions</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1050004);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1050004, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies whether to cache the value of attributes.  When caching is enabled, the instrument driver keeps track of the current instrument settings and avoids sending redundant commands to the instrument.  Thus, you can significantly increase execution speed.
    The instrument driver can choose to always cache or to never cache particular attributes regardless of the setting of this attribute.
    The default value is VI_TRUE.   Use niScope_InitWithOptions to override this value.
    "</Description>
            </Property>
            <Property>
               <Name>Interchange_Check</Name>
               <Location>InherentIVIAttributesUserOptions</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1050021);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1050021, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"NI-SCOPE does not generate interchange warnings and therefore ignores this attribute.
    "</Description>
            </Property>
            <Property>
               <Name>Query_Instrument_Status</Name>
               <Location>InherentIVIAttributesUserOptions</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1050003);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1050003, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies whether the instrument driver queries the instrument status after each operation.  Querying the instrument status is very useful for debugging.  After you validate your program, you can set this attribute to VI_FALSE to disable status checking and maximize performance
    The instrument driver can choose to ignore status checking for particular attributes regardless of the setting of this attribute.
    The default value is VI_TRUE.   Use the niScope_InitWithOptions function to override this value.
    "</Description>
            </Property>
            <Property>
               <Name>Range_Check</Name>
               <Location>InherentIVIAttributesUserOptions</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1050002);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1050002, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies whether to validate attribute values and function parameters.  If enabled, the instrument driver validates the parameters values that you pass to driver functions.  Range checking parameters is very useful for debugging.  After you validate your program, you can set this attribute to VI_FALSE to disable range checking and maximize performance.
    The default value is VI_TRUE.   Use the niScope_InitWithOptions function to override this value.
    "</Description>
            </Property>
            <Property>
               <Name>Record_Value_Coercions</Name>
               <Location>InherentIVIAttributesUserOptions</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1050006);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1050006, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies whether the IVI engine keeps a list of the value coercions it makes for ViInt32 and ViReal64 attributes.  You call Ivi_GetNextCoercionInfo to extract and delete the oldest coercion record from the list.
    The default value is VI_FALSE.   Use the niScope_InitWithOptions function to override this value.
    "</Description>
            </Property>
            <Property>
               <Name>Simulate</Name>
               <Location>InherentIVIAttributesUserOptions</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1050005);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1050005, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies whether or not to simulate instrument driver I/O operations.  If simulation is enabled, instrument driver functions perform range checking and call Ivi_GetAttribute and Ivi_SetAttribute functions, but they do not perform instrument I/O.  For output parameters that represent instrument data, the instrument driver functions return calculated values.
    The default value is VI_FALSE.   Use the niScope_InitWithOptions function to override this value.
    "</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>InstrumentCapabilities</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InstrumentCapabilities1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Maximum_Real_Time_Sample_Rate</Name>
               <Location>InstrumentCapabilities</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150073);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"Returns the maximum real time sample rate in Hz.
    "</Description>
            </Property>
            <Property>
               <Name>Maximum_RIS_Rate</Name>
               <Location>InstrumentCapabilities</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150074);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"Returns the maximum sample rate in RIS mode in Hz.
    "</Description>
            </Property>
            <Property>
               <Name>Memory_Size</Name>
               <Location>InstrumentCapabilities</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150069);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"Returns the total combined amount of onboard memory for all channels in bytes.
    "</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>IVIComplianceObsolete</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="IVIComplianceObsolete1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>errorquery</Name>
               <Location>IVIComplianceObsolete</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [ErrCode, ErrMessage] = errorquery(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ErrCode = libpointer('int32Ptr', 0);
ErrMessage = libpointer('int8Ptr', repmat(10, 1, 512));

status = calllib(libname, 'niScope_error_query', session, ErrCode, ErrMessage);

ErrCode = double(ErrCode.Value);
ErrMessage = strtrim(char(ErrMessage.Value));

if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt;niScope_error_query&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_error_query&lt;/h1&gt;&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus&amp;nbsp;niScope_error_query&amp;nbsp;(ViSession&amp;nbsp;vi, ViInt32*&amp;nbsp;errCode, ViChar[]&amp;nbsp;errMessage);&lt;/p&gt;&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&#xD;
&#xD;
&lt;table class="Borderless-Wide"&gt;&#xD;
&lt;tr&gt;&#xD;
&lt;td class="Icon"&gt;&lt;img src="note.gif"&gt;&lt;/td&gt;&#xD;
&lt;td&gt;&#xD;
&lt;strong&gt;Note&lt;/strong&gt;&amp;nbsp;&amp;nbsp;&#xD;
&#xD;
This function is included for compliance with the IviScope Class Specification.&#xD;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xD;
&lt;p class = "Body"&gt;Reads an error code and message from the error queue. National Instruments digitizers do not contain an error queue. Errors are reported as they occur. Therefore, this function does not detect errors.&lt;/p&gt;&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
            <Method>
               <Name>getchannelname</Name>
               <Location>IVIComplianceObsolete</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [ChannelString] = getchannelname(obj, Index, BufferSize)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelString = libpointer('int8Ptr', repmat(10, 1, 512));

status = calllib(libname, 'niScope_GetChannelName', session, Index, BufferSize, ChannelString);

ChannelString = strtrim(char(ChannelString.Value));

if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt;niScope_GetChannelName&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_GetChannelName&lt;/h1&gt;&#xD;
 &#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus&amp;nbsp;niScope_GetChannelName&amp;nbsp;(ViSession&amp;nbsp;vi, ViInt32&amp;nbsp;index, ViInt32&amp;nbsp;bufferSize, ViChar[]&amp;nbsp;channelString);&lt;/p&gt;&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&#xD;
&lt;table class="Borderless-Wide"&gt;&#xD;
&lt;tr&gt;&#xD;
&lt;td class="Icon"&gt;&lt;img src="note.gif"&gt;&lt;/td&gt;&#xD;
&lt;td&gt;&#xD;
&lt;strong&gt;Note&lt;/strong&gt;&amp;nbsp;&amp;nbsp;&#xD;
&#xD;
This function is included for compliance with the IviScope Class Specification.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xD;
&lt;p class = "Body"&gt;Returns the channel string that is in the channel table at an index you specify. Not applicable to National Instruments digitizers.&lt;/p&gt;&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
            <Method>
               <Name>geterror</Name>
               <Location>IVIComplianceObsolete</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [ErrorCode, Description] = geterror(obj, BufferSize)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ErrorCode = libpointer('int32Ptr', 0);
Description = libpointer('int8Ptr', repmat(10, 1, 512));

status = calllib(libname, 'niScope_GetError', session, ErrorCode, BufferSize, Description);

ErrorCode = double(ErrorCode.Value);
Description = strtrim(char(Description.Value));

if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt;niScope_GetError&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_GetError&lt;/h1&gt;&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus&amp;nbsp;niScope_GetError&amp;nbsp;(ViSession&amp;nbsp;vi, ViStatus*&amp;nbsp;errorCode, ViInt32&amp;nbsp;bufferSize, ViChar[]&amp;nbsp;description);&lt;/p&gt;&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&lt;table class="Borderless-Wide"&gt;&#xD;
&lt;tr&gt;&#xD;
&lt;td class="Icon"&gt;&lt;img src="note.gif"&gt;&lt;/td&gt;&#xD;
&lt;td&gt;&#xD;
&lt;strong&gt;Note&lt;/strong&gt;&amp;nbsp;&amp;nbsp;&#xD;
This function is included for compliance with the IviScope Class Specification.&#xD;
&#xD;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xD;
&#xD;
&#xD;
&lt;p class="Body"&gt;&#xD;
&#xD;
Reads an error code and message from the error queue. National Instruments digitizers do not contain an error queue. Errors are reported as they occur. Therefore, this function does not detect errors.&lt;/p&gt;&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>IVIComplianceObsoleteAcquisition</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="IVIComplianceObsoleteAcquisition1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>fetchwaveform</Name>
               <Location>IVIComplianceObsoleteAcquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Waveform, ActualPoints, InitialX, XIncrement] = fetchwaveform(obj, Channel, WaveformSize, Waveform)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];
Waveform = libpointer('doublePtr', Waveform);
ActualPoints = libpointer('int32Ptr', 0);
InitialX = libpointer('doublePtr', 0);
XIncrement = libpointer('doublePtr', 0);

status = calllib(libname, 'niScope_FetchWaveform', session, Channel, WaveformSize, Waveform, ActualPoints, InitialX, XIncrement);

Waveform = double(Waveform.Value);
ActualPoints = double(ActualPoints.Value);
InitialX = double(InitialX.Value);
XIncrement = double(XIncrement.Value);

if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt;niScope_FetchWaveform&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_FetchWaveform&lt;/h1&gt;&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus&amp;nbsp;niScope_FetchWaveform&amp;nbsp;(ViSession&amp;nbsp;vi, ViConstString&amp;nbsp;channel, ViInt32&amp;nbsp;waveformSize, ViReal64[]&amp;nbsp;waveform, ViInt32*&amp;nbsp;actualPoints, ViReal64*&amp;nbsp;initialX, ViReal64*&amp;nbsp;xIncrement);&lt;/p&gt;&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&#xD;
&#xD;
&lt;table class="Borderless-Wide"&gt;&#xD;
&lt;tr&gt;&#xD;
&lt;td class="Icon"&gt;&lt;img src="note.gif"&gt;&lt;/td&gt;&#xD;
&lt;td&gt;&#xD;
&lt;strong&gt;Note&lt;/strong&gt;&amp;nbsp;&amp;nbsp;This function is included for compliance with the IviScope Class Specification.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xD;
&#xD;
&#xD;
&#xD;
&#xD;
&lt;p class = "Body"&gt;Returns the waveform from a previously initiated acquisition that the digitizer  acquires for the channel you specify. &lt;/p&gt; &lt;p class = "Body"&gt;&lt;a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_InitiateAcquisition.html')"&gt;&lt;span class="Monospace"&gt;niScope_InitiateAcquisition&lt;/span&gt;&lt;/a&gt; starts an acquisition on the channels that you enable with &lt;a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ConfigureVertical.html')"&gt;&lt;span class="Monospace"&gt;niScope_ConfigureVertical&lt;/span&gt;&lt;/a&gt;.  The digitizer acquires waveforms for the enabled channels concurrently.  You use &lt;a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_AcquisitionStatus.html')"&gt;&lt;span class="Monospace"&gt;niScope_AcquisitionStatus&lt;/span&gt;&lt;/a&gt; to determine when the acquisition is complete.  You must call this function separately for each enabled channel to obtain the waveforms.&lt;/p&gt; &lt;p class = "Body"&gt;You can call &lt;a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ReadWaveform.html')"&gt;&lt;span class="Monospace"&gt;niScope_ReadWaveform&lt;/span&gt;&lt;/a&gt; instead of &lt;a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_InitiateAcquisition.html')"&gt;&lt;span class="Monospace"&gt;niScope_InitiateAcquisition&lt;/span&gt;&lt;/a&gt;.  &lt;a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ReadWaveform.html')"&gt;&lt;span class="Monospace"&gt;niScope_ReadWaveform&lt;/span&gt;&lt;/a&gt; starts an acquisition on all enabled channels, waits for the acquisition to complete, and returns the waveform for the channel you specify.  Call this function to obtain the waveforms for each of the remaining channels.&lt;/p&gt;&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
            <Method>
               <Name>isinvalidwfmelement</Name>
               <Location>IVIComplianceObsoleteAcquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [IsInvalid] = isinvalidwfmelement(obj, ElementValue)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
IsInvalid = libpointer('uint16Ptr', 0);

status = calllib(libname, 'niScope_IsInvalidWfmElement', session, ElementValue, IsInvalid);

IsInvalid = double(IsInvalid.Value);

if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt;niScope_IsInvalidWfmElement&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_IsInvalidWfmElement&lt;/h1&gt;&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus&amp;nbsp;niScope_IsInvalidWfmElement&amp;nbsp;(ViSession&amp;nbsp;vi, ViReal64&amp;nbsp;elementValue, ViBoolean*&amp;nbsp;isInvalid);&lt;/p&gt;&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&#xD;
&lt;table class="Borderless-Wide"&gt;&#xD;
&lt;tr&gt;&#xD;
&lt;td class="Icon"&gt;&lt;img src="note.gif"&gt;&lt;/td&gt;&#xD;
&lt;td&gt;&#xD;
&lt;strong&gt;Note&lt;/strong&gt;&amp;nbsp;&amp;nbsp;&#xD;
&#xD;
This function is included for compliance with the IviScope Class Specification.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p class = "Body"&gt;Determines whether a value you pass from the waveform array is invalid. After the read and fetch waveform functions execute, each element in the waveform array contains either a voltage or a value indicating that the instrument could not sample a voltage.&lt;/p&gt;&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
            <Method>
               <Name>readwaveform</Name>
               <Location>IVIComplianceObsoleteAcquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Waveform, ActualPoints, InitialX, XIncrement] = readwaveform(obj, Channel, WaveformSize, MaxTime, Waveform)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];
Waveform = libpointer('doublePtr', Waveform);
ActualPoints = libpointer('int32Ptr', 0);
InitialX = libpointer('doublePtr', 0);
XIncrement = libpointer('doublePtr', 0);

status = calllib(libname, 'niScope_ReadWaveform', session, Channel, WaveformSize, MaxTime, Waveform, ActualPoints, InitialX, XIncrement);

Waveform = double(Waveform.Value);
ActualPoints = double(ActualPoints.Value);
InitialX = double(InitialX.Value);
XIncrement = double(XIncrement.Value);

if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt;niScope_ReadWaveform&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_ReadWaveform&lt;/h1&gt;&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus&amp;nbsp;niScope_ReadWaveform&amp;nbsp;(ViSession&amp;nbsp;vi, ViConstString&amp;nbsp;channel, ViInt32&amp;nbsp;waveformSize, ViInt32&amp;nbsp;maxtime, ViReal64[]&amp;nbsp;waveform, ViInt32*&amp;nbsp;actualPoints, ViReal64*&amp;nbsp;initialX, ViReal64*&amp;nbsp;xIncrement);&lt;/p&gt;&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&#xD;
&lt;table class="Borderless-Wide"&gt;&#xD;
&lt;tr&gt;&#xD;
&lt;td class="Icon"&gt;&lt;img src="note.gif"&gt;&lt;/td&gt;&#xD;
&lt;td&gt;&#xD;
&lt;strong&gt;Note&lt;/strong&gt;&amp;nbsp;&amp;nbsp;&#xD;
&#xD;
This function is included for compliance with the IviScope Class Specification.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p class = "Body"&gt;Initiates an acquisition on the channels that you enable with  &lt;a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ConfigureVertical.html')"&gt;&lt;span class="Monospace"&gt;niScope_ConfigureVertical&lt;/span&gt;&lt;/a&gt;. This  function then waits for the acquisition to complete and returns the waveform for the channel you specify. Call  &lt;a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_FetchWaveform.html')"&gt;&lt;span class="Monospace"&gt;niScope_FetchWaveform&lt;/span&gt;&lt;/a&gt; to obtain the waveforms for each of the remaining enabled channels without initiating another acquisition.&lt;/p&gt; &lt;p class = "Body"&gt;Use &lt;a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ActualRecordLength.html')"&gt;&lt;span class="Monospace"&gt;niScope_ActualRecordLength&lt;/span&gt;&lt;/a&gt; to determine the required size for the &lt;strong&gt;waveform&lt;/strong&gt; array.&lt;/p&gt;&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>IVIComplianceObsoleteCoercionInfo</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="IVIComplianceObsoleteCoercionInfo1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>getnextcoercionrecord</Name>
               <Location>IVIComplianceObsoleteCoercionInfo</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Record] = getnextcoercionrecord(obj, BufferSize)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Record = libpointer('int8Ptr', repmat(10, 1, 512));

status = calllib(libname, 'niScope_GetNextCoercionRecord', session, BufferSize, Record);

Record = strtrim(char(Record.Value));

if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt;niScope_GetNextCoercionRecord&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_GetNextCoercionRecord&lt;/h1&gt;&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus&amp;nbsp;niScope_GetNextCoercionRecord&amp;nbsp;(ViSession&amp;nbsp;vi, ViInt32&amp;nbsp;bufferSize, ViChar[]&amp;nbsp;record);&lt;/p&gt;&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&#xD;
&lt;table class="Borderless-Wide"&gt;&#xD;
&lt;tr&gt;&#xD;
&lt;td class="Icon"&gt;&lt;img src="note.gif"&gt;&lt;/td&gt;&#xD;
&lt;td&gt;&#xD;
&lt;strong&gt;Note&lt;/strong&gt;&amp;nbsp;&amp;nbsp;&#xD;
&#xD;
This function is included for compliance with the IviScope Class Specification.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p class = "Body"&gt;Returns the coercion information associated with the IVI session. This function retrieves and clears the oldest instance in which the instrument driver coerced a value you specified to another value.&lt;/p&gt; &lt;p class = "Body"&gt;If you set &lt;a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_RECORD_COERCIONS.html')"&gt;&lt;span class="Monospace"&gt;NISCOPE_ATTR_RECORD_COERCIONS&lt;/span&gt;&lt;/a&gt; to &#xD;
&lt;span class="Monospace"&gt;&lt;span class="Monospace"&gt;VI_TRUE&lt;/span&gt;&lt;/span&gt;, NI-SCOPE keeps a list of all coercions it makes on  ViInt32  or  ViReal64&#xD;
 values that you pass to instrument driver functions. Use this function to retrieve information from that &#xD;
 list.&lt;/p&gt;&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>IVIComplianceObsoleteHorizontal</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="IVIComplianceObsoleteHorizontal1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>configureacquisitionrecord</Name>
               <Location>IVIComplianceObsoleteHorizontal</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configureacquisitionrecord(obj, TimeperRecord, MinNumPoints, AcquisitionStartTime)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'niScope_ConfigureAcquisitionRecord', session, TimeperRecord, MinNumPoints, AcquisitionStartTime);


if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt;niScope_ConfigureAcquisitionRecord&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_ConfigureAcquisitionRecord&lt;/h1&gt;&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus&amp;nbsp;niScope_ConfigureAcquisitionRecord&amp;nbsp;(ViSession&amp;nbsp;vi, ViReal64&amp;nbsp;timeperRecord, ViInt32&amp;nbsp;minNumPoints, ViReal64&amp;nbsp;acquisitionStartTime);&lt;/p&gt;&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&lt;p class="Body"&gt;This function is included for compliance with the IviScope Class Specification.&lt;/p&gt;&lt;p class = "Body"&gt;Configures the most commonly configured attributes of the instrument acquisition subsystem.&lt;/p&gt;&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>IVIComplianceObsoleteInterchangeabilityInfo</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="IVIComplianceObsoleteInterchangeabilityInfo1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>clearinterchangewarnings</Name>
               <Location>IVIComplianceObsoleteInterchangeabilityInfo</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function clearinterchangewarnings(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'niScope_ClearInterchangeWarnings', session);


if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt;niScope_ClearInterchangeWarnings&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_ClearInterchangeWarnings&lt;/h1&gt;&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus&amp;nbsp;niScope_ClearInterchangeWarnings&amp;nbsp;(ViSession&amp;nbsp;vi);&lt;/p&gt;&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&#xD;
&#xD;
&lt;table class="Borderless-Wide"&gt;&#xD;
&lt;tr&gt;&#xD;
&lt;td class="Icon"&gt;&lt;img src="note.gif"&gt;&lt;/td&gt;&#xD;
&lt;td&gt;&#xD;
&lt;strong&gt;Note&lt;/strong&gt;&amp;nbsp;&amp;nbsp;&#xD;
&#xD;
This function is included for compliance with the IviScope Class Specification.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xD;
&#xD;
&#xD;
&#xD;
&#xD;
&#xD;
&lt;p class = "Body"&gt;Clears the list of current interchange warnings.&lt;/p&gt;&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
            <Method>
               <Name>getnextinterchangewarning</Name>
               <Location>IVIComplianceObsoleteInterchangeabilityInfo</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [InterchangeWarning] = getnextinterchangewarning(obj, BufferSize)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
InterchangeWarning = libpointer('int8Ptr', repmat(10, 1, 512));

status = calllib(libname, 'niScope_GetNextInterchangeWarning', session, BufferSize, InterchangeWarning);

InterchangeWarning = strtrim(char(InterchangeWarning.Value));

if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt;niScope_GetNextInterchangeWarning&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_GetNextInterchangeWarning&lt;/h1&gt;&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus&amp;nbsp;niScope_GetNextInterchangeWarning&amp;nbsp;(ViSession&amp;nbsp;vi, ViInt32&amp;nbsp;bufferSize, ViChar[]&amp;nbsp;interchangeWarning);&lt;/p&gt;&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&#xD;
&lt;table class="Borderless-Wide"&gt;&#xD;
&lt;tr&gt;&#xD;
&lt;td class="Icon"&gt;&lt;img src="note.gif"&gt;&lt;/td&gt;&#xD;
&lt;td&gt;&#xD;
&lt;strong&gt;Note&lt;/strong&gt;&amp;nbsp;&amp;nbsp;&#xD;
This function is included for compliance with the IviScope Class Specification.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p class = "Body"&gt;Returns the interchangeability warnings associated with the IVI session. It retrieves and clears the oldest instance in which the class driver recorded an interchangeability warning. Interchangeability warnings indicate that using your &#xD;
application with a different instrument might cause different behavior. &lt;/p&gt;&#xD;
&#xD;
&lt;p class="Body"&gt;&#xD;
Use this function to retrieve interchangeability warnings. The driver performs interchangeability checking &#xD;
when &lt;a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_INTERCHANGE_CHECK.html')"&gt;&lt;span class="Monospace"&gt;NISCOPE_ATTR_INTERCHANGE_CHECK&lt;/span&gt;&lt;/a&gt; is set to &#xD;
&#xD;
&lt;span class="Monospace"&gt;VI_TRUE&lt;/span&gt;. The function returns an empty string in the &lt;strong&gt;interchangeWarning&lt;/strong&gt; parameter if no &#xD;
interchangeability warnings remain for the session.&lt;/p&gt;&lt;p class="Body"&gt;In general, the instrument driver generates interchangeability warnings when an attribute that affects the behavior of the instrument is in a state that you did not specify.&lt;/p&gt;&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
            <Method>
               <Name>resetinterchangecheck</Name>
               <Location>IVIComplianceObsoleteInterchangeabilityInfo</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function resetinterchangecheck(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'niScope_ResetInterchangeCheck', session);


if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt;niScope_ResetInterchangeCheck&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_ResetInterchangeCheck&lt;/h1&gt;&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus&amp;nbsp;niScope_ResetInterchangeCheck&amp;nbsp;(ViSession&amp;nbsp;vi);&lt;/p&gt;&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&#xD;
&lt;table class="Borderless-Wide"&gt;&#xD;
&lt;tr&gt;&#xD;
&lt;td class="Icon"&gt;&lt;img src="note.gif"&gt;&lt;/td&gt;&#xD;
&lt;td&gt;&#xD;
&lt;strong&gt;Note&lt;/strong&gt;&amp;nbsp;&amp;nbsp;&#xD;
&#xD;
This function is included for compliance with the IviScope Class Specification.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xD;
&#xD;
&lt;p class = "Body"&gt;When developing a complex test system that consists of multiple test modules, it is generally a good idea to design the test modules so that they can run in any order. To do so requires ensuring that each test module completely configures the state of each instrument it uses.&lt;/p&gt;&#xD;
 &lt;p class = "Body"&gt;If a particular test module does not completely configure the state of an instrument, the state of the instrument depends on the configuration from a previously executed test module. &lt;br&gt;If you execute the test modules in a different order, the behavior of the instrument and therefore the entire test module is likely to change.&lt;/p&gt; &lt;p class = "Body"&gt;This change in behavior is generally instrument-specific and represents an interchangeability problem. You can use this function to test for such cases. After you call this function, the interchangeability checking algorithms in the specific driver ignore all previous configuration operations. &lt;br&gt;By calling this function at the beginning of a test module, you can determine whether the test module has dependencies on the operation of previously executed test modules. &lt;/p&gt;&lt;p class = "Body"&gt;This function does not clear the interchangeability warnings from the list of previously recorded interchangeability warnings. If you want to guarantee that &lt;a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetNextInterchangeWarning.html')"&gt;&lt;span class="Monospace"&gt;niScope_GetNextInterchangeWarning&lt;/span&gt;&lt;/a&gt; only returns those interchangeability warnings that are generated after calling this function, you must clear the list of interchangeability warnings.&lt;/p&gt; &lt;p class = "Body"&gt;You can clear the interchangeability warnings list by repeatedly calling &lt;a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_GetNextInterchangeWarning.html')"&gt;&lt;span class="Monospace"&gt;niScope_GetNextInterchangeWarning&lt;/span&gt;&lt;/a&gt; until no more interchangeability warnings are returned. If you are not interested in the content of those warnings, you can call &lt;a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ClearInterchangeWarnings.html')"&gt;&lt;span class="Monospace"&gt;niScope_ClearInterchangeWarnings&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>IVIComplianceObsoleteMeasurement</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="IVIComplianceObsoleteMeasurement1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>configurereflevels</Name>
               <Location>IVIComplianceObsoleteMeasurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurereflevels(obj, Low, Mid, High)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'niScope_ConfigureRefLevels', session, Low, Mid, High);


if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt;niScope_ConfigureRefLevels&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_ConfigureRefLevels&lt;/h1&gt;&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus&amp;nbsp;niScope_ConfigureRefLevels&amp;nbsp;(ViSession&amp;nbsp;vi, ViReal64&amp;nbsp;low, ViReal64&amp;nbsp;mid, ViReal64&amp;nbsp;high);&lt;/p&gt;&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&lt;p class="Body"&gt;This function is included for compliance with the IviScope Class Specification.&lt;/p&gt;&lt;p class = "Body"&gt;Configures the reference levels for all channels of the digitizer. The levels may be set on a per channel basis by setting  &lt;a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_MEAS_CHAN_HIGH_REF_LEVEL.html')"&gt;&lt;span class="Monospace"&gt;NISCOPE_ATTR_MEAS_CHAN_HIGH_REF_LEVEL&lt;/span&gt;&lt;/a&gt;, &#xD;
&lt;a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_MEAS_CHAN_LOW_REF_LEVEL.html')"&gt;&lt;span class="Monospace"&gt;NISCOPE_ATTR_MEAS_CHAN_LOW_REF_LEVEL&lt;/span&gt;&#xD;
&lt;/a&gt;, and &lt;a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_MEAS_CHAN_MID_REF_LEVEL.html')"&gt;&lt;span class="Monospace"&gt;NISCOPE_ATTR_MEAS_CHAN_MID_REF_LEVEL&lt;/span&gt;.&lt;/a&gt; &lt;/p&gt;&#xD;
&lt;p class = "Body"&gt;This function configures the reference levels for waveform measurements. &#xD;
Call this function before calling &lt;a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_FetchMeasurement.html')"&gt;&lt;span class="Monospace"&gt;niScope_FetchMeasurement&lt;/span&gt;&lt;/a&gt; to take a rise time, fall time, width negative, width positive, duty cycle negative, or duty cycle positive measurement.&lt;/p&gt;&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
            <Method>
               <Name>fetchwaveformmeasurement</Name>
               <Location>IVIComplianceObsoleteMeasurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Measurement] = fetchwaveformmeasurement(obj, Channel, MeasFunction)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];
Measurement = libpointer('doublePtr', 0);

status = calllib(libname, 'niScope_FetchWaveformMeasurement', session, Channel, MeasFunction, Measurement);

Measurement = double(Measurement.Value);

if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt;niScope_FetchWaveformMeasurement&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_FetchWaveformMeasurement&lt;/h1&gt;&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus&amp;nbsp;niScope_FetchWaveformMeasurement&amp;nbsp;(ViSession&amp;nbsp;vi, ViConstString&amp;nbsp;channel, ViInt32&amp;nbsp;measFunction, ViReal64*&amp;nbsp;measurement);&lt;/p&gt;&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&#xD;
&#xD;
&lt;table class="Borderless-Wide"&gt;&#xD;
&lt;tr&gt;&#xD;
&lt;td class="Icon"&gt;&lt;img src="note.gif"&gt;&lt;/td&gt;&#xD;
&lt;td&gt;&#xD;
&lt;strong&gt;Notes&lt;/strong&gt;&amp;nbsp;&amp;nbsp;This function is included for compliance with the IviScope Class Specification.&#xD;
&#xD;
&lt;p class ="Body"&gt;&#xD;
&#xD;
 You can use &lt;a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ReadWaveformMeasurement.html')"&gt;&lt;span class="Monospace"&gt;niScope_ReadWaveformMeasurement&lt;/span&gt;&lt;/a&gt; &#xD;
instead of this function. &lt;a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ReadWaveformMeasurement.html')"&gt;&lt;span class="Monospace"&gt;niScope_ReadWaveformMeasurement&lt;/span&gt;&lt;/a&gt; starts an acquisition on all &#xD;
enabled channels, waits for the acquisition to complete, obtains a waveform measurement on the specified &#xD;
channel, and returns the waveform for the specified channel. Call this function separately to obtain any &#xD;
other waveform measurements on a specific channel.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xD;
&#xD;
&#xD;
&#xD;
&#xD;
&lt;p class = "Body"&gt;Configure the appropriate reference &#xD;
levels before calling this function. You can configure the low, mid, and high references by  setting the &#xD;
following attributes:&lt;/p&gt; &lt;p class = "Body"&gt;&lt;a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_MEAS_HIGH_REF.html')"&gt;&lt;span class="Monospace"&gt;NISCOPE_ATTR_MEAS_HIGH_REF&lt;/span&gt;&lt;/a&gt; &lt;br&gt;&lt;a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_MEAS_LOW_REF.html')"&gt;&lt;span class="Monospace"&gt;NISCOPE_ATTR_MEAS_LOW_REF&lt;/span&gt;&lt;/a&gt; &lt;br&gt;&lt;a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_MEAS_MID_REF.html')"&gt;&lt;span class="Monospace"&gt;NISCOPE_ATTR_MEAS_MID_REF&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
            <Method>
               <Name>readwaveformmeasurement</Name>
               <Location>IVIComplianceObsoleteMeasurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Measurement] = readwaveformmeasurement(obj, Channel, MeasFunction, MaxTime)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];
Measurement = libpointer('doublePtr', 0);

status = calllib(libname, 'niScope_ReadWaveformMeasurement', session, Channel, MeasFunction, MaxTime, Measurement);

Measurement = double(Measurement.Value);

if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt;niScope_ReadWaveformMeasurement&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_ReadWaveformMeasurement&lt;/h1&gt;&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus&amp;nbsp;niScope_ReadWaveformMeasurement&amp;nbsp;(ViSession&amp;nbsp;vi, ViConstString&amp;nbsp;channel, ViInt32&amp;nbsp;measFunction, ViInt32&amp;nbsp;maxTime, ViReal64*&amp;nbsp;measurement);&lt;/p&gt;&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&#xD;
&lt;table class="Borderless-Wide"&gt;&#xD;
&lt;tr&gt;&#xD;
&lt;td class="Icon"&gt;&lt;img src="note.gif"&gt;&lt;/td&gt;&#xD;
&lt;td&gt;&#xD;
&lt;strong&gt;Note&lt;/strong&gt;&amp;nbsp;&amp;nbsp;&#xD;
&#xD;
This function is included for compliance with the IviScope Class Specification.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xD;
&lt;p class = "Body"&gt;Initiates a new waveform acquisition and returns a specified waveform measurement from a specific channel.&lt;/p&gt; &lt;p class = "Body"&gt;This function initiates an acquisition on the channels that you enable with the &lt;a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ConfigureVertical.html')"&gt;&lt;span class="Monospace"&gt;niScope_ConfigureVertical&lt;/span&gt;&lt;/a&gt; function. It then waits for the acquisition to complete, obtains a waveform measurement on the channel you specify, and returns the measurement value. You specify a particular measurement type, such as rise time, frequency, or voltage peak-to-peak. &lt;/p&gt;&lt;p class = "Body"&gt;You can call the &lt;a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_FetchWaveformMeasurement.html')"&gt;&lt;span class="Monospace"&gt;niScope_FetchWaveformMeasurement&lt;/span&gt;&lt;/a&gt; function separately to obtain any other waveform measurement on a specific channel without initiating another acquisition. &lt;/p&gt;&lt;p class = "Body"&gt;You must configure the appropriate reference levels before calling this function. Configure the low, mid, and high references by calling &lt;a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ConfigureRefLevels.html')"&gt;&lt;span class="Monospace"&gt;niScope_ConfigureRefLevels&lt;/span&gt;&lt;/a&gt; or by setting the following attributes:&lt;/p&gt; &lt;p class = "Body"&gt;&lt;a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_MEAS_HIGH_REF.html')"&gt;&lt;span class="Monospace"&gt;NISCOPE_ATTR_MEAS_HIGH_REF&lt;/span&gt;&lt;/a&gt; &lt;br&gt;&lt;a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_MEAS_LOW_REF.html')"&gt;&lt;span class="Monospace"&gt;NISCOPE_ATTR_MEAS_LOW_REF&lt;/span&gt;&lt;/a&gt; &lt;br&gt;&lt;a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_MEAS_MID_REF.html')"&gt;&lt;span class="Monospace"&gt;NISCOPE_ATTR_MEAS_MID_REF&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>IVIComplianceObsoleteTrigger</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="IVIComplianceObsoleteTrigger1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>configureedgetriggersource</Name>
               <Location>IVIComplianceObsoleteTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configureedgetriggersource(obj, Source, Level, Slope)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Source = [double(Source) 0];

status = calllib(libname, 'niScope_ConfigureEdgeTriggerSource', session, Source, Level, Slope);


if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt;niScope_ConfigureEdgeTriggerSource&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_ConfigureEdgeTriggerSource&lt;/h1&gt;&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus&amp;nbsp;niScope_ConfigureEdgeTriggerSource&amp;nbsp;(ViSession&amp;nbsp;vi, ViConstString&amp;nbsp;source, ViReal64&amp;nbsp;level, ViInt32&amp;nbsp;slope);&lt;/p&gt;&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&#xD;
&lt;table class="Borderless-Wide"&gt;&#xD;
&lt;tr&gt;&#xD;
&lt;td class="Icon"&gt;&lt;img src="note.gif"&gt;&lt;/td&gt;&#xD;
&lt;td&gt;&#xD;
&lt;strong&gt;Note&lt;/strong&gt;&amp;nbsp;&amp;nbsp;&#xD;
&#xD;
This function is included for compliance with the IviScope Class Specification.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xD;
&lt;p class = "Body"&gt;Sets the edge triggering attributes. An edge trigger occurs when the trigger signal specified with the source parameter passes through the voltage threshold specified with the &#xD;
level parameter and has the slope specified with the slope parameter.&lt;/p&gt;&lt;p class = "Body"&gt;This function affects instrument behavior only if the triggerType is &lt;span class="Monospace"&gt;NISCOPE_VAL_EDGE&lt;/span&gt;.  Set the trigger type and trigger coupling before calling this function.&lt;/p&gt;&lt;p class = "Body"&gt;If the trigger source is one of the analog input channels, you must configure the vertical range, vertical offset, vertical coupling, probe attenuation, and the maximum input frequency before calling this function.&lt;/p&gt;&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
            <Method>
               <Name>configuretrigger</Name>
               <Location>IVIComplianceObsoleteTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuretrigger(obj, TriggerType, Holdoff)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'niScope_ConfigureTrigger', session, TriggerType, Holdoff);


if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt;niScope_ConfigureTrigger&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_ConfigureTrigger&lt;/h1&gt;&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus&amp;nbsp;niScope_ConfigureTrigger&amp;nbsp;(ViSession&amp;nbsp;vi, ViInt32&amp;nbsp;triggerType, ViReal64&amp;nbsp;holdoff);&lt;/p&gt;&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&lt;table class="Borderless"&gt;&#xD;
&lt;tr&gt;&#xD;
&lt;td class="Icon"&gt;&lt;img src="note.gif" alt="Note"&gt;&lt;/td&gt;&#xD;
&lt;td&gt;&lt;strong&gt;Note&lt;/strong&gt;&amp;nbsp;&amp;nbsp;&#xD;
This function is included for compliance with the IviScope Class Specification.&lt;/td&gt;&#xD;
&lt;/tr&gt;&#xD;
&lt;/table&gt;&#xD;
&#xD;
&#xD;
&#xD;
&lt;p class = "Body"&gt;Configures the common attributes of the trigger subsystem.&lt;/p&gt;&lt;p class = "Body"&gt;When you use &lt;a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ReadWaveform.html')"&gt;&lt;span class="Monospace"&gt;niScope_ReadWaveform&lt;/span&gt;&lt;/a&gt;, the instrument waits for a trigger. You specify the type of trigger for which the instrument waits with the Trigger Type parameter.&lt;/p&gt;&lt;p class = "Body"&gt;If the instrument requires multiple waveform acquisitions to build a complete waveform, it waits for the length of time you specify with the &lt;strong&gt;holdoff&lt;/strong&gt; parameter to elapse since the previous trigger. The instrument then waits for the next trigger.&lt;/p&gt;&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
            <Method>
               <Name>configuretriggercoupling</Name>
               <Location>IVIComplianceObsoleteTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuretriggercoupling(obj, Coupling)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'niScope_ConfigureTriggerCoupling', session, Coupling);


if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt;niScope_ConfigureTriggerCoupling&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_ConfigureTriggerCoupling&lt;/h1&gt;&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus&amp;nbsp;niScope_ConfigureTriggerCoupling&amp;nbsp;(ViSession&amp;nbsp;vi, ViInt32&amp;nbsp;coupling);&lt;/p&gt;&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&lt;table class="Borderless-Wide"&gt;&#xD;
&lt;tr&gt;&#xD;
&lt;td class="Icon"&gt;&lt;img src="note.gif"&gt;&lt;/td&gt;&#xD;
&lt;td&gt;&#xD;
&lt;strong&gt;Note&lt;/strong&gt;&amp;nbsp;&amp;nbsp;This function is included for compliance with the IviScope Class Specification.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p class = "Body"&gt;Sets the trigger coupling attribute.&lt;/p&gt;&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
            <Method>
               <Name>configuretvtriggerlinenumber</Name>
               <Location>IVIComplianceObsoleteTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuretvtriggerlinenumber(obj, LineNumber)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'niScope_ConfigureTVTriggerLineNumber', session, LineNumber);


if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt;niScope_ConfigureTVTriggerLineNumber&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_ConfigureTVTriggerLineNumber&lt;/h1&gt;&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus&amp;nbsp;niScope_ConfigureTVTriggerLineNumber&amp;nbsp;(ViSession&amp;nbsp;vi, ViInt32&amp;nbsp;lineNumber);&lt;/p&gt;&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&lt;p class="Body"&gt;This function is included for compliance with the IviScope Class Specification.&lt;/p&gt;&lt;p class = "Body"&gt;Configures the TV line upon which the instrument triggers. The line number is absolute and not relative to the field of the TV signal.&lt;/p&gt;&lt;p class = "Body"&gt;This function affects instrument behavior only if the trigger type is set to &lt;span class="Monospace"&gt;NISCOPE_VAL_TV_TRIGGER&lt;/span&gt;  and the TV trigger event is set to  &lt;span class="Monospace"&gt;NISCOPE_VAL_TV_EVENT_LINE_NUMBER&lt;/span&gt;. Call  &lt;a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ConfigureTVTriggerSource.html')"&gt;&lt;span class="Monospace"&gt;niScope_ConfigureTVTriggerSource&lt;/span&gt;&lt;/a&gt;  to set the TV trigger event before calling this function.&lt;/p&gt;&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
            <Method>
               <Name>configuretvtriggersource</Name>
               <Location>IVIComplianceObsoleteTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuretvtriggersource(obj, Source, SignalFormat, Event, Polarity)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Source = [double(Source) 0];

status = calllib(libname, 'niScope_ConfigureTVTriggerSource', session, Source, SignalFormat, Event, Polarity);


if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt;niScope_ConfigureTVTriggerSource&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_ConfigureTVTriggerSource&lt;/h1&gt;&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus&amp;nbsp;niScope_ConfigureTVTriggerSource&amp;nbsp;(ViSession&amp;nbsp;vi, ViConstString&amp;nbsp;source, ViInt32&amp;nbsp;signalFormat, ViInt32&amp;nbsp;event, ViInt32&amp;nbsp;polarity);&lt;/p&gt;&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&#xD;
&#xD;
&#xD;
&lt;table class="Borderless-Wide"&gt;&#xD;
&lt;tr&gt;&#xD;
&lt;td class="Icon"&gt;&lt;img src="note.gif"&gt;&lt;/td&gt;&#xD;
&lt;td&gt;&#xD;
&lt;strong&gt;Note&lt;/strong&gt;&amp;nbsp;&amp;nbsp;This function is included for compliance with the IviScope Class Specification.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xD;
&lt;p class = "Body"&gt;Configures the instrument for TV triggering. It configures the TV signal format, the event,  and the signal polarity.&lt;/p&gt;&lt;p class = "Body"&gt;This function affects instrument behavior &#xD;
only if the trigger type is &lt;span class="Monospace"&gt;NISCOPE_VAL_TV_TRIGGER&lt;/span&gt;. Set the trigger type &#xD;
and trigger coupling before calling this function.&lt;/p&gt;&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
            <Method>
               <Name>sendswtrigger</Name>
               <Location>IVIComplianceObsoleteTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function sendswtrigger(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'niScope_SendSWTrigger', session);


if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt;niScope_SendSWTrigger&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_SendSWTrigger&lt;/h1&gt;&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus&amp;nbsp;niScope_SendSWTrigger&amp;nbsp;(ViSession&amp;nbsp;vi);&lt;/p&gt;&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&#xD;
&lt;table class="Borderless-Wide"&gt;&#xD;
&lt;tr&gt;&#xD;
&lt;td class="Icon"&gt;&lt;img src="note.gif"&gt;&lt;/td&gt;&#xD;
&lt;td&gt;&#xD;
&lt;strong&gt;Note&lt;/strong&gt;&amp;nbsp;&amp;nbsp;&#xD;
&#xD;
This function is included for compliance with the IviScope Class Specification. Consider using &lt;a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_SendSoftwareTriggerEdge.html')"&gt;&#xD;
&lt;span class="Monospace"&gt;niScope_SendSoftwareTriggerEdge&lt;/span&gt;&lt;/a&gt; instead.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xD;
&#xD;
&#xD;
&lt;p class = "Body"&gt;Sends a &#xD;
command to trigger the digitizer.  Call this function after you call &lt;a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ConfigureTriggerSoftware.html')"&gt;&lt;span class="Monospace"&gt;niScope_ConfigureTriggerSoftware&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>IVIComplianceObsoleteVertical</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="IVIComplianceObsoleteVertical1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>configurechannel</Name>
               <Location>IVIComplianceObsoleteVertical</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurechannel(obj, Channel, Range, Offset, Coupling, ProbeAttenuation, Enabled)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'niScope_ConfigureChannel', session, Channel, Range, Offset, Coupling, ProbeAttenuation, Enabled);


if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt;niScope_ConfigureChannel&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_ConfigureChannel&lt;/h1&gt;&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus&amp;nbsp;niScope_ConfigureChannel&amp;nbsp;(ViSession&amp;nbsp;vi, ViConstString&amp;nbsp;channel, ViReal64&amp;nbsp;range, ViReal64&amp;nbsp;offset, ViInt32&amp;nbsp;coupling, ViReal64&amp;nbsp;probeAttenuation, ViBoolean&amp;nbsp;enabled);&lt;/p&gt;&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&lt;p class="Body"&gt;This function is included for compliance with the IviScope Class Specification.&lt;/p&gt;&lt;p class = "Body"&gt;Configures the most commonly configured attributes of the instrument's channel subsystem.&lt;/p&gt;&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>Measurement</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Measurement1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>addwaveformprocessing</Name>
               <Location>Measurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function addwaveformprocessing(obj, ChannelList, MeasFunction)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelList = [double(ChannelList) 0];

status = calllib(libname, 'niScope_AddWaveformProcessing', session, ChannelList, MeasFunction);


if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt;niScope_AddWaveformProcessing&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_AddWaveformProcessing&lt;/h1&gt;&#xD;
&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus niScope_AddWaveformProcessing (ViSession vi, ViConstString channelList, ViInt32 measFunction);&lt;/p&gt;&#xD;
&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&#xD;
&lt;p class="Body"&gt;Adds one measurement to the list of processing steps that are completed before the measurement. The processing is added on a per channel basis, and the processing measurements are completed in the same order they are registered. All measurement library parameters&amp;#8212;the attributes starting with &lt;span class="Monospace"&gt;NISCOPE_ATTR_MEAS&lt;/span&gt;&amp;#8212;are cached at the time of registering the processing, and this set of parameters is used during the processing step. The processing measurements are streamed, so the result of the first processing step is used as the input for the next step. The processing is done before any other measurements. &#xD;
&lt;/p&gt;&#xD;
&#xD;
&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
            <Method>
               <Name>clearwaveformmeasurementstats</Name>
               <Location>Measurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function clearwaveformmeasurementstats(obj, ChannelList, ClearableMeasurementFunction)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelList = [double(ChannelList) 0];

status = calllib(libname, 'niScope_ClearWaveformMeasurementStats', session, ChannelList, ClearableMeasurementFunction);


if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt;niScope_ClearWaveformMeasurementStats&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_ClearWaveformMeasurementStats&#xD;
&lt;/h1&gt;&#xD;
&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus niScope_ClearWaveformMeasurementStats (ViSession vi, ViConstString channelList, ViInt32 clearableMeasurementFunction);&lt;/p&gt;&#xD;
&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&#xD;
&lt;p class="Body"&gt;Clears the waveform stats on the channel and measurement you specify. If you want &#xD;
to clear all of the measurements, use &lt;span class="Monospace"&gt;NISCOPE_VAL_ALL_MEASUREMENTS&lt;/span&gt; in the &#xD;
&lt;strong&gt;clearableMeasurementFunction&lt;/strong&gt; parameter.&#xD;
&lt;/p&gt;&#xD;
&lt;p class="Body"&gt;Every time a measurement is called, the statistics information is updated, including the min, max, mean, standard deviation, and number of updates. This information is fetched with &lt;a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_FetchMeasurementStats.html')"&gt;&lt;span class="Monospace"&gt;niScope_FetchMeasurementStats&lt;/span&gt;&lt;/a&gt;. The multi-acquisition array measurements are also cleared with this function.&#xD;
&lt;/p&gt;&#xD;
&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
            <Method>
               <Name>clearwaveformprocessing</Name>
               <Location>Measurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function clearwaveformprocessing(obj, ChannelList)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelList = [double(ChannelList) 0];

status = calllib(libname, 'niScope_ClearWaveformProcessing', session, ChannelList);


if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt;niScope_ClearWaveformProcessing&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_ClearWaveformProcessing&lt;/h1&gt;&#xD;
&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus niScope_ClearWaveformProcessing (ViSession vi, ViConstString channelList);&lt;/p&gt;&#xD;
&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&#xD;
&lt;p class="Body"&gt;Clears the list of processing steps assigned to the given channel. The processing is added using the &lt;a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_AddWaveformProcessing.html')"&gt;&lt;span class="Monospace"&gt;niScope_AddWaveformProcessing&lt;/span&gt;&lt;/a&gt; function, where the processing steps are completed in the same order in which they are registered. The processing measurements are streamed, so the result of the first processing step is used as the input for the next step. The processing is also done before any other measurements. &#xD;
&lt;/p&gt;&#xD;
&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
            <Method>
               <Name>fetcharraymeasurement</Name>
               <Location>Measurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [MeasWfm, WfmInfo] = fetcharraymeasurement(obj, ChannelList, Timeout, ArrayMeasFunction, MeasWfmSize, MeasWfm, WfmInfo)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelList = [double(ChannelList) 0];
MeasWfm = libpointer('doublePtr', MeasWfm);
WfmInfo = libstruct('niScope_wfmInfo', WfmInfo);

status = calllib(libname, 'niScope_FetchArrayMeasurement', session, ChannelList, Timeout, ArrayMeasFunction, MeasWfmSize, MeasWfm, WfmInfo);

MeasWfm = double(MeasWfm.Value);
WfmInfo = WfmInfo;

if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt; niScope_FetchArrayMeasurement&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;script src="web.js" type="text/javascript"&gt;&lt;/script&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_FetchArrayMeasurement&lt;/h1&gt;&#xD;
&#xD;
&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus niScope_FetchArrayMeasurement (ViSession vi, ViConstString channelList, ViReal64 timeout, ViInt32 arrayMeasFunction, ViInt32 measWfmSize, ViReal64*  measWfm, struct niScope_wfmInfo* wfmInfo);&lt;/p&gt; &#xD;
&#xD;
&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&#xD;
&#xD;
&lt;p class="Body"&gt;Obtains a waveform from the digitizer and returns the specified measurement array. This function may return multiple waveforms depending on the number of channels, the acquisition type, and the number of records you specify.&#xD;
&lt;/p&gt;&#xD;
&#xD;
&#xD;
&#xD;
&#xD;
&lt;table class="Borderless"&gt;&lt;tr&gt;&lt;td class="Icon"&gt;&lt;img src="note.gif"&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;Note&lt;/strong&gt;&amp;nbsp;&amp;nbsp;Some functionality, such as time stamping, is not supported in all digitizers.  Refer to &lt;a href="javascript:LaunchHelp('Digitizers.chm::/Features_Supported_Main.html')"&gt;Features Supported by Device&lt;/a&gt;  for more information. &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xD;
&#xD;
&#xD;
&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
            <Method>
               <Name>fetchmeasurement</Name>
               <Location>Measurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Result] = fetchmeasurement(obj, ChannelList, Timeout, ScalarMeasFunction, Result)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelList = [double(ChannelList) 0];
Result = libpointer('doublePtr', Result);

status = calllib(libname, 'niScope_FetchMeasurement', session, ChannelList, Timeout, ScalarMeasFunction, Result);

Result = double(Result.Value);

if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt; niScope_FetchMeasurement&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_FetchMeasurement&lt;/h1&gt;&#xD;
&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus niScope_FetchMeasurement (ViSession vi, ViConstString channelList, ViReal64 timeout, ViInt32 scalarMeasFunction, ViReal64* result);&lt;/p&gt;&#xD;
&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&#xD;
&lt;p class="Body"&gt;Fetches a waveform from the digitizer and performs the specified waveform measurement. &#xD;
&#xD;
Refer to  &lt;a href="javascript:LaunchHelp('Digitizers.chm::/Using_Fetch_Functions.html')"&gt;Using Fetch Functions&lt;/a&gt;  for more information. &lt;/p&gt;&#xD;
&#xD;
&lt;p class="Body"&gt;Many of the measurements use the low, mid, and high reference levels. You configure the low, mid, and high references  by using &lt;a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_MEAS_CHAN_LOW_REF_LEVEL.html')"&gt;&lt;span class="Monospace"&gt;NISCOPE_ATTR_MEAS_CHAN_LOW_REF_LEVEL&lt;/span&gt;&lt;/A&gt;, &lt;a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_MEAS_CHAN_MID_REF_LEVEL.html')"&gt;&lt;span class="Monospace"&gt;NISCOPE_ATTR_MEAS_CHAN_MID_REF_LEVEL&lt;/span&gt;&lt;/A&gt;, and &lt;a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_MEAS_CHAN_HIGH_REF_LEVEL.html')"&gt;&lt;span class="Monospace"&gt;NISCOPE_ATTR_MEAS_CHAN_HIGH_REF_LEVEL&lt;/span&gt;&lt;/A&gt; to set each channel differently. &lt;/p&gt;&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
            <Method>
               <Name>fetchmeasurementstats</Name>
               <Location>Measurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Result, Mean, Stdev, Min, Max, NumInStats] = fetchmeasurementstats(obj, ChannelList, Timeout, ScalarMeasFunction, Result, Mean, Stdev, Min, Max, NumInStats)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelList = [double(ChannelList) 0];
Result = libpointer('doublePtr', Result);
Mean = libpointer('doublePtr', Mean);
Stdev = libpointer('doublePtr', Stdev);
Min = libpointer('doublePtr', Min);
Max = libpointer('doublePtr', Max);
NumInStats = libpointer('int32Ptr', NumInStats);

status = calllib(libname, 'niScope_FetchMeasurementStats', session, ChannelList, Timeout, ScalarMeasFunction, Result, Mean, Stdev, Min, Max, NumInStats);

Result = double(Result.Value);
Mean = double(Mean.Value);
Stdev = double(Stdev.Value);
Min = double(Min.Value);
Max = double(Max.Value);
NumInStats = double(NumInStats.Value);

if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt; niScope_FetchMeasurementStats&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_FetchMeasurementStats&lt;/h1&gt;&#xD;
&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus niScope_FetchMeasurementStats (ViSession vi, ViConstString channelList, ViReal64 timeout, ViInt32 scalarMeasFunction, ViReal64* result, ViReal64* mean, ViReal64* stdev, ViReal64* min, ViReal64* max, ViInt32*numInStats);&lt;/p&gt;&#xD;
&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&#xD;
&lt;p class="Body"&gt;Obtains a waveform measurement and returns the measurement value. This function may return multiple statistical results depending on the number of channels, the acquisition type, and the number of records you specify.&#xD;
&lt;/p&gt;&#xD;
&#xD;
&#xD;
&lt;p class="Body"&gt;You specify a particular measurement type, such as rise time, frequency, or voltage peak-to-peak. The waveform on which the digitizer calculates the waveform measurement is from an acquisition that you previously initiated. The statistics for the specified measurement function are returned, where the statistics are updated once every acquisition when the specified measurement is fetched by any of the Fetch Measurement functions. If a Fetch Measurement function has not been called, this function fetches the data on which to perform the measurement. The statistics are cleared by calling &lt;a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_ClearWaveformMeasurementStats.html')"&gt;&lt;span class="Monospace"&gt;niScope_ClearWaveformMeasurementStats&lt;/span&gt;&lt;/a&gt;. Refer to  &lt;a href="javascript:LaunchHelp('Digitizers.chm::/Using_Fetch_Functions.html')"&gt;Using Fetch Functions&lt;/a&gt; for more information on incorporating fetch functions in your application.&#xD;
&lt;/p&gt;&#xD;
&lt;p class="Body"&gt;Many of the measurements use the low, mid, and high reference levels. You configure the low, mid, and high references with &lt;a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_MEAS_CHAN_LOW_REF_LEVEL.html')"&gt;&lt;span class="Monospace"&gt;NISCOPE_ATTR_MEAS_CHAN_LOW_REF_LEVEL&lt;/span&gt;&lt;/A&gt;, &lt;a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_MEAS_CHAN_MID_REF_LEVEL.html')"&gt;&lt;span class="Monospace"&gt;NISCOPE_ATTR_MEAS_CHAN_MID_REF_LEVEL&lt;/span&gt;&lt;/A&gt;, and &lt;a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_MEAS_CHAN_HIGH_REF_LEVEL.html')"&gt;&lt;span class="Monospace"&gt;NISCOPE_ATTR_MEAS_CHAN_HIGH_REF_LEVEL&lt;/span&gt;&lt;/A&gt; to set each channel differently. &lt;/p&gt;&#xD;
&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
            <Method>
               <Name>readmeasurement</Name>
               <Location>Measurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Result] = readmeasurement(obj, ChannelList, Timeout, ScalarMeasFunction, Result)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelList = [double(ChannelList) 0];
Result = libpointer('doublePtr', Result);

status = calllib(libname, 'niScope_ReadMeasurement', session, ChannelList, Timeout, ScalarMeasFunction, Result);

Result = double(Result.Value);

if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt; niScope_ReadMeasurement&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_ReadMeasurement&lt;/h1&gt;&#xD;
&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus_VI_FUNC niScope_ReadMeasurement (ViSession vi,&#xD;
                                           ViConstString channelList,&#xD;
                                           ViReal64 timeout,&#xD;
                                           ViInt32 scalarMeasFunction,&#xD;
                                           ViReal64*  result);&#xD;
										  &lt;/p&gt;&#xD;
&#xD;
&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&#xD;
&lt;p class="Body"&gt;Initiates an acquisition, waits for it to complete, and performs the specified waveform measurement for a single channel and record or for multiple channels and records.&lt;/p&gt;&#xD;
&#xD;
&#xD;
&lt;p class="Body"&gt;Refer to  &lt;a href="javascript:LaunchHelp('Digitizers.chm::/Using_Fetch_Functions.html')"&gt;Using Fetch Functions&lt;/a&gt;  for more information. &lt;/p&gt;&#xD;
&#xD;
&lt;p class="Body"&gt;Many of the measurements use the low, mid, and high reference levels. You configure the low, mid, and high references  by using &#xD;
&lt;a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_MEAS_CHAN_LOW_REF_LEVEL.html')"&gt;&lt;span class="Monospace"&gt;NISCOPE_ATTR_MEAS_CHAN_LOW_REF_LEVEL&lt;/span&gt;&lt;/A&gt;, &#xD;
&lt;a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_MEAS_CHAN_MID_REF_LEVEL.html')"&gt;&lt;span class="Monospace"&gt;NISCOPE_ATTR_MEAS_CHAN_MID_REF_LEVEL&lt;/span&gt;&lt;/A&gt;, &#xD;
and &lt;a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviNISCOPE_ATTR_MEAS_CHAN_HIGH_REF_LEVEL.html')"&gt;&lt;span class="Monospace"&gt;NISCOPE_ATTR_MEAS_CHAN_HIGH_REF_LEVEL&lt;/span&gt;&lt;/A&gt; to set each channel differently.&lt;/p&gt;&#xD;
&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>OnboardSignalProcesingDDC</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="OnboardSignalProcesingDDC1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Data_Processing_Mode</Name>
               <Location>OnboardSignalProcesingDDC</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150304);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150304 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"The way in which data is processed by the DDC block.

Valid Values:
Real (0)
Complex (1)

Default Value: Complex
   "</Description>
            </Property>
            <Property>
               <Name>DDC_Center_Frequency</Name>
               <Location>OnboardSignalProcesingDDC</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150303);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150303 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"The frequency at which the DDC block frequency translates the input data.

Default Value: 10 MHz
   "</Description>
            </Property>
            <Property>
               <Name>DDC_Enabled</Name>
               <Location>OnboardSignalProcesingDDC</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1150300);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1150300, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Enables/disables the Digital Down Converter (DDC) block of the digitizer. When the DDC block is disabled, all DDC-related properties are disabled and have no effect on the acquired signal.
Default Value: VI_FALSE
   "</Description>
            </Property>
            <Property>
               <Name>Fetch_Interleaved_IQ_Data</Name>
               <Location>OnboardSignalProcesingDDC</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1150311);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1150311, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Enables/disables interleaving of the I and Q data.  When disabled, the traditional niScope_Fetch() functions will return the I waveform for each acquisition followed by the Q waveform.  When enabled, the I and Q data are interleaved into a single waveform.  In the interleaving case, you must allocate twice as many elements in the array as number of samples being fetched (since each sample contains an I and a Q component).

Default Value: VI_TRUE
   "</Description>
            </Property>
            <Property>
               <Name>Frequency_Translation_Enabled</Name>
               <Location>OnboardSignalProcesingDDC</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1150302);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1150302, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Enables/disables frequency translating the data around the user-selected center frequency down to baseband.

Default Value: VI_TRUE
   "</Description>
            </Property>
            <Property>
               <Name>Q_Source</Name>
               <Location>OnboardSignalProcesingDDC</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1150310, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevistring',RepCapIdentifier, 1150310 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Indicates the channel that is the input of the Q path of the DDC.
Default Value: The channel that the attribute is configured off of.
   "</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>OnboardSignalProcesingDDCIQSignalAdjustmentsFrequencyTranslationPhase</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="OnboardSignalProcesingDDCIQSignalAdjustmentsFrequencyTranslationPhase1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Frequency_Translation_Phase_I</Name>
               <Location>OnboardSignalProcesingDDCIQSignalAdjustmentsFrequencyTranslationPhase</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150305);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150305 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"The I center frequency phase in degrees at the first point of the acquisition.
Default Value: 0
   "</Description>
            </Property>
            <Property>
               <Name>Frequency_Translation_Phase_Q</Name>
               <Location>OnboardSignalProcesingDDCIQSignalAdjustmentsFrequencyTranslationPhase</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150306);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150306 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"The Q center frequency phase in degrees at the first point of the acquisition.  Usethis attribute only when NISCOPE_ATTR_DDC_DATA_PROCESSING_MODE is set to Complex.
Default Value: 90
   "</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>OnboardSignalProcesingEqualization</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="OnboardSignalProcesingEqualization1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Equalization_Filter_Enabled</Name>
               <Location>OnboardSignalProcesingEqualization</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1150313);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1150313, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Enables the onboard signal processing FIR block. This block is connected directly to the input signal. This filter is designed to compensate the input signal for artifacts introduced to the signal outside of the digitizer. However, since this is a generic FIR filter any coefficients are valid.  Coefficients should be between +1 and -1 in value.   "</Description>
            </Property>
            <Property>
               <Name>Equalization_Num_Coefficients</Name>
               <Location>OnboardSignalProcesingEqualization</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150312);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150312 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Returns the number of coefficients that the FIR filter can accept.  This filter is designed to compensate the input signal for artifacts introduced to the signal outside of the digitizer.  However, since this is a generic FIR filter any coefficients are valid.  Coefficients should be between +1 and -1 in value.   "</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>OnboardSignalProcesingFractionalResample</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="OnboardSignalProcesingFractionalResample1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Fractional_Resample_Enabled</Name>
               <Location>OnboardSignalProcesingFractionalResample</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1150320);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1150320, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Enables the onboard signal processing block that resamples the input waveform to the user desired sample rate.  The default value is FALSE.   "</Description>
            </Property>
            <Property>
               <Name>Overflow_Error_Reporting</Name>
               <Location>OnboardSignalProcesingFractionalResample</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150309);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150309 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>0.0</Value>
                     <Value>1.0</Value>
                     <Value>2.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Configures error reporting when the DDC block detects an overflow in any of its stages. Overflows lead to clipping of the waveform.

Valid Values: 
Warning (0)
Error (1)
Disabled (2)

Default Value: Warning
   "</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>PeertoPeer</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="PeertoPeer1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Channels_to_Stream</Name>
               <Location>PeertoPeer</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1150339, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevistring',RepCapIdentifier, 1150339 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies which channels are written to a peer-to-peer endpoint. If multiple channels are specified, the channels are interleaved by sample.
NOTE: This attribute can be used only with high-speed digitizers that support peer-to-peer streaming.

Default Value: 0
   "</Description>
            </Property>
            <Property>
               <Name>Endpoint_Overflow</Name>
               <Location>PeertoPeer</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1150344);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1150344, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Returns TRUE if the endpoint FIFO has overflowed. Reset the endpoint to clear the overflow condition.
NOTE: This attribute can be used only with high-speed digitizers that support peer-to-peer streaming.
   "</Description>
            </Property>
            <Property>
               <Name>Endpoint_Size</Name>
               <Location>PeertoPeer</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150342);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150342 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Returns the size in samples of the peer-to-peer endpoint.
NOTE: This attribute can be used only with high-speed digitizers that support peer-to-peer streaming.
   "</Description>
            </Property>
            <Property>
               <Name>FIFO_Endpoint_Count</Name>
               <Location>PeertoPeer</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150345);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150345 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Returns the number of FIFO-based peer-to-peer endpoints this device supports.
NOTE: This attribute can be used only with high-speed digitizers that support peer-to-peer streaming.
   "</Description>
            </Property>
            <Property>
               <Name>Most_Samples_Available_In_Endpoint</Name>
               <Location>PeertoPeer</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150341);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150341 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Returns the most number of samples available to stream from a peer-to-peer endpoint since the last time this attribute was read.
NOTE: This attribute can be used only with high-speed digitizers that support peer-to-peer streaming.
   "</Description>
            </Property>
            <Property>
               <Name>Onboard_Memory_Enabled</Name>
               <Location>PeertoPeer</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1150354);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1150354, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies whether the digitizer writes data to onboard memory when a peer-to-peer endpoint is enabled.
NOTE: This attribute can be used only with high-speed digitizers that support peer-to-peer streaming.

Default Value: VI_FALSE
   "</Description>
            </Property>
            <Property>
               <Name>P2P_Enabled</Name>
               <Location>PeertoPeer</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1150338);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1150338, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies whether the digitizer writes data to the peer-to-peer endpoint.
NOTE: This attribute can be used only with high-speed digitizers that support peer-to-peer streaming.

Default Value: VI_FALSE
   "</Description>
            </Property>
            <Property>
               <Name>Samples_Available_In_Endpoint</Name>
               <Location>PeertoPeer</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150328);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150328 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Returns the current number of samples available to stream from a peer-to-peer endpoint.
NOTE: This attribute can be used only with high-speed digitizers that support peer-to-peer streaming.
   "</Description>
            </Property>
            <Property>
               <Name>Samples_Transferred</Name>
               <Location>PeertoPeer</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint64',RepCapIdentifier, 1150340);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint64',RepCapIdentifier, 1150340 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Returns the number of samples transferred through the peer-to-peer endpoint since it was last reset.

 "NOTE:Thisattributecanbeusedonlywithhigh-speeddigitizersthatsupportpeer-to-peerstreaming."</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>PeertoPeerAdvanced</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="PeertoPeerAdvanced1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Advanced_Attributes_Enabled</Name>
               <Location>PeertoPeerAdvanced</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 0);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 0, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Enables/disables the advanced attributes for a peer-to-peer endpoint. These attributes cannot be used if an endpoint is being configured by NI-P2P, or a resource reservation error will occur.
NOTE: This attribute can be used only with high-speed digitizers that support peer-to-peer streaming.

Default Value: VI_FALSE
   "</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>PeertoPeerAdvancedAdvancedConfiguration</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="PeertoPeerAdvancedAdvancedConfiguration1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Data_Transfer_Permission_Address</Name>
               <Location>PeertoPeerAdvancedAdvancedConfiguration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint64',RepCapIdentifier, 1150329);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint64',RepCapIdentifier, 1150329 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Returns the address of a hardware register used to grant permisison for the peer-to-peer endpoint to write data to another peer.. The type of this address is determined by the NISCOPE_ATTR_P2P_DATA_TRANS_PERMISSION_ADDR_TYPE attribute. Permission is granted in bytes and the register is additive.
NOTE: This attribute can be used only with high-speed digitizers that support peer-to-peer streaming.
   "</Description>
            </Property>
            <Property>
               <Name>Data_Transfer_Permission_Address_Type</Name>
               <Location>PeertoPeerAdvancedAdvancedConfiguration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150330);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150330 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>0.0</Value>
                     <Value>1.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the type of address returned from the NISCOPE_ATTR_P2P_DATA_TRANS_PERMISSION_ADDR attribute.
NOTE: This attribute can be used only with high-speed digitizers that support peer-to-peer streaming.

Valid Values: 
Physical (0)
Virtual (1)

Default Value: Virtual
   "</Description>
            </Property>
            <Property>
               <Name>Destination_Window_Address</Name>
               <Location>PeertoPeerAdvancedAdvancedConfiguration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint64',RepCapIdentifier, 1150331);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint64',RepCapIdentifier, 1150331 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the destination for data written by the peer-to-peer endpoint. The type of this address is specified by the NISCOPE_ATTR_P2P_DESTINATION_WINDOW_ADDR_TYPE attribute.
NOTE: This attribute can be used only with high-speed digitizers that support peer-to-peer streaming.

Valid Values: A valid, non-NULL physical or virtual address.
   "</Description>
            </Property>
            <Property>
               <Name>Destination_Window_Address_Type</Name>
               <Location>PeertoPeerAdvancedAdvancedConfiguration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150332);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150332 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>0.0</Value>
                     <Value>1.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the type of the NISCOPE_ATTR_P2P_DESTINATION_WINDOW_ADDR attribute.
NOTE: This attribute can be used only with high-speed digitizers that support peer-to-peer streaming.

Valid Values: 
Physical (0)
Virtual (1)

Default Value: Virtual
   "</Description>
            </Property>
            <Property>
               <Name>Destination_Window_Size</Name>
               <Location>PeertoPeerAdvancedAdvancedConfiguration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint64',RepCapIdentifier, 1150333);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint64',RepCapIdentifier, 1150333 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the size, in bytes, of the destination window determined by the NISCOPE_ATTR_P2P_DESTINATION_WINDOW_ADDRESS and the NISCOPE_ATTR_P2P_DESTINATION_WINDOW_ADDRESS_TYPE attributes.
NOTE: This attribute can be used only with high-speed digitizers that support peer-to-peer streaming.

Valid Values: Any non-NULL value.
   "</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>PeertoPeerAdvancedAdvancedStatusNotification</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="PeertoPeerAdvancedAdvancedStatusNotification1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Message_Push_Address</Name>
               <Location>PeertoPeerAdvancedAdvancedStatusNotification</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint64',RepCapIdentifier, 1150335);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint64',RepCapIdentifier, 1150335 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the address to Push Message push Value to on the event specified by the NISCOPE_ATTR_P2P_NOTIFY_PUSH_MESSAGE_ON attribute.
NOTE: This attribute can be used only with high-speed digitizers that support peer-to-peer streaming.
   "</Description>
            </Property>
            <Property>
               <Name>Message_Push_Address_Type</Name>
               <Location>PeertoPeerAdvancedAdvancedStatusNotification</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150336);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150336 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>0.0</Value>
                     <Value>1.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the type of the NISCOPE_ATTR_P2P_NOTIFY_MESSAGE_PUSH_ADDR attribute.
NOTE: This attribute can be used only with high-speed digitizers that support peer-to-peer streaming.

Valid Values: 
Physical (0)
Virtual (1)

Default Value: Virtual
   "</Description>
            </Property>
            <Property>
               <Name>Message_Push_Value</Name>
               <Location>PeertoPeerAdvancedAdvancedStatusNotification</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint64',RepCapIdentifier, 1150337);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint64',RepCapIdentifier, 1150337 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the value to be pushed to the NISCOPE_ATTR_P2P_NOTIFY_MESSAGE_PUSH_ADDR attribute on the event specified by the NISCOPE_ATTR_MESSAGE_PUSH_ON attribute.
NOTE: This attribute can be used only with high-speed digitizers that support peer-to-peer streaming.
"</Description>
            </Property>
            <Property>
               <Name>Push_Message_On</Name>
               <Location>PeertoPeerAdvancedAdvancedStatusNotification</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150334);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150334 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the event to push the NISCOPE_ATTR_P2P_NOTIFY_MESSAGE_PUSH_VALUE attribute to the NISCOPE_ATTR_P2P_NOTIFY_MESSAGE_PUSH_ADDR attribute. Setting this attribute to NISCOPE_VAL_NOTIFY_DONE pushes the message when the acquisition has completed.
NOTE: This attribute can be used only with high-speed digitizers that support peer-to-peer streaming.

Valid Values: 
Never (0)
Done (1)

Default Value: Done
   "</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>Synchronization</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Synchronization1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Master_Enable</Name>
               <Location>Synchronization</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1150008);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1150008, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies whether you want the device to be a master or a slave. The master typically originates the trigger signal and clock sync pulse. For a standalone device, set this attribute to VI_FALSE.
    "</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>Synchronization5VoltSignal</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Synchronization5VoltSignal1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Output_Terminal</Name>
               <Location>Synchronization5VoltSignal</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1150129, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevistring',RepCapIdentifier, 1150129 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="NISCOPE_VAL_PFI_2" Value="VAL_PFI_2"/>
                     <Enum Name="NISCOPE_VAL_RTSI_6" Value="VAL_RTSI_6"/>
                     <Enum Name="NISCOPE_VAL_PFI_1" Value="VAL_PFI_1"/>
                     <Enum Name="NISCOPE_VAL_RTSI_5" Value="VAL_RTSI_5"/>
                     <Enum Name="NISCOPE_VAL_PFI_0" Value="VAL_PFI_0"/>
                     <Enum Name="NISCOPE_VAL_RTSI_4" Value="VAL_RTSI_4"/>
                     <Enum Name="NISCOPE_VAL_RTSI_3" Value="VAL_RTSI_3"/>
                     <Enum Name="NISCOPE_VAL_RTSI_2" Value="VAL_RTSI_2"/>
                     <Enum Name="NISCOPE_VAL_RTSI_1" Value="VAL_RTSI_1"/>
                     <Enum Name="NISCOPE_VAL_RTSI_0" Value="VAL_RTSI_0"/>
                     <Enum Name="NISCOPE_VAL_PXI_STAR" Value="VAL_PXI_STAR"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the destination for the 5 Volt signal.   

Consult your device documentation for a specific list of valid destinations.
    "</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>SynchronizationArmReferenceTrigger</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="SynchronizationArmReferenceTrigger1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Source</Name>
               <Location>SynchronizationArmReferenceTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1150095, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevistring',RepCapIdentifier, 1150095 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="NISCOPE_VAL_SW_TRIG_FUNC" Value="VAL_SW_TRIG_FUNC"/>
                     <Enum Name="NISCOPE_VAL_RTSI_6" Value="VAL_RTSI_6"/>
                     <Enum Name="NISCOPE_VAL_PFI_1" Value="VAL_PFI_1"/>
                     <Enum Name="NISCOPE_VAL_RTSI_5" Value="VAL_RTSI_5"/>
                     <Enum Name="NISCOPE_VAL_PFI_0" Value="VAL_PFI_0"/>
                     <Enum Name="NISCOPE_VAL_RTSI_4" Value="VAL_RTSI_4"/>
                     <Enum Name="NISCOPE_VAL_RTSI_3" Value="VAL_RTSI_3"/>
                     <Enum Name="NISCOPE_VAL_RTSI_2" Value="VAL_RTSI_2"/>
                     <Enum Name="NISCOPE_VAL_RTSI_1" Value="VAL_RTSI_1"/>
                     <Enum Name="NISCOPE_VAL_RTSI_0" Value="VAL_RTSI_0"/>
                     <Enum Name="NISCOPE_VAL_IMMEDIATE" Value="VAL_IMMEDIATE"/>
                     <Enum Name="NISCOPE_VAL_PXI_STAR" Value="VAL_PXI_STAR"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the source the digitizer monitors for an arm reference trigger.  When the arm reference trigger is received, the digitizer begins looking for a reference (stop) trigger from the user-configured trigger source.
    "</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>SynchronizationStartTriggerAcqArm</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="SynchronizationStartTriggerAcqArm1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Record_Arm_Source</Name>
               <Location>SynchronizationStartTriggerAcqArm</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1150065, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevistring',RepCapIdentifier, 1150065 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="NISCOPE_VAL_PFI_2" Value="VAL_PFI_2"/>
                     <Enum Name="NISCOPE_VAL_RTSI_6" Value="VAL_RTSI_6"/>
                     <Enum Name="NISCOPE_VAL_PFI_1" Value="VAL_PFI_1"/>
                     <Enum Name="NISCOPE_VAL_RTSI_5" Value="VAL_RTSI_5"/>
                     <Enum Name="NISCOPE_VAL_PFI_0" Value="VAL_PFI_0"/>
                     <Enum Name="NISCOPE_VAL_RTSI_4" Value="VAL_RTSI_4"/>
                     <Enum Name="NISCOPE_VAL_RTSI_3" Value="VAL_RTSI_3"/>
                     <Enum Name="NISCOPE_VAL_RTSI_2" Value="VAL_RTSI_2"/>
                     <Enum Name="NISCOPE_VAL_RTSI_1" Value="VAL_RTSI_1"/>
                     <Enum Name="NISCOPE_VAL_RTSI_0" Value="VAL_RTSI_0"/>
                     <Enum Name="NISCOPE_VAL_IMMEDIATE" Value="VAL_IMMEDIATE"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the record arm source.
    "</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>SynchronizationTriggerCalibrationDelay</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="SynchronizationTriggerCalibrationDelay1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Slave_Trigger_Delay</Name>
               <Location>SynchronizationTriggerCalibrationDelay</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150046);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150046 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the delay for the trigger from the master to the slave in seconds. This value adjusts the initial X value of the slave devices to correct for the propagation delay between the master trigger output and slave trigger input.
    "</Description>
            </Property>
            <Property>
               <Name>Trigger_from_PFI_Delay</Name>
               <Location>SynchronizationTriggerCalibrationDelay</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150052);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"This is a factory-programmed value that specifies the delay for the PFI lines to the trigger input in seconds.  By itself, this attribute has no effect on the acquired data.  However, depending on how the trigger lines are routed between the master and slave devices, you can use this value as a starting point to set NISCOPE_ATTR_SLAVE_TRIGGER_DELAY.
    "</Description>
            </Property>
            <Property>
               <Name>Trigger_from_RTSI_Delay</Name>
               <Location>SynchronizationTriggerCalibrationDelay</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150051);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"This is a factory-programmed value that specifies the delay for the RTSI bus to the trigger input in seconds.  By itself, this attribute has no effect on the acquired data.  However, depending on how the trigger lines are routed between the master and slave devices, you can use this value as a starting point to set NISCOPE_ATTR_SLAVE_TRIGGER_DELAY.
    "</Description>
            </Property>
            <Property>
               <Name>Trigger_from_Star_Delay</Name>
               <Location>SynchronizationTriggerCalibrationDelay</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150050);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"This is a factory-programmed value that specifies the delay for PXI Star Trigger line to the trigger input in seconds.  By itself, this attribute has no effect on the acquired data.  However, depending on how the trigger lines are routed between the master and slave devices, you can use this value as a starting point to set NISCOPE_ATTR_SLAVE_TRIGGER_DELAY.
    "</Description>
            </Property>
            <Property>
               <Name>Trigger_to_PFI_Delay</Name>
               <Location>SynchronizationTriggerCalibrationDelay</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150049);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"This is a factory-programmed value that specifies the delay for the trigger to the PFI lines in seconds.  By itself, this attribute has no effect on the acquired data.  However, depending on how the trigger lines are routed between the master and slave devices, you can use this value as a starting point to set NISCOPE_ATTR_SLAVE_TRIGGER_DELAY.
    "</Description>
            </Property>
            <Property>
               <Name>Trigger_to_RTSI_Delay</Name>
               <Location>SynchronizationTriggerCalibrationDelay</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150048);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"This is a factory-programmed value that specifies the delay for the trigger to the RTSI bus in seconds.  By itself, this attribute has no effect on the acquired data.  However, depending on how the trigger lines are routed between the master and slave devices, you can use this value as a starting point to set  NISCOPE_ATTR_SLAVE_TRIGGER_DELAY.
    "</Description>
            </Property>
            <Property>
               <Name>Trigger_to_Star_Delay</Name>
               <Location>SynchronizationTriggerCalibrationDelay</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150047);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"This is a factory-programmed value that specifies the delay for the trigger to the PXI Star Trigger line in seconds.  By itself, this attribute has no effect on the acquired data.  However, depending on how the trigger lines are routed between the master and slave devices, you can use this value as a starting point to set NISCOPE_ATTR_SLAVE_TRIGGER_DELAY.
    "</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>Triggering</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Triggering1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Auto_Triggered</Name>
               <Location>Triggering</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1150278);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1150278, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies if the last acquisition was auto triggered.  You can use the Auto Triggered attribute to find out if the last acquisition was triggered.
  </Description>
            </Property>
            <Property>
               <Name>Start_To_Ref_Trigger_Holdoff</Name>
               <Location>Triggering</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150103);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150103 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Pass the length of time you want the digitizer to wait after it starts acquiring data until the digitizer enables the trigger system to detect a reference (stop) trigger.

Units: Seconds

Valid Values: 0.0 - 171.8
    "</Description>
            </Property>
            <Property>
               <Name>Trigger_Coupling</Name>
               <Location>Triggering</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1250014);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1250014 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1001.0</Value>
                     <Value>2.0</Value>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                     <Value>3.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies how the digitizer couples the trigger source. This attribute affects instrument operation only when NISCOPE_ATTR_TRIGGER_TYPE is set to NISCOPE_VAL_EDGE_TRIGGER, NISCOPE_VAL_HYSTERESIS_TRIGGER, or NISCOPE_VAL_WINDOW_TRIGGER.
    "</Description>
            </Property>
            <Property>
               <Name>Trigger_Delay</Name>
               <Location>Triggering</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1250015);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1250015 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the trigger delay time in seconds. The trigger delay time is the length of time the digitizer waits after it receives the trigger. The event that occurs when the trigger delay elapses is the Reference Event.
Valid Values: 0.0 - 171.8
    "</Description>
            </Property>
            <Property>
               <Name>Trigger_Holdoff</Name>
               <Location>Triggering</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1250016);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1250016 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the length of time (in seconds) the digitizer waits after detecting a trigger before enabling the trigger subsystem to detect another trigger. This attribute affects instrument operation only when the digitizer requires multiple acquisitions to build a complete waveform. The digitizer requires multiple waveform acquisitions when it uses equivalent-time sampling or when the digitizer is configured for a multi-record acquisition through a call to niScope_ConfigureHorizontalTiming.

Valid Values: 0.0 - 171.8
    "</Description>
            </Property>
            <Property>
               <Name>Trigger_Hysteresis</Name>
               <Location>Triggering</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150006);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150006 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the size of the hysteresis window on either side of the trigger level. The digitizer triggers when the trigger signal passes through the threshold you specify with the Trigger Level parameter, has the slope you specify with the Trigger Slope parameter, and passes through the hysteresis window that you specify with this parameter.

Valid Values:
Min Value: 0
Max Value:
  For positive trigger slope:
    Hysteresis - trigger level &gt;= -(vertical range/2) + vertical offset
  For negative trigger slope:
    Hysteresis + trigger level &lt;= vertical range/2 + vertical offset
    "</Description>
            </Property>
            <Property>
               <Name>Trigger_Impedance</Name>
               <Location>Triggering</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150075);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150075 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the input impedance for the external analog trigger channel in Ohms.

Valid Values:
50      - 50 ohms
1000000 - 1 mega ohm
    "</Description>
            </Property>
            <Property>
               <Name>Trigger_Level</Name>
               <Location>Triggering</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1250017);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1250017 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the voltage threshold for the trigger subsystem. The units are volts. This attribute affects instrument behavior only when the NISCOPE_ATTR_TRIGGER_TYPE is set to NISCOPE_VAL_EDGE_TRIGGER, NISCOPE_VAL_HYSTERESIS_TRIGGER, or NISCOPE_VAL_WINDOW_TRIGGER.

Valid Values:
The values of the range and offset parameters in niScope_ConfigureVertical determine the valid range for the trigger level on the channel you use as the Trigger Source. The value you pass for this parameter must meet the following conditions: Trigger Level &lt;= Vertical Range/2 + Vertical Offset and Vertical Range &gt;= (-Vertical Range/2) + Vertical Offset
    "</Description>
            </Property>
            <Property>
               <Name>Trigger_Modifier</Name>
               <Location>Triggering</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1250102);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1250102 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>2.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Configures the device to automatically complete an acquisition if a trigger has not been received.

Valid Values:
None (1)         - Normal triggering
Auto Trigger (2) - Auto trigger acquisition if no trigger arrives
    "</Description>
            </Property>
            <Property>
               <Name>Trigger_Output_Terminal</Name>
               <Location>Triggering</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1150098, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevistring',RepCapIdentifier, 1150098 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="NISCOPE_VAL_PFI_2" Value="VAL_PFI_2"/>
                     <Enum Name="NISCOPE_VAL_RTSI_6" Value="VAL_RTSI_6"/>
                     <Enum Name="NISCOPE_VAL_PFI_1" Value="VAL_PFI_1"/>
                     <Enum Name="NISCOPE_VAL_RTSI_5" Value="VAL_RTSI_5"/>
                     <Enum Name="NISCOPE_VAL_PFI_0" Value="VAL_PFI_0"/>
                     <Enum Name="NISCOPE_VAL_RTSI_4" Value="VAL_RTSI_4"/>
                     <Enum Name="NISCOPE_VAL_RTSI_3" Value="VAL_RTSI_3"/>
                     <Enum Name="NISCOPE_VAL_RTSI_2" Value="VAL_RTSI_2"/>
                     <Enum Name="NISCOPE_VAL_RTSI_1" Value="VAL_RTSI_1"/>
                     <Enum Name="NISCOPE_VAL_RTSI_0" Value="VAL_RTSI_0"/>
                     <Enum Name="NISCOPE_VAL_PXI_STAR" Value="VAL_PXI_STAR"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the destination export for the reference (stop) trigger.  

Consult your device documentation for a specific list of valid destinations.
    "</Description>
            </Property>
            <Property>
               <Name>Trigger_Slope</Name>
               <Location>Triggering</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1250018);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1250018 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies if a rising or a falling edge triggers the digitizer. This attribute affects instrument operation only when NISCOPE_ATTR_TRIGGER_TYPE is set to NISCOPE_VAL_EDGE_TRIGGER, NISCOPE_VAL_HYSTERESIS_TRIGGER, or NISCOPE_VAL_WINDOW_TRIGGER.
    "</Description>
            </Property>
            <Property>
               <Name>Trigger_Source</Name>
               <Location>Triggering</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1250013, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevistring',RepCapIdentifier, 1250013 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="NISCOPE_VAL_SW_TRIG_FUNC" Value="VAL_SW_TRIG_FUNC"/>
                     <Enum Name="NISCOPE_VAL_PFI_2" Value="VAL_PFI_2"/>
                     <Enum Name="NISCOPE_VAL_RTSI_6" Value="VAL_RTSI_6"/>
                     <Enum Name="NISCOPE_VAL_PFI_1" Value="VAL_PFI_1"/>
                     <Enum Name="NISCOPE_VAL_RTSI_5" Value="VAL_RTSI_5"/>
                     <Enum Name="NISCOPE_VAL_PFI_0" Value="VAL_PFI_0"/>
                     <Enum Name="NISCOPE_VAL_RTSI_4" Value="VAL_RTSI_4"/>
                     <Enum Name="NISCOPE_VAL_RTSI_3" Value="VAL_RTSI_3"/>
                     <Enum Name="NISCOPE_VAL_RTSI_2" Value="VAL_RTSI_2"/>
                     <Enum Name="NISCOPE_VAL_RTSI_1" Value="VAL_RTSI_1"/>
                     <Enum Name="NISCOPE_VAL_RTSI_0" Value="VAL_RTSI_0"/>
                     <Enum Name="NISCOPE_VAL_EXTERNAL" Value="VAL_EXTERNAL"/>
                     <Enum Name="NISCOPE_VAL_IMMEDIATE" Value="VAL_IMMEDIATE"/>
                     <Enum Name="NISCOPE_VAL_PXI_STAR" Value="VAL_PXI_STAR"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the source the digitizer monitors for the trigger event.
    "</Description>
            </Property>
            <Property>
               <Name>Trigger_Type</Name>
               <Location>Triggering</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1250012);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1250012 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1004.0</Value>
                     <Value>1001.0</Value>
                     <Value>5.0</Value>
                     <Value>1002.0</Value>
                     <Value>1003.0</Value>
                     <Value>1.0</Value>
                     <Value>6.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the type of trigger to use.
    "</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>TriggeringOnboardSignalProcesing</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="TriggeringOnboardSignalProcesing1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Ref_Trig_Min_Quiet_Time</Name>
               <Location>TriggeringOnboardSignalProcesing</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150315);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150315 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"The amount of time the trigger circuit must not detect a signal above the trigger level before the trigger is armed.  This attribute is useful for triggering at the beginning and not in the middle of signal bursts.
    "</Description>
            </Property>
            <Property>
               <Name>Ref_Trigger_Dectector_Location</Name>
               <Location>TriggeringOnboardSignalProcesing</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150314);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150314 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Indicates which analog compare circuitry to use on the device. 
    "</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>TriggeringTriggerVideoTV</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="TriggeringTriggerVideoTV1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Enable_DC_Restore</Name>
               <Location>TriggeringTriggerVideoTV</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1150093);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1150093, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Restores the video-triggered data retrieved by the digitizer to the video signal's zero reference point.

Valid Values:
VI_TRUE - Enable DC restore
VI_FALSE - Disable DC restore
    "</Description>
            </Property>
            <Property>
               <Name>Video_Line_Number</Name>
               <Location>TriggeringTriggerVideoTV</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1250206);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1250206 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the line on which to trigger, if NISCOPE_ATTR_TV_TRIGGER_EVENT is set to line number. The valid ranges of the attribute depend on the signal format selected. M-NTSC has a valid range of 1 to 525.  B/G-PAL, SECAM, 576i, and 576p have a valid range of 1 to 625. 720p has a valid range of 1 to 750. 1080i and 1080p have a valid range of 1125.
    "</Description>
            </Property>
            <Property>
               <Name>Video_Polarity</Name>
               <Location>TriggeringTriggerVideoTV</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1250204);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1250204 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>2.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies whether the video signal sync is positive or negative.
    "</Description>
            </Property>
            <Property>
               <Name>Video_Signal_Format</Name>
               <Location>TriggeringTriggerVideoTV</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1250201);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1250201 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1041.0</Value>
                     <Value>1032.0</Value>
                     <Value>1042.0</Value>
                     <Value>1016.0</Value>
                     <Value>2.0</Value>
                     <Value>3.0</Value>
                     <Value>1025.0</Value>
                     <Value>1.0</Value>
                     <Value>1015.0</Value>
                     <Value>1045.0</Value>
                     <Value>1011.0</Value>
                     <Value>1020.0</Value>
                     <Value>1040.0</Value>
                     <Value>1001.0</Value>
                     <Value>1031.0</Value>
                     <Value>1010.0</Value>
                     <Value>1033.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the type of video signal, such as NTSC, PAL, or SECAM.
    "</Description>
            </Property>
            <Property>
               <Name>Video_Trigger_Event</Name>
               <Location>TriggeringTriggerVideoTV</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1250205);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1250205 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>4.0</Value>
                     <Value>2.0</Value>
                     <Value>1.0</Value>
                     <Value>5.0</Value>
                     <Value>3.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the condition in the video signal that causes the digitizer to trigger.
    "</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>TriggeringTriggerWindow</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="TriggeringTriggerWindow1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>High_Window_Level</Name>
               <Location>TriggeringTriggerWindow</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150014);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150014 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Pass the upper voltage threshold you want the digitizer to use for window triggering.

The digitizer triggers when the trigger signal enters or leaves the window you specify with NISCOPE_ATTR_TRIGGER_WINDOW_LOW_LEVEL and NISCOPE_ATTR_TRIGGER_WINDOW_HIGH_LEVEL

Valid Values:
The values of the Vertical Range and Vertical Offset parameters in niScope_ConfigureVertical determine the valid range for the High Window Level on the channel you use as the Trigger Source parameter in niScope_ConfigureTriggerSource.  The value you pass for this parameter must meet the following conditions.

High Trigger Level &lt;= Vertical Range/2 + Vertical Offset
High Trigger Level &gt;= (-Vertical Range/2) + Vertical Offset
High Trigger Level &gt; Low Trigger Level
    "</Description>
            </Property>
            <Property>
               <Name>Low_Window_Level</Name>
               <Location>TriggeringTriggerWindow</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150013);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150013 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Pass the lower voltage threshold you want the digitizer to use for window triggering.

The digitizer triggers when the trigger signal enters or leaves the window you specify with NISCOPE_ATTR_TRIGGER_WINDOW_LOW_LEVEL and NISCOPE_ATTR_TRIGGER_WINDOW_HIGH_LEVEL.

Units: Volts

Valid Values:
The values of the Vertical Range and Vertical Offset parameters in niScope_ConfigureVertical determine the valid range for the Low Window Level on the channel you use as the Trigger Source parameter in niScope_ConfigureTriggerSource.  The value you pass for this parameter must meet the following conditions.

Low Trigger Level &lt;= Vertical Range/2 + Vertical Offset
Low Trigger Level &gt;= (-Vertical Range/2) + Vertical Offset
Low Trigger Level &lt; High Trigger Level
    "</Description>
            </Property>
            <Property>
               <Name>Window_Mode</Name>
               <Location>TriggeringTriggerWindow</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150012);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150012 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>0.0</Value>
                     <Value>1.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies whether you want a trigger to occur when the signal enters or leaves the window specified by NISCOPE_ATTR_TRIGGER_WINDOW_LOW_LEVEL, or NISCOPE_ATTR_TRIGGER_WINDOW_HIGH_LEVEL.
    "</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>Utility</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Utility1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>disable</Name>
               <Location>Utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function disable(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'niScope_Disable', session);


if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt;niScope_Disable&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_Disable&lt;/h1&gt;&#xD;
&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus niScope_Disable (ViSession vi);&lt;/p&gt;&#xD;
&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&#xD;
&lt;p class="Body"&gt;Aborts any current operation, opens data channel relays, and releases RTSI and PFI lines.&#xD;
&lt;/p&gt;&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
            <Method>
               <Name>isdeviceready</Name>
               <Location>Utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [DeviceReady] = isdeviceready(obj, ResourceName, ChannelList)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ResourceName = [double(ResourceName) 0];
ChannelList = [double(ChannelList) 0];
DeviceReady = libpointer('uint16Ptr', 0);

status = calllib(libname, 'niScope_IsDeviceReady', ResourceName, ChannelList, DeviceReady);

DeviceReady = double(DeviceReady.Value);

if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt;niScope_IsDeviceReady&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_IsDeviceReady&lt;/h1&gt;

&lt;h2&gt;C Function Prototype&lt;/h2&gt;
&lt;p class="syntax"&gt;

ViStatus  niScope_IsDeviceReady  
(ViRsrc resourceName,
 ViConstString channelList,
ViBoolean* deviceReady);&lt;/p&gt;

&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;

&lt;p class="Body"&gt;  Call this function to determine whether the 
device is ready for use or the device is still undergoing initialization.
 
  &lt;/p&gt;

&#xD;
&#xD;
&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
            <Method>
               <Name>probecompensationsignalstart</Name>
               <Location>Utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function probecompensationsignalstart(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'niScope_ProbeCompensationSignalStart', session);


if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt;niScope_ProbeCompensationSignalStart&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_ProbeCompensationSignalStart&lt;/h1&gt;&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus niScope_ProbeCompensationSignalStart (ViSession vi);&lt;/p&gt;&#xD;
&#xD;
&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&#xD;
&#xD;
&lt;p class="Body"&gt;Starts the 1&amp;nbsp;kHz square wave output on PFI&amp;nbsp;1 for probe compensation.&#xD;
&lt;/p&gt;&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
            <Method>
               <Name>probecompensationsignalstop</Name>
               <Location>Utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function probecompensationsignalstop(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'niScope_ProbeCompensationSignalStop', session);


if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt;niScope_ProbeCompensationSignalStop&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_ProbeCompensationSignalStop&lt;/h1&gt;&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus niScope_ProbeCompensationSignalStop (ViSession vi);&lt;/p&gt;&#xD;
&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&#xD;
&lt;p class="Body"&gt;Stops the 1&amp;nbsp;kHz square wave output on PFI&amp;nbsp;1 for probe compensation.&lt;/p&gt;&#xD;
&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
            <Method>
               <Name>reset</Name>
               <Location>Utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function reset(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'niScope_reset', session);


if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt;niScope_reset&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_reset&lt;/h1&gt;&#xD;
&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus niScope_reset (ViSession vi);&lt;/p&gt;&#xD;
&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&#xD;
&lt;p class="Body"&gt;Resets the digitizer to its &lt;a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviAttribute_Defaults.html')"&gt;default state&lt;/a&gt;. &lt;/p&gt;&#xD;
&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
            <Method>
               <Name>resetdevice</Name>
               <Location>Utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function resetdevice(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'niScope_ResetDevice', session);


if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt;niScope_ResetDevice&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_ResetDevice&lt;/h1&gt;&#xD;
&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus niScope_ResetDevice (ViSession vi);&lt;/p&gt;&#xD;
&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&#xD;
&lt;p class="Body"&gt;Performs a hard reset of the device. Acquisition stops, all routes are released, RTSI and PFI lines are&#xD;
tristated, hardware is configured to its default state,  and all session attributes are reset to their default state.&#xD;
&#xD;
&lt;/p&gt;&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
            <Method>
               <Name>resetwithdefaults</Name>
               <Location>Utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function resetwithdefaults(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'niScope_ResetWithDefaults', session);


if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt;niScope_ResetWithDefaults&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_ResetWithDefaults&lt;/h1&gt;&#xD;
&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus niScope_Reset_With_Defaults (ViSession vi);&lt;/p&gt;&#xD;
&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&#xD;
&lt;p class="Body"&gt;Performs a software reset of the device, returning it to the default state and applying any initial default settings from the IVI  Configuration Store.&#xD;
&lt;/p&gt;&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
            <Method>
               <Name>revisionquery</Name>
               <Location>Utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [DriverRevision, FirmwareRevision] = revisionquery(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
DriverRevision = libpointer('int8Ptr', repmat(10, 1, 512));
FirmwareRevision = libpointer('int8Ptr', repmat(10, 1, 512));

status = calllib(libname, 'niScope_revision_query', session, DriverRevision, FirmwareRevision);

DriverRevision = strtrim(char(DriverRevision.Value));
FirmwareRevision = strtrim(char(FirmwareRevision.Value));

if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt;niScope_revision_query&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_revision_query&lt;/h1&gt;&#xD;
&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus niScope_revision_query  (ViSession vi, &#xD;
                                          ViChar driverRev[IVI_MAX_MESSAGE_BUF_SIZE], &#xD;
                                          ViChar instrRev[IVI_MAX_MESSAGE_BUF_SIZE]);&lt;/p&gt;&#xD;
&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&#xD;
&lt;p class="Body"&gt;Returns the revision numbers of the instrument driver and instrument firmware. &lt;/p&gt;&#xD;
&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
            <Method>
               <Name>selftest</Name>
               <Location>Utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [SelfTestResult, SelfTestMessage] = selftest(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
SelfTestResult = libpointer('int16Ptr', 0);
SelfTestMessage = libpointer('int8Ptr', repmat(10, 1, 512));

status = calllib(libname, 'niScope_self_test', session, SelfTestResult, SelfTestMessage);

SelfTestResult = double(SelfTestResult.Value);
SelfTestMessage = strtrim(char(SelfTestMessage.Value));

if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt;niScope_self_test&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_self_test&lt;/h1&gt;&#xD;
&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus niScope_self_test (ViSession vi, ViInt16* selfTestResult, ViChar selfTestMessage[IVI_MAX_MESSAGE_BUF_SIZE]);&lt;/p&gt;&#xD;
&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&#xD;
&lt;p class="Body"&gt;Runs the instrument self-test routine and returns the test result(s). &lt;/p&gt;&#xD;
&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>UtilityFunctionsErrorHandling</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="UtilityFunctionsErrorHandling1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>clearerror</Name>
               <Location>UtilityFunctionsErrorHandling</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function clearerror(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'niScope_ClearError', session);


if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;

&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;
&lt;link rel="stylesheet" type="text/css" href="styles.css"&gt;&#xD;
&lt;title&gt;niScope_ClearError&lt;/title&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body&gt;&lt;h1 class="function"&gt;niScope_ClearError&lt;/h1&gt;&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus&amp;nbsp;niScope_ClearError&amp;nbsp;(ViSession&amp;nbsp;vi);&lt;/p&gt;&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&#xD;
&lt;table class="Borderless-Wide"&gt;&#xD;
&lt;tr&gt;&#xD;
&lt;td class="Icon"&gt;&lt;img src="note.gif"&gt;&lt;/td&gt;&#xD;
&lt;td&gt;&#xD;
&lt;strong&gt;Note&lt;/strong&gt;&amp;nbsp;&amp;nbsp;&#xD;
This function is included for compliance with the IviScope Class Specification.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p class = "Body"&gt;Clears the error information for the current execution thread and the IVI session you specify. If you pass &lt;span class="Monospace"&gt;VI_NULL&lt;/span&gt; for the Instrument Handle parameter, this function clears the error information only for the current execution thread.&lt;/p&gt;&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
            <Method>
               <Name>errorhandler</Name>
               <Location>UtilityFunctionsErrorHandling</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [ErrorSource, ErrorDescription] = errorhandler(obj, ErrorCode)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ErrorSource = libpointer('int8Ptr', repmat(10, 1, 512));
ErrorDescription = libpointer('int8Ptr', repmat(10, 1, 512));

status = calllib(libname, 'niScope_errorHandler', session, ErrorCode, ErrorSource, ErrorDescription);

ErrorSource = strtrim(char(ErrorSource.Value));
ErrorDescription = strtrim(char(ErrorDescription.Value));

if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt;niScope_errorHandler&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_errorHandler&#xD;
&lt;/h1&gt;&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus niScope_errorHandler (ViSession vi,&#xD;
                                        ViInt32 errorCode,&#xD;
                                        ViChar errorSource[MAX_FUNCTION_NAME_SIZE],&#xD;
                                        ViChar errorDescription[MAX_ERROR_DESCRIPTION]);&lt;/p&gt;&#xD;
&#xD;
&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&#xD;
&#xD;
&lt;p class="Body"&gt;Takes the error code returned by NI-SCOPE functions and returns the interpretation as a user-readable string. &#xD;
&lt;/p&gt;&#xD;
&lt;table class="Borderless"&gt;&lt;tr&gt;&lt;td class="Icon"&gt;&lt;img src="note.gif"&gt;&lt;/td&gt;&lt;td&gt;&lt;strong&gt;Note&lt;/strong&gt;&amp;nbsp;&amp;nbsp;You can pass &lt;span class="Monospace"&gt;VI_NULL&lt;/span&gt; as the instrument handle, which is useful to interpret errors after &lt;span class="Monospace"&gt;niScope_init&lt;/span&gt; has failed.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xD;
&#xD;
&#xD;
&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
            <Method>
               <Name>geterrormessage</Name>
               <Location>UtilityFunctionsErrorHandling</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [ErrorMessage] = geterrormessage(obj, ErrorCode, Buffer_Size)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ErrorMessage = libpointer('int8Ptr', repmat(10, 1, 512));

status = calllib(libname, 'niScope_GetErrorMessage', session, ErrorCode, Buffer_Size, ErrorMessage);

ErrorMessage = strtrim(char(ErrorMessage.Value));

if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt;niScope_GetErrorMessage&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_GetErrorMessage&lt;/h1&gt;&#xD;
&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus niScope_GetErrorMessage (ViSession vi, 
                                           ViStatus errorCode,
                                           ViInt32 bufferSize,
                                           ViChar errorMessage[]);&lt;/p&gt;&#xD;
&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;


&lt;p class ="body"&gt;
Returns the error code from an NI-SCOPE function  as a user-readable string. Use VI_NULL as the default instrument handle. &lt;/p&gt;
&#xD;&lt;p class ="body"&gt;
You must call this function twice.  For the first call,  set &lt;strong&gt;bufferSize&lt;/strong&gt; to 0 to prevent the function from populating the error message. Instead, the function returns the size of the error string.  Use the returned size to create a buffer, then call the function again,  passing in the new buffer and setting  &lt;strong&gt;bufferSize&lt;/strong&gt; equal to the size that was returned in the first function call.&#xD;
&lt;p class="Body"&gt; &#xD;
&lt;/p&gt;&#xD;
&#xD;
&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>UtilityFunctionsLocking</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="UtilityFunctionsLocking1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>locksession</Name>
               <Location>UtilityFunctionsLocking</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [CallerHasLock] = locksession(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
CallerHasLock = libpointer('uint16Ptr', 0);

status = calllib(libname, 'niScope_LockSession', session, CallerHasLock);

CallerHasLock = double(CallerHasLock.Value);

if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt;niScope_LockSession&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_LockSession&#xD;
&lt;/h1&gt;&#xD;
&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;&#xD;
ViStatus niScope_LockSession (ViSession vi, ViBoolean* callerHasLock);&lt;/p&gt;&#xD;
&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&#xD;
&lt;p class="Body"&gt;Obtains a multithread lock on the instrument session. Before doing so, it waits until all other execution threads have released their locks on the instrument session. Other threads might have obtained a lock on this session in the following ways:&#xD;
&lt;/p&gt;&#xD;
&lt;ul&gt;&#xD;
&#xD;
&lt;li&gt;Your application called niScope_LockSession&#xD;
&lt;/li&gt;&#xD;
&lt;li&gt;A call to the instrument driver locked the session&#xD;
&lt;/li&gt;&#xD;
&lt;li&gt;A call to the IVI  engine locked the session&#xD;
&lt;/li&gt;&#xD;
&lt;/ul&gt;&#xD;
&#xD;
&lt;p class="Body"&gt;After your call to &lt;span class="Monospace"&gt;niScope_LockSession&lt;/span&gt; returns successfully, no other threads can access the instrument session until you call &lt;a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_UnlockSession.html')"&gt;&lt;span class="Monospace"&gt;niScope_UnlockSession&lt;/span&gt;&lt;/a&gt;. Use niScope_LockSession and niScope_UnlockSession around a sequence of calls to instrument driver functions if you require that the instrument retain its settings through the end of the sequence.&#xD;
&lt;/p&gt;&#xD;
&lt;p class="Body"&gt;You can safely make nested calls to &lt;span class="Monospace"&gt;niScope_LockSession&lt;/span&gt; within the same thread. To completely unlock the session, you must balance each call to &lt;span class="Monospace"&gt;niScope_LockSession&lt;/span&gt; with a call to &lt;span class="Monospace"&gt;niScope_UnlockSession&lt;/span&gt;. If, however, you use the &lt;strong&gt;callerHasLock&lt;/strong&gt; in all calls to &lt;span class="Monospace"&gt;niScope_LockSession&lt;/span&gt; and &lt;span class="Monospace"&gt;niScope_UnlockSession&lt;/span&gt; within a function, the IVI  Library locks the session only once within the function regardless of the number of calls you make to &lt;span class="Monospace"&gt;niScope_LockSession&lt;/span&gt;. This allows you to call &lt;span class="Monospace"&gt;niScope_UnlockSession&lt;/span&gt; just once at the end of the function.&#xD;
&lt;/p&gt;&#xD;
&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
            <Method>
               <Name>unlocksession</Name>
               <Location>UtilityFunctionsLocking</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [CallerHasLock] = unlocksession(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
CallerHasLock = libpointer('uint16Ptr', 0);

status = calllib(libname, 'niScope_UnlockSession', session, CallerHasLock);

CallerHasLock = double(CallerHasLock.Value);

if (status &lt; 0)
	privateErrorHandling(  libname, 'niScope', session, status);
end
</MCode>
               </Code>
               <Description>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&#xD;
&lt;HTML&gt;&#xD;
&lt;head&gt;&#xD;
&lt;script type="text/javascript" src="launchhelp.js"&gt;&lt;/script&gt;&#xD;
&lt;script type="text/javascript" src="pdf.js"&gt;&lt;/script&gt;&#xD;
&lt;title&gt;niScope_UnlockSession&lt;/title&gt;&#xD;
&lt;link rel="STYLESHEET" type="print/css" href="print.css"&gt;&#xD;
&lt;link rel="STYLESHEET" type="text/css" href="styles.css"&gt;&#xD;
&lt;/head&gt;&#xD;
&lt;body bgcolor="#ffffff"&gt;&lt;h1 class="function"&gt;niScope_UnlockSession&lt;/h1&gt;&#xD;
&#xD;
&#xD;
&lt;h2&gt;C Function Prototype&lt;/h2&gt;&#xD;
&lt;p class="syntax"&gt;ViStatus niScope_UnlockSession (ViSession vi, ViBoolean* callerHasLock);&lt;/p&gt;&#xD;
&#xD;
&lt;h2 class="purpose"&gt;Purpose&lt;/h2&gt;&#xD;
&#xD;
&lt;p class="Body"&gt;Releases a lock that you acquired on an instrument session using &lt;a href="javascript:LaunchMergedHelp('Digitizers.chm','scopeFunc.chm','cviniScope_LockSession.html')"&gt;&lt;span class="Monospace"&gt;niScope LockSession&lt;/span&gt;&lt;/a&gt;. &#xD;
&lt;/p&gt;&#xD;
&lt;/body&gt;&#xD;
&lt;/html&gt;</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>Vertical</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Vertical1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Channel_Enabled</Name>
               <Location>Vertical</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1250005);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1250005, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies whether the digitizer acquires a waveform for the channel.

Valid Values:
VI_TRUE  (1) - Acquire data on this channel
VI_FALSE (0) - Don't acquire data on this channel
    "</Description>
            </Property>
            <Property>
               <Name>Channel_Terminal_Configuration</Name>
               <Location>Vertical</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150107);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150107 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>2.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the terminal configuration for the channel.
    "</Description>
            </Property>
            <Property>
               <Name>Input_Impedance</Name>
               <Location>Vertical</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1250103);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1250103 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1000000.0</Value>
                     <Value>50.0</Value>
                     <Value>75.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the input impedance for the channel in Ohms.
    "</Description>
            </Property>
            <Property>
               <Name>Maximum_Input_Frequency</Name>
               <Location>Vertical</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1250006);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1250006 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the bandwidth of the channel. Express this value as the frequency at which the input circuitry attenuates the input signal by 3 dB. The units are hertz.

Defined Values:
NISCOPE_VAL_BANDWIDTH_FULL (-1.0)
NISCOPE_VAL_BANDWIDTH_DEVICE_DEFAULT (0.0)
NISCOPE_VAL_20MHZ_BANDWIDTH (20000000.0)
NISCOPE_VAL_100MHZ_BANDWIDTH (100000000.0)
NISCOPE_VAL_20MHZ_MAX_INPUT_FREQUENCY (20000000.0)
NISCOPE_VAL_100MHZ_MAX_INPUT_FREQUENCY (100000000.0)
Refer to the NI High-Speed Digitizers Help for a list of bandwidths supported for each device.
    "</Description>
            </Property>
            <Property>
               <Name>Probe_Attenuation</Name>
               <Location>Vertical</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1250004);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1250004 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the probe attenuation for the input channel. For example, for a 10:1 probe, set this attribute to 10.0.

Valid Values:
Any positive real number. Typical values are 1, 10, and 100.
    "</Description>
            </Property>
            <Property>
               <Name>Vertical_Coupling</Name>
               <Location>Vertical</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1250003);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1250003 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>2.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies how the digitizer couples the input signal for the channel. When input coupling changes, the input stage takes a finite amount of time to settle.
    "</Description>
            </Property>
            <Property>
               <Name>Vertical_Offset</Name>
               <Location>Vertical</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1250002);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1250002 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the location of the center of the range. The value is with respect to ground and is in volts. For example, to acquire a sine wave that spans between 0.0 and 10.0 V, set this attribute to 5.0 V.
Note This attribute is not supported by all digitizers.Refer to the NI High-Speed Digitizers Help for a list of vertical offsets supported for each device.
    "</Description>
            </Property>
            <Property>
               <Name>Vertical_Range</Name>
               <Location>Vertical</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1250001);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1250001 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the absolute value of the input range for a channel in volts. For example, to acquire a sine wave that spans between -5 and +5 V, set this attribute to 10.0 V.
Refer to the NI High-Speed Digitizers Help for a list of supported vertical ranges for each device. If the specified range is not supported by a device, the value is coerced up to the next valid range.
    "</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>VerticalAdvanced</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="VerticalAdvanced1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Bandpass_Filter_Enabled</Name>
               <Location>VerticalAdvanced</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1150318);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1150318, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Enables the bandpass filter on the specificed channel.  The default value is FALSE.
    "</Description>
            </Property>
            <Property>
               <Name>Digital_Gain</Name>
               <Location>VerticalAdvanced</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150307);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150307 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Applies gain to the specified channel in hardware before any onboard processing.

Valid Values:
-1.5 to 1.5
   "</Description>
            </Property>
            <Property>
               <Name>Digital_Offset</Name>
               <Location>VerticalAdvanced</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150308);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150308 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Applies offset to the specified channel in hardware before any onboard processing.

Valid Values:
-1.5 to 1.5 V
   "</Description>
            </Property>
            <Property>
               <Name>Dither_Enabled</Name>
               <Location>VerticalAdvanced</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1150319);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1150319, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Enables or Disables the analog dither on the device.  The default value is FALSE.

Using dither can improve the spectral performance of the device by reducing the effects of quantization.  However, adding dither increases the power level to the ADC, so you may need to either decrease the signal level or increase your vertical range.
    "</Description>
            </Property>
            <Property>
               <Name>Flex_FIR_Antialias_Filter_Type</Name>
               <Location>VerticalAdvanced</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150271);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150271 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>3.0</Value>
                     <Value>2.0</Value>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"The NI 5922 flexible-resolution digitizer uses an onboard FIR lowpass antialias filter.
Use this attribute to select from several types of filters to achieve desired filtering characteristics.
    "</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>WaveformMeasurements</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="WaveformMeasurements1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Array_Gain</Name>
               <Location>WaveformMeasurements</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150043);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150043 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Every element of an array is multiplied by this scalar value during the Array Gain measurement. Refer to NISCOPE_VAL_ARRAY_GAIN for more information. 

Default: 1.0"</Description>
            </Property>
            <Property>
               <Name>Array_Offset</Name>
               <Location>WaveformMeasurements</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150044);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150044 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Every element of an array is added to this scalar value during the Array Offset measurement. Refer to NISCOPE_VAL_ARRAY_OFFSET for more information.

Default: 0.0"</Description>
            </Property>
            <Property>
               <Name>Hysteresis_Percent</Name>
               <Location>WaveformMeasurements</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150019);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150019 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Digital hysteresis that is used in several of the scalar waveform measurements. This attribute specifies the percentage of the full-scale vertical range for the hysteresis window size.

Default: 2%"</Description>
            </Property>
            <Property>
               <Name>Last_Acquisition_Histogram_Size</Name>
               <Location>WaveformMeasurements</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150020);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150020 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the size (that is, the number of bins) in the last acquisition histogram. This histogram is used to determine several scalar measurements, most importantly voltage low and voltage high.

Default: 256"</Description>
            </Property>
            <Property>
               <Name>Other_Channel</Name>
               <Location>WaveformMeasurements</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1150018, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevistring',RepCapIdentifier, 1150018 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the second channel for two-channel measurements, such as NISCOPE_VAL_ADD_CHANNELS. If processing steps are registered with this channel, the processing is done before the waveform is used in a two-channel measurement. 

Default: '0'"</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>WaveformMeasurementsDigitalFiltering</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="WaveformMeasurementsDigitalFiltering1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Filter_Center_Frequency</Name>
               <Location>WaveformMeasurementsDigitalFiltering</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150032);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150032 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"The center frequency in hertz for filters of type bandpass and bandstop. The width of the filter is specified by NISCOPE_ATTR_MEAS_FILTER_WIDTH, where the cutoff frequencies are the center �width.

Default: 1.0e6 Hz"</Description>
            </Property>
            <Property>
               <Name>Filter_Cutoff_Frequency</Name>
               <Location>WaveformMeasurementsDigitalFiltering</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150031);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150031 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the cutoff frequency in hertz for filters of type lowpass and highpass. The cutoff frequency definition varies depending on the filter.

Default: 1.0e6 Hz"</Description>
            </Property>
            <Property>
               <Name>Filter_Order</Name>
               <Location>WaveformMeasurementsDigitalFiltering</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150036);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150036 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the order of an IIR filter. All positive integers are valid. 

Default: 2"</Description>
            </Property>
            <Property>
               <Name>Filter_Ripple</Name>
               <Location>WaveformMeasurementsDigitalFiltering</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150033);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150033 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the amount of ripple in the passband in units of decibels (positive values). Used only for Chebyshev filters. The more ripple allowed gives a sharper cutoff for a given filter order.

Default: 0.1 dB"</Description>
            </Property>
            <Property>
               <Name>Filter_Taps</Name>
               <Location>WaveformMeasurementsDigitalFiltering</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150037);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150037 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Defines the number of taps (coefficients) for an FIR filter. 

Default: 25"</Description>
            </Property>
            <Property>
               <Name>Filter_Transient_Waveform_Percent</Name>
               <Location>WaveformMeasurementsDigitalFiltering</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150034);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150034 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"The percentage (0 - 100%) of the IIR filtered waveform to eliminate from the beginning of the waveform. This allows eliminating the transient portion of the waveform that is undefined due to the assumptions necessary at the boundary condition.

Default: 20.0%"</Description>
            </Property>
            <Property>
               <Name>Filter_Type</Name>
               <Location>WaveformMeasurementsDigitalFiltering</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150035);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150035 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the type of filter, for both IIR and FIR filters. The allowed values are the following:
� NISCOPE_VAL_MEAS_LOWPASS
� NISCOPE_VAL_MEAS_HIGHPASS
� NISCOPE_VAL_MEAS_BANDPASS
� NISCOPE_VAL_MEAS_BANDSTOP 

Default: NISCOPE_VAL_MEAS_LOWPASS"</Description>
            </Property>
            <Property>
               <Name>Filter_Width</Name>
               <Location>WaveformMeasurementsDigitalFiltering</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150041);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150041 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the width of bandpass and bandstop type filters in hertz. The cutoff frequencies occur at NISCOPE_ATTR_MEAS_FILTER_CENTER_FREQ �one-half width. 

Default: 1.0e3 Hz"</Description>
            </Property>
            <Property>
               <Name>FIR_Filter_Window</Name>
               <Location>WaveformMeasurementsDigitalFiltering</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150042);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150042 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the FIR window type. The possible choices are:
NISCOPE_VAL_NONE
NISCOPE_VAL_HANNING_WINDOW 
NISCOPE_VAL_HAMMING_WINDOW 
NISCOPE_VAL_TRIANGLE_WINDOW 
NISCOPE_VAL_FLAT_TOP_WINDOW 
NISCOPE_VAL_BLACKMAN_WINDOW 
The symmetric windows are applied to the FIR filter coefficients to limit passband ripple in FIR filters. 

Default: NISCOPE_VAL_NONE"</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>WaveformMeasurementsInterpolation</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="WaveformMeasurementsInterpolation1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Interpolation_Sampling_Factor</Name>
               <Location>WaveformMeasurementsInterpolation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150030);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150030 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"The new number of points for polynomial interpolation is the sampling factor times the input number of points. For example, if you acquire 1,000 points with the digitizer and set this attribute to 2.5, calling niScope_FetchWaveformMeasurementArray with the NISCOPE_VAL_POLYNOMIAL_INTERPOLATION measurement resamples the waveform to 2,500 points.

Default: 2.0"</Description>
            </Property>
            <Property>
               <Name>Polynomial_Interpolation_Order</Name>
               <Location>WaveformMeasurementsInterpolation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150029);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150029 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the polynomial order used for the polynomial interpolation measurement. For example, an order of 1 is linear interpolation whereas an order of 2 specifies parabolic interpolation. Any positive integer is valid.

Default: 1"</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>WaveformMeasurementsMultiAcquisitionTimeHistograms</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="WaveformMeasurementsMultiAcquisitionTimeHistograms1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Time_Histogram_High_Time</Name>
               <Location>WaveformMeasurementsMultiAcquisitionTimeHistograms</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150028);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150028 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the highest time value included in the multiple acquisition time histogram. The units are always seconds.

Default: 5.0e-4 seconds"</Description>
            </Property>
            <Property>
               <Name>Time_Histogram_High_Volts</Name>
               <Location>WaveformMeasurementsMultiAcquisitionTimeHistograms</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150026);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150026 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the highest voltage value included in the multiple-acquisition time histogram. The units are always volts.

Default: 10.0 V"</Description>
            </Property>
            <Property>
               <Name>Time_Histogram_Low_Time</Name>
               <Location>WaveformMeasurementsMultiAcquisitionTimeHistograms</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150027);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150027 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the lowest time value included in the multiple-acquisition time histogram. The units are always seconds.

Default: -5.0e-4 seconds"</Description>
            </Property>
            <Property>
               <Name>Time_Histogram_Low_Volts</Name>
               <Location>WaveformMeasurementsMultiAcquisitionTimeHistograms</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150025);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150025 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the lowest voltage value included in the multiple acquisition time histogram. The units are always volts.

Default: -10.0 V"</Description>
            </Property>
            <Property>
               <Name>Time_Histogram_Size</Name>
               <Location>WaveformMeasurementsMultiAcquisitionTimeHistograms</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150024);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150024 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Determines the multiple acquisition voltage histogram size. The size is set during the first call to a time histogram measurement after clearing the measurement history with niScope_ClearWaveformMeasurementStats. 

Default: 256"</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>WaveformMeasurementsMultiAcquisitionVoltageHistograms</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="WaveformMeasurementsMultiAcquisitionVoltageHistograms1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Voltage_Histogram_High_Volts</Name>
               <Location>WaveformMeasurementsMultiAcquisitionVoltageHistograms</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150023);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150023 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the highest voltage value included in the multiple acquisition voltage histogram. The units are always volts. 

Default: 10.0 V"</Description>
            </Property>
            <Property>
               <Name>Voltage_Histogram_Low_Volts</Name>
               <Location>WaveformMeasurementsMultiAcquisitionVoltageHistograms</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150022);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150022 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the lowest voltage value included in the multiple-acquisition voltage histogram. The units are always volts. 

Default: -10.0 V"</Description>
            </Property>
            <Property>
               <Name>Voltage_Histogram_Size</Name>
               <Location>WaveformMeasurementsMultiAcquisitionVoltageHistograms</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150021);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150021 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Determines the multiple acquisition voltage histogram size. The size is set the first time a voltage histogram measurement is called after clearing the measurement history with the function niScope_ClearWaveformMeasurementStats. 

Default: 256"</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>WaveformMeasurementsReferenceLevels</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="WaveformMeasurementsReferenceLevels1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>High_Reference_Level</Name>
               <Location>WaveformMeasurementsReferenceLevels</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150040);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150040 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Stores the high reference level used in many scalar measurements. Different channels may have different reference levels. Do not use the IVI-defined, nonchannel-based attributes such as NISCOPE_ATTR_MEAS_HIGH_REF if you use this attribute to set various channels to different values. 

Default: 90%"</Description>
            </Property>
            <Property>
               <Name>Low_Reference_Level</Name>
               <Location>WaveformMeasurementsReferenceLevels</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150038);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150038 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Stores the low reference level used in many scalar measurements. Different channels may have different reference levels. Do not use the IVI-defined, nonchannel-based attributes such as NISCOPE_ATTR_MEAS_LOW_REF if you use this attribute to set various channels to different values. 

Default: 10%"</Description>
            </Property>
            <Property>
               <Name>Mid_Reference_Level</Name>
               <Location>WaveformMeasurementsReferenceLevels</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150039);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150039 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Stores the mid reference level used in many scalar measurements. Different channels may have different reference levels. Do not use the IVI-defined, nonchannel-based attributes such as NISCOPE_ATTR_MEAS_MID_REF if you use this attribute to set various channels to different values. 

Default: 50%"</Description>
            </Property>
            <Property>
               <Name>Percentage_Method</Name>
               <Location>WaveformMeasurementsReferenceLevels</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150045);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150045 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the method used to map percentage reference units to voltages for the reference. Possible values are:
NISCOPE_VAL_MEAS_LOW_HIGH
NISCOPE_VAL_MEAS_MIN_MAX
NISCOPE_VAL_MEAS_BASE_TOP

Default: NISCOPE_VAL_MEAS_BASE_TOP"</Description>
            </Property>
            <Property>
               <Name>Reference_Level_Units</Name>
               <Location>WaveformMeasurementsReferenceLevels</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeGetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150016);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'ConfigurationFunctionsSetGetCheckAttributeSetAttribute');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150016 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Specifies the units of the reference levels.

NISCOPE_VAL_MEAS_VOLTAGE--Specifies that the reference levels are given in units of volts
NISCOPE_VAL_MEAS_PERCENTAGE--Percentage units, where the measurements voltage low and voltage high represent 0% and 100%, respectively.

Default: NISCOPE_VAL_MEAS_PERCENTAGE"</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
   </GroupInfo>
</MATLABInstrumentDriver>