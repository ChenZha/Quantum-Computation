// Yulin Wu, 2017/4/21
{
      "channels__xy_i__instru": "xy control I channel AWG name",
	    "channels__xy_i__chnl": "xy control I channel AWG channel",
      "channels__xy_q__instru": "xy control Q channel AWG name",
	   "channels__xy_q__chnl": "xy control Q channel AWG channel",
	 "channels__xy_mw__instru": "xy control Mixer local mw source name",
	   "channels__xy_mw__chnl": "xy control Mixer local mw source channel",
   "channels__z_pulse__instru": "z pulse control AWG name",
     "channels__z_pulse__chnl": "z pulse control AWG channel",
	  "channels__z_dc__instru": "z dc control dc source name",
	    "channels__z_dc__chnl": "z dc control dc source channel",
	"channels__r_da_i__instru": "readout input I channel AWG name",
      "channels__r_da_i__chnl": "readout input I channel AWG channel",
	"channels__r_da_q__instru": "readout input Q channel AWG name",
	  "channels__r_da_q__chnl": "readout input Q channel AWG channel",
    "channels__r_ad_i__instru": "readout output I channel AD name",
      "channels__r_ad_i__chnl": "readout output I channel AD channel",
	"channels__r_ad_q__instru": "readout output Q channel AD name",
	  "channels__r_ad_q__chnl": "readout output Q channel AD channel",
	  "channels__r_mw__instru": "readout lo mw source name",
	    "channels__r_mw__chnl": "readout lo mw source channel",
			           "f02": "working point |2>, |0> energy difference in frequency Hz",
			    "g_XY12_amp": "|1>,|2> X, Y gate amplitude",
				 "g_XY12_ln": "|1>,|2> X, Y gate length(unit: 1/AWG sampling rate)",
				 "g_Z2_z_ln": "Z/2, -Z/2 gate(implemente by z bias line) length(unit: 1/AWG sampling rate)",
               "g_Z2m_z_amp": "-Z/2 gate(implemente by z bias line) amplitude",
                 "g_Z2p_typ": "Z/2 gate type: xy(gate implemented by two xy gates) or zgate implemented by z bias line",
				 "g_Z2m_typ": "-Z/2 gate type: xy(gate implemented by two xy gates) or zgate implemented by z bias line",
               "g_Z2p_z_amp": "Z/2 gate(implemente by z bias line) amplitude",
                   "g_Z_amp": "Z gate(implemente by z bias line) amplitude",
                   "g_Z_typ": "Z gate type: xy(gate implemented by two xy gates) or zgate implemented by z bias line",
                  "g_Z_z_ln": "Z gate(implemente by z bias line) length(unit: 1/AWG sampling rate)",
	   "g_detune_wvSettings": "z detune pulse waveform extra settings",
            "g_detune_wvTyp": "z detune pulse waveform class name, e.g., flattop",
           "qr_xy_dragAlpha": "xy pulse DRAGE alpha in case of use DRAGE xy pulse. Related: qr_xy_dragPulse, f02, f01",
           "qr_xy_dragPulse": "ture or false: use DRAGE xy pulse or not. Related: qr_xy_dragAlpha, f02, f01",
		             "r_amp": "readout pulse amplitude",
		              "r_fc": "reaout mixer lo mw frequency",
                      "r_fr": "readout resonator frequency(readout resonator frequency has different value under different conditions, r_fr is just a guide for automation routines to choose a suitable scan range, thus only a corse value is enough.)",
                    "r_freq": "redout probe frequency, close to r_fr but not equal in most cases, r_freq is typically set to an optimal frequency that obtains the highest readout visibility",
			  "qr_z_amp2f01": "z pulse amplitude to f01 function parameters(param): f01 = param_(3)*sqrt(abs(cos(pi*param_(1)*abs(x_-param_(2)))))+param_(4)*(sqrt(abs(cos(pi*param_(1)*abs(x_-param_(2)))))-1)",
              "qr_z_amp2f02": "z pulse amplitude to f02 function parameters(param): f02 = param_(3)*sqrt(abs(cos(pi*param_(1)*abs(x_-param_(2)))))+param_(4)*(sqrt(abs(cos(pi*param_(1)*abs(x_-param_(2)))))-1)",
		   "t_rrDipFWHM_est": "readout resonator dip FWHM estimation, use to select a proper scanning range by auto routines",
			   "zdc_amp2f01": "z dc amplitude to f01 function parameters(param): f02 = param_(3)*sqrt(abs(cos(pi*param_(1)*abs(x_-param_(2)))))+param_(4)*(sqrt(abs(cos(pi*param_(1)*abs(x_-param_(2)))))-1)",
               "zdc_amp2f02": "z dc amplitude to f02 function parameters(param): f02 = param_(3)*sqrt(abs(cos(pi*param_(1)*abs(x_-param_(2)))))+param_(4)*(sqrt(abs(cos(pi*param_(1)*abs(x_-param_(2)))))-1)",
			       "zdc_amp": "z dc pulse amplitude, defines qubit working point(f01)",
         "zdc_ampCorrection": "z dc drift correction",
          "zdc_settlingTime": "z dc settling time in seconds, after setting dc, wait this long for dc value to stabilize in case of using a slow dc source"
}