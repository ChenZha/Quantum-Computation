%% JPA bringup
import data_taking.public.jpa.*
%%
QRFreqs=sqc.util.getQSettings('r_freq');
QRFreqss=[QRFreqs-1e6,QRFreqs+1e6];
    QRFreqss=QRFreqss';
    QRFreqss=QRFreqss(:);
    QRFreqss=QRFreqss';
setQSettings('r_avg',500);
jpaBringupADDA('jpa','impa1',...
    'signalAmp',[3.5e3],'signalFreq',QRFreqss,...
    'signalPower',20,'signalFc',6.50283e9,...
    'signalLn',6000,'rAvg',500,...
    'biasAmp',[1.1531e4],'pumpAmp',[3e4],...
    'pumpFreq',[1.36686e10],'pumpPower',[-2:0.5:6],... // 6.73563e+09 = (freq_q6 + freq_q7)/2
    'notes','','gui',true,'save',true);
%%
setQSettings('r_avg',500);
jpaGainADDA('jpa','impa1',...
    'signalAmp',[4e3],'signalFreq',[],...
    'signalPower',20,'signalFc',6.50283e9,...%6.97976e9,...
    'signalLn',10000,'rAvg',500,...
    'biasAmp',[1.1e4],'pumpAmp',[3e4],...
    'pumpFreq',[6.5453e9*2],'pumpPower',6,... // 6.73563e+09 = (freq_q6 + freq_q7)/2
    'notes','JPA','gui',true,'save',true);
%%
setQSettings('r_avg',500);
jpaGainADDA('jpa','impa1',...
    'signalAmp',[4e3],'signalFreq',[],...
    'signalPower',20,'signalFc',6.50283e9,...%6.97976e9,...
    'signalLn',10000,'rAvg',500,...
    'biasAmp',[1.1888e4],'pumpAmp',[3e4],...
    'pumpFreq',[1.36703e10],'pumpPower',13.66,... // 6.73563e+09 = (freq_q6 + freq_q7)/2
    'notes','no mixer','gui',true,'save',true);
%%
setQSettings('r_avg',500);
optParams=jpaOptimizeADDA('jpa','impa1',...
    'signalAmp',[4e3],'signalFreq',[],...
    'signalPower',20,'signalFc',6.50283e9,...
    'signalLn',10000,'rAvg',500,...
    'pumpAmp',[3e4],...
    'pumpFreq',[1.3682e10,1.36819e10],'pumpPower',[13.66,17.82],...
    'biasAmp',[1.4573e4,1.3839e4],...
    'notes','','gui',true,'save',true)
jpaGainADDA('jpa','impa1',...
    'signalAmp',[4e3],'signalFreq',[],...
    'signalPower',20,'signalFc',6.50283e9,...
    'signalLn',10000,'rAvg',500,...
    'biasAmp',optParams(3),'pumpAmp',[3e4],...
    'pumpFreq',optParams(1),'pumpPower',optParams(2),... // 6.73563e+09 = (freq_q6 + freq_q7)/2
    'notes','','gui',true,'save',true);
%% For NA, connect Mixer to an unused DC port, and setup DC value.
dcSrc = qes.qHandle.FindByClassProp('qes.hwdriver.hardware','name','dcSrc_ustcda_1');
dcChnl = dcSrc.GetChnl(15);
dcChnl.dcval = 3e4;
%%
data2=jpaBringupNA('jpa','impa1_4na',...
    'startFreq',6.5e9,'stopFreq',6.9e9,...
    'numFreqPts',501,'avgcounts',10,...
    'NAPower',0,'bandwidth',10e3,...
    'pumpFreq',[1.3655e10],'pumpPower',[6.2],...
    'biasAmp',[1.1e4],...
    'notes','','gui',true,'save',true);
%%
[ampli,freqs]=jpaGainNA('jpa','impa1_4na',...
    'startFreq',6.5e9,'stopFreq',6.9e9,...
    'numFreqPts',2001,'avgcounts',10,...
    'NAPower',0,'bandwidth',10e3,...
    'pumpFreq',[1.362993e+10],'pumpPower',[11],...
    'biasAmp',11.178e+03,...
    'notes','','gui',true,'save',true);
%%
[ampli,freqs]=jpaGainNA('jpa','impa1_4na',...
    'startFreq',6.5e9,'stopFreq',6.9e9,...
    'numFreqPts',2001,'avgcounts',10,...
    'NAPower',-10,'bandwidth',10e3,...
    'pumpFreq',[1.3655e10],'pumpPower',[6.2],...
    'biasAmp',1.1e4,...
    'notes','','gui',true,'save',true);
%% Before run, setup DC on the Mixer first.
optParams=jpaOptimizeNA('jpa','impa1_4na',...
    'startFreq',6.5e9,'stopFreq',6.9e9,...
    'numFreqPts',2001,'avgcounts',10,...
    'NAPower',0,'bandwidth',10e3,...
    'pumpFreq',[13.3e9,13.65e9],'pumpPower',[14,16],...
    'biasAmp',[0.99e4,1.1e4],...
    'notes','','gui',true,'save',true);
[ampli,freqs]=jpaGainNA('jpa','impa1_4na',...
    'startFreq',6.5e9,'stopFreq',6.9e9,...
    'numFreqPts',2001,'avgcounts',10,...
    'NAPower',0,'bandwidth',10e3,...
    'pumpFreq',optParams(1),'pumpPower',optParams(2),...
    'biasAmp',optParams(3),...
    'notes','','gui',true,'save',true);
%% turn On JPA
jpaname='impa1';
bias=sqc.util.getQSettings('biasAmp',jpaname);
pumpFreq=sqc.util.getQSettings('pumpFreq',jpaname);
pumpPower=sqc.util.getQSettings('pumpPower',jpaname);
turnOnJPA('jpa',jpaname,'on',true,'bias',bias,'pumpFreq',pumpFreq,'pumpPower',pumpPower)
%%
data_taking.public.jpa.amplification('jpa','impa1_4na',...
    'startFreq',6.4e9,'stopFreq',7.2e9,...
    'numFreqPts',301,'avgcounts',10,...
    'NAPower',-20,'bandwidth',3e3,...
    'pumpFreq',[2*6.823e9],'pumpPower',[4.4],...
    'biasAmp',[120:0.5:150]*1e-6,...
    'notes','','gui',true,'save',true);
%%
delt=1.0;
if exist('Data','var') && numel(Data)==1 % Analyse loaded data
    Data = Data{1,1};
    bias = SweepVals{1,1}{1,1};
    freqs = Data{1,1}(2,:);
else % Analyse fresh data
    Data = data.data{1};
    bias = data.sweepvals{1,1}{1,1};
    freqs = Data{1,1}(2,:);
end
meshdata=NaN(numel(bias),numel(freqs));
for II=1:numel(bias)
    meshdata(II,:)=Data{II,1}(1,:);
end
ANG=unwrap(angle(meshdata'));
figure(11);imagesc(bias,freqs,abs(meshdata'));  set(gca,'ydir','normal');xlabel('JPA bias');ylabel('Freq'); title('|S21|')
slop=(mean(ANG(end,:))-mean(ANG(1,:)))/(freqs(end)-freqs(1))*delt;
slops=meshgrid(slop*(freqs-freqs(1)),ones(1,numel(bias)))';
ANGS=mod(ANG-slops-(ANG(1,end))+pi,2*pi);
figure(12);imagesc(bias,freqs,ANGS);  set(gca,'ydir','normal');xlabel('JPA bias');ylabel('Freq');colorbar;title('unwraped phase')
